{
  "address": "0xe826D4458Ae6088d007A0545EDafA58b42Ae43BE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "_klerosArbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "contract IHATArbitrator",
          "name": "_hatArbitrator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_winnerMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loserMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_localDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Contribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        }
      ],
      "name": "Dispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "Evidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "MetaEvidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_localDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "RulingFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_localDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitratorExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loserMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeLoserMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        }
      ],
      "name": "changeMetaEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_winnerMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeWinnerMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimChallenged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "externalDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "enum IHATKlerosConnector.Decision",
          "name": "ruling",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        },
        {
          "internalType": "contract IHATClaimsManager",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "externalIDtoLocalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_side",
          "type": "uint256"
        }
      ],
      "name": "fundAppeal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArbitrationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        }
      ],
      "name": "getContributions",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "contributions",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loser",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loserAppealPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "divisor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getRoundInfo",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "paidFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[3]",
          "name": "hasPaid",
          "type": "bool[3]"
        },
        {
          "internalType": "uint256",
          "name": "feeRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "fundedSides",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contributedTo",
          "type": "uint256"
        }
      ],
      "name": "getTotalWithdrawableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hatArbitrator",
      "outputs": [
        {
          "internalType": "contract IHATArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "klerosArbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loserAppealPeriodMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loserMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaEvidenceUpdates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        },
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_disputer",
          "type": "address"
        }
      ],
      "name": "notifyArbitrator",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numberOfRulingOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidenceURI",
          "type": "string"
        }
      ],
      "name": "submitEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_side",
          "type": "uint256"
        }
      ],
      "name": "withdrawFeesAndRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_contributedTo",
          "type": "uint256"
        }
      ],
      "name": "withdrawFeesAndRewardsForAllRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5281e08f92d4d27d8b7531ce097b85954e2ef0fb3c4861c31ace636f37dbe4b",
  "receipt": {
    "to": null,
    "from": "0x1885B7c7a3AE1F35BA71C0392C13153A95c4914f",
    "contractAddress": "0xe826D4458Ae6088d007A0545EDafA58b42Ae43BE",
    "transactionIndex": 1,
    "gasUsed": "2162613",
    "logsBloom": "0x
    "blockHash": "0x492dbc73905bac2c8358acaeacf54ea79595b3f0c209dc11d2c6a2a4fc5db017",
    "transactionHash": "0xc5281e08f92d4d27d8b7531ce097b85954e2ef0fb3c4861c31ace636f37dbe4b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5675761,
        "transactionHash": "0xc5281e08f92d4d27d8b7531ce097b85954e2ef0fb3c4861c31ace636f37dbe4b",
        "address": "0xe826D4458Ae6088d007A0545EDafA58b42Ae43BE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x492dbc73905bac2c8358acaeacf54ea79595b3f0c209dc11d2c6a2a4fc5db017"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5675761,
        "transactionHash": "0xc5281e08f92d4d27d8b7531ce097b85954e2ef0fb3c4861c31ace636f37dbe4b",
        "address": "0xe826D4458Ae6088d007A0545EDafA58b42Ae43BE",
        "topics": [
          "0x61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006697066732f580000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x492dbc73905bac2c8358acaeacf54ea79595b3f0c209dc11d2c6a2a4fc5db017"
      }
    ],
    "blockNumber": 5675761,
    "cumulativeGasUsed": "3767701",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x90992fb4E15ce0C59aEFfb376460Fda4Ee19C879",
    "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
    "0x11a7d0501895059177e8436fe89bb1e3bdebf8d8",
    "ipfs/X",
    3000,
    7000
  ],
  "numDeployments": 1,
  "solcInputHash": "e2dd19fbd28890679930fe6b1d01ee82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"_klerosArbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"contract IHATArbitrator\",\"name\":\"_hatArbitrator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_winnerMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loserMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_localDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"Evidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_localDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"RulingFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_localDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loserMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeLoserMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"name\":\"changeMetaEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeWinnerMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimChallenged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"externalDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"enum IHATKlerosConnector.Decision\",\"name\":\"ruling\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalIDtoLocalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_side\",\"type\":\"uint256\"}],\"name\":\"fundAppeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArbitrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getContributions\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"contributions\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loserAppealPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"paidFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"hasPaid\",\"type\":\"bool[3]\"},{\"internalType\":\"uint256\",\"name\":\"feeRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"fundedSides\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contributedTo\",\"type\":\"uint256\"}],\"name\":\"getTotalWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatArbitrator\",\"outputs\":[{\"internalType\":\"contract IHATArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"klerosArbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserAppealPeriodMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaEvidenceUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"},{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"notifyArbitrator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfRulingOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidenceURI\",\"type\":\"string\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_side\",\"type\":\"uint256\"}],\"name\":\"withdrawFeesAndRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contributedTo\",\"type\":\"uint256\"}],\"name\":\"withdrawFeesAndRewardsForAllRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract acts a connector between HatsFinance and Kleros court.  This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.  The arbitrator must support appeal period.  The contract also trusts that IHATArbitrator contract is honest and won't reenter.\",\"events\":{\"Challenged(bytes32)\":{\"details\":\"Raised when a claim is challenged.\",\"params\":{\"_claimId\":\"Id of the claim in Vault cotract.\"}}},\"kind\":\"dev\",\"methods\":{\"changeLoserMultiplier(uint256)\":{\"details\":\"Changes loserMultiplier variable.\",\"params\":{\"_loserMultiplier\":\"The new winnerMultiplier value.\"}},\"changeMetaEvidence(string)\":{\"details\":\"Update the meta evidence used for disputes.\",\"params\":{\"_metaEvidence\":\"URI of the new meta evidence.\"}},\"changeWinnerMultiplier(uint256)\":{\"details\":\"Changes winnerMultiplier variable.\",\"params\":{\"_winnerMultiplier\":\"The new winnerMultiplier value.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitratorExtraData\":\"Extra data for the arbitrator.\",\"_hatArbitrator\":\"Address of the Hat arbitrator.\",\"_klerosArbitrator\":\"The Kleros arbitrator of the contract.\",\"_loserMultiplier\":\"Multiplier for calculation the appeal cost of the losing side.\",\"_metaEvidence\":\"Metaevidence for the dispute.\",\"_winnerMultiplier\":\"Multiplier for calculating the appeal cost of the winning side.\"}},\"fundAppeal(uint256,uint256)\":{\"details\":\"Takes up to the total amount required to fund a side. Reimburses the rest. Creates an appeal if both sides are fully funded.\",\"params\":{\"_localDisputeId\":\"The ID of the local dispute.\",\"_side\":\"The option to fund. 0 - refuse to rule, 1 - make no changes, 2 - side with challenger.\"},\"returns\":{\"_0\":\"fullyFunded Whether the side was fully funded or not.\"}},\"getArbitrationCost()\":{\"details\":\"Get the arbitration cost to challenge a claim.\",\"returns\":{\"_0\":\"Arbitration cost.\"}},\"getContributions(uint256,uint256,address)\":{\"details\":\"Gets the contributions made by a party for a given round of a dispute.\",\"params\":{\"_contributor\":\"The address of the contributor.\",\"_localDisputeId\":\"The ID of the dispute.\",\"_round\":\"The round to query.\"},\"returns\":{\"contributions\":\"The contributions.\"}},\"getMultipliers()\":{\"details\":\"Returns stake multipliers.\",\"returns\":{\"divisor\":\"Multiplier divisor.\",\"loser\":\"Losers stake multiplier.\",\"loserAppealPeriod\":\"Multiplier for calculating an appeal period duration for the losing side.\",\"winner\":\"Winners stake multiplier.\"}},\"getNumberOfRounds(uint256)\":{\"details\":\"Gets the number of rounds of the specific dispute.\",\"params\":{\"_localDisputeId\":\"The ID of the dispute.\"},\"returns\":{\"_0\":\"The number of rounds.\"}},\"getRoundInfo(uint256,uint256)\":{\"details\":\"Gets the information of a round of a dispute.\",\"params\":{\"_localDisputeId\":\"The ID of the dispute.\",\"_round\":\"The round to query.\"},\"returns\":{\"feeRewards\":\"The amount of fees that will be used as rewards.\",\"fundedSides\":\"Fully funded sides.\",\"hasPaid\":\"True if the side is fully funded\",\"paidFees\":\"The amount of fees paid for each side.\"}},\"getTotalWithdrawableAmount(uint256,address,uint256)\":{\"details\":\"Returns the sum of withdrawable amount.This function is O(n) where n is the total number of rounds.This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.\",\"params\":{\"_beneficiary\":\"The contributor for which to query.\",\"_contributedTo\":\"Side that received contributions from contributor.\",\"_localDisputeId\":\"The ID of the dispute.\"},\"returns\":{\"sum\":\"The total amount available to withdraw.\"}},\"notifyArbitrator(bytes32,string,address,address)\":{\"details\":\"Notify KlerosArbitrator that expert's committee decision was challenged. Can only be called by Hat arbitrator.  Requires the arbitration fees to be paid.\",\"params\":{\"_claimId\":\"The Id of the active claim in Vault contract.\",\"_disputer\":\"Address that made the challenge.  Note that the validity of the claim should be checked by Hat arbitrator.\",\"_evidence\":\"URI of the evidence to support the challenge.\",\"_vault\":\"Relevant vault address.\"}},\"numberOfRulingOptions(uint256)\":{\"details\":\"Returns number of possible ruling options. Valid rulings are [0, return value].\",\"returns\":{\"_0\":\"count The number of ruling options.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rule(uint256,uint256)\":{\"details\":\"Give a ruling for a dispute. Can only be called by the Kleros arbitrator.\",\"params\":{\"_disputeId\":\"ID of the dispute in the Kleros arbitrator contract.\",\"_ruling\":\"Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refused to arbitrate\\\".\"}},\"submitEvidence(uint256,string)\":{\"details\":\"Submit a reference to evidence. EVENT.\",\"params\":{\"_evidenceURI\":\"Link to evidence.\",\"_localDisputeId\":\"The id of the related dispute.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFeesAndRewards(uint256,address,uint256,uint256)\":{\"details\":\"Sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute. Reimburses contributions if there is no winner.\",\"params\":{\"_beneficiary\":\"The address to send reward to.\",\"_localDisputeId\":\"The ID of the related dispute.\",\"_round\":\"The round from which to withdraw.\",\"_side\":\"The ruling to query the reward from.\"},\"returns\":{\"reward\":\"The withdrawn amount.\"}},\"withdrawFeesAndRewardsForAllRounds(uint256,address,uint256)\":{\"details\":\"Allows to withdraw any rewards or reimbursable fees for all rounds at once.This function is O(n) where n is the total number of rounds. Arbitration cost of subsequent rounds is `A(n) = 2A(n-1) + 1`.  Thus because of this exponential growth of costs, you can assume n is less than 10 at all times.\",\"params\":{\"_beneficiary\":\"The address that made contributions.\",\"_contributedTo\":\"Side that received contributions from contributor.\",\"_localDisputeId\":\"The ID of the related dispute.\"}}},\"stateVariables\":{\"externalIDtoLocalID\":{\"details\":\"Maps external (arbitrator side) dispute id to local (arbitrable) dispute id.\",\"params\":{\"_externalDisputeID\":\"Dispute id as in arbitrator contract.\"},\"return\":\"Dispute id as in arbitrable contract.\",\"returns\":{\"_0\":\"Dispute id as in arbitrable contract.\"}}},\"title\":\"HATKlerosConnector\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HATKlerosConnector.sol\":\"HATKlerosConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@kleros/dispute-resolver-interface-contract/contracts/IDisputeResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@ferittuncer]\\n *  @reviewers: [@mtsalenc*, @hbarcelos*, @unknownunknown1, @MerlinEgalite, @fnanni-0*, @shalzz]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@kleros/erc-792/contracts/IArbitrable.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/IArbitrator.sol\\\";\\n\\n/**\\n *  @title This serves as a standard interface for crowdfunded appeals and evidence submission, which aren't a part of the arbitration (erc-792 and erc-1497) standard yet.\\n    This interface is used in Dispute Resolver (resolve.kleros.io).\\n */\\nabstract contract IDisputeResolver is IArbitrable, IEvidence {\\n    string public constant VERSION = \\\"2.0.0\\\"; // Can be used to distinguish between multiple deployed versions, if necessary.\\n\\n    /** @dev Raised when a contribution is made, inside fundAppeal function.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _round The round number the contribution was made to.\\n     *  @param ruling Indicates the ruling option which got the contribution.\\n     *  @param _contributor Caller of fundAppeal function.\\n     *  @param _amount Contribution amount.\\n     */\\n    event Contribution(uint256 indexed _localDisputeID, uint256 indexed _round, uint256 ruling, address indexed _contributor, uint256 _amount);\\n\\n    /** @dev Raised when a contributor withdraws non-zero value.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _round The round number the withdrawal was made from.\\n     *  @param _ruling Indicates the ruling option which contributor gets rewards from.\\n     *  @param _contributor The beneficiary of withdrawal.\\n     *  @param _reward Total amount of withdrawal, consists of reimbursed deposits plus rewards.\\n     */\\n    event Withdrawal(uint256 indexed _localDisputeID, uint256 indexed _round, uint256 _ruling, address indexed _contributor, uint256 _reward);\\n\\n    /** @dev To be raised when a ruling option is fully funded for appeal.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _round Number of the round this ruling option was fully funded in.\\n     *  @param _ruling The ruling option which just got fully funded.\\n     */\\n    event RulingFunded(uint256 indexed _localDisputeID, uint256 indexed _round, uint256 indexed _ruling);\\n\\n    /** @dev Maps external (arbitrator side) dispute id to local (arbitrable) dispute id.\\n     *  @param _externalDisputeID Dispute id as in arbitrator contract.\\n     *  @return localDisputeID Dispute id as in arbitrable contract.\\n     */\\n    function externalIDtoLocalID(uint256 _externalDisputeID) external virtual returns (uint256 localDisputeID);\\n\\n    /** @dev Returns number of possible ruling options. Valid rulings are [0, return value].\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @return count The number of ruling options.\\n     */\\n    function numberOfRulingOptions(uint256 _localDisputeID) external view virtual returns (uint256 count);\\n\\n    /** @dev Allows to submit evidence for a given dispute.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _evidenceURI IPFS path to evidence, example: '/ipfs/Qmarwkf7C9RuzDEJNnarT3WZ7kem5bk8DZAzx78acJjMFH/evidence.json'\\n     */\\n    function submitEvidence(uint256 _localDisputeID, string calldata _evidenceURI) external virtual;\\n\\n    /** @dev Manages contributions and calls appeal function of the specified arbitrator to appeal a dispute. This function lets appeals be crowdfunded.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _ruling The ruling option to which the caller wants to contribute.\\n     *  @return fullyFunded True if the ruling option got fully funded as a result of this contribution.\\n     */\\n    function fundAppeal(uint256 _localDisputeID, uint256 _ruling) external payable virtual returns (bool fullyFunded);\\n\\n    /** @dev Returns appeal multipliers.\\n     *  @return winnerStakeMultiplier Winners stake multiplier.\\n     *  @return loserStakeMultiplier Losers stake multiplier.\\n     *  @return loserAppealPeriodMultiplier Losers appeal period multiplier. The loser is given less time to fund its appeal to defend against last minute appeal funding attacks.\\n     *  @return denominator Multiplier denominator in basis points.\\n     */\\n    function getMultipliers()\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256 winnerStakeMultiplier,\\n            uint256 loserStakeMultiplier,\\n            uint256 loserAppealPeriodMultiplier,\\n            uint256 denominator\\n        );\\n\\n    /** @dev Allows to withdraw any reimbursable fees or rewards after the dispute gets resolved.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _contributor Beneficiary of withdraw operation.\\n     *  @param _round Number of the round that caller wants to execute withdraw on.\\n     *  @param _ruling A ruling option that caller wants to execute withdraw on.\\n     *  @return sum The amount that is going to be transferred to contributor as a result of this function call.\\n     */\\n    function withdrawFeesAndRewards(\\n        uint256 _localDisputeID,\\n        address payable _contributor,\\n        uint256 _round,\\n        uint256 _ruling\\n    ) external virtual returns (uint256 sum);\\n\\n    /** @dev Allows to withdraw any rewards or reimbursable fees after the dispute gets resolved for all rounds at once.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _contributor Beneficiary of withdraw operation.\\n     *  @param _ruling Ruling option that caller wants to execute withdraw on.\\n     */\\n    function withdrawFeesAndRewardsForAllRounds(\\n        uint256 _localDisputeID,\\n        address payable _contributor,\\n        uint256 _ruling\\n    ) external virtual;\\n\\n    /** @dev Returns the sum of withdrawable amount.\\n     *  @param _localDisputeID Identifier of a dispute in scope of arbitrable contract. Arbitrator ids can be translated to local ids via externalIDtoLocalID.\\n     *  @param _contributor Beneficiary of withdraw operation.\\n     *  @param _ruling Ruling option that caller wants to get withdrawable amount from.\\n     *  @return sum The total amount available to withdraw.\\n     */\\n    function getTotalWithdrawableAmount(\\n        uint256 _localDisputeID,\\n        address payable _contributor,\\n        uint256 _ruling\\n    ) external view virtual returns (uint256 sum);\\n}\\n\",\"keccak256\":\"0x9174a37ba69e682381a3ae6e14582a17d69f29be879ff27433fce2b971f871ae\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/IArbitrable.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/**\\n * @title IArbitrable\\n * Arbitrable interface.\\n * When developing arbitrable contracts, we need to:\\n * - Define the action taken when a ruling is received by the contract.\\n * - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\n */\\ninterface IArbitrable {\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrator The arbitrator giving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     * The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0xf1a2c2d7ec1237ef8d3c5f580ac73f56ed58fe4d023817a188363885b3eeb9f2\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/IArbitrator.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/**\\n * @title Arbitrator\\n * Arbitrator abstract contract.\\n * When developing arbitrator contracts we need to:\\n * - Define the functions for dispute creation (createDispute) and appeal (appeal). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n * - Define the functions for cost display (arbitrationCost and appealCost).\\n * - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n    enum DisputeStatus {\\n        Waiting,\\n        Appealable,\\n        Solved\\n    }\\n\\n    /**\\n     * @dev To be emitted when a dispute is created.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when a dispute can be appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealPossible(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when the current ruling is appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealDecision(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev Create a dispute. Must be called by the arbitrable contract.\\n     * Must be paid at least arbitrationCost(_extraData).\\n     * @param _choices Amount of choices the arbitrator can make in this dispute.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /**\\n     * @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give extra info on the appeal.\\n     */\\n    function appeal(uint256 _disputeID, bytes calldata _extraData) external payable;\\n\\n    /**\\n     * @dev Compute the cost of appeal. It is recommended not to increase it often, as it can be higly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function appealCost(uint256 _disputeID, bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Compute the start and end of the dispute's current or next appeal period, if possible. If not known or appeal is impossible: should return (0, 0).\\n     * @param _disputeID ID of the dispute.\\n     * @return start The start of the period.\\n     * @return end The end of the period.\\n     */\\n    function appealPeriod(uint256 _disputeID) external view returns (uint256 start, uint256 end);\\n\\n    /**\\n     * @dev Return the status of a dispute.\\n     * @param _disputeID ID of the dispute to rule.\\n     * @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint256 _disputeID) external view returns (DisputeStatus status);\\n\\n    /**\\n     * @dev Return the current ruling of a dispute. This is useful for parties to know if they should appeal.\\n     * @param _disputeID ID of the dispute.\\n     * @return ruling The ruling which has been given or the one which will be given if there is no appeal.\\n     */\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling);\\n}\\n\",\"keccak256\":\"0xfd19582446ef635cfb02a035a18efae3bc242ccf1472bb9949cad3d291306333\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: []\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IArbitrator.sol\\\";\\n\\n/** @title IEvidence\\n *  ERC-1497: Evidence Standard\\n */\\ninterface IEvidence {\\n    /**\\n     * @dev To be emitted when meta-evidence is submitted.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidence IPFS path to metaevidence, example: '/ipfs/Qmarwkf7C9RuzDEJNnarT3WZ7kem5bk8DZAzx78acJjMFH/metaevidence.json'\\n     */\\n    event MetaEvidence(uint256 indexed _metaEvidenceID, string _evidence);\\n\\n    /**\\n     * @dev To be raised when evidence is submitted. Should point to the resource (evidences are not to be stored on chain due to gas considerations).\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _evidenceGroupID Unique identifier of the evidence group the evidence belongs to.\\n     * @param _party The address of the party submiting the evidence. Note that 0x0 refers to evidence not submitted by any party.\\n     * @param _evidence IPFS path to evidence, example: '/ipfs/Qmarwkf7C9RuzDEJNnarT3WZ7kem5bk8DZAzx78acJjMFH/evidence.json'\\n     */\\n    event Evidence(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _evidenceGroupID,\\n        address indexed _party,\\n        string _evidence\\n    );\\n\\n    /**\\n     * @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n     */\\n    event Dispute(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _disputeID,\\n        uint256 _metaEvidenceID,\\n        uint256 _evidenceGroupID\\n    );\\n}\\n\",\"keccak256\":\"0xf9f105a2cbf5e34cdc5ce71d877cded1b502437f1cd6d28173898f88542418af\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x8177581667dcba94ed9eaf94aa2f4fbf5f9b908a40c98bf0de4578a92a5a47fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HATKlerosConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@unknownunknown1]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.16;\\n\\nimport {IDisputeResolver, IArbitrator} from \\\"@kleros/dispute-resolver-interface-contract/contracts/IDisputeResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IHATArbitrator.sol\\\";\\nimport \\\"./interfaces/IHATClaimsManager.sol\\\";\\nimport \\\"./interfaces/IHATKlerosConnector.sol\\\";\\n\\n/**\\n *  @title HATKlerosConnector\\n *  @dev This contract acts a connector between HatsFinance and Kleros court.\\n *  This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.\\n *  The arbitrator must support appeal period.\\n *  The contract also trusts that IHATArbitrator contract is honest and won't reenter.\\n */\\ncontract HATKlerosConnector is IDisputeResolver, IHATKlerosConnector, Ownable {\\n    uint256 private constant RULING_OPTIONS = 2; // The amount of non 0 choices the arbitrator can give.\\n    uint256 private constant MULTIPLIER_DIVISOR = 10000; // Divisor parameter for multipliers.\\n\\n    struct DisputeStruct {\\n        bytes32 claimId; // Id of the claim in HATVault contract.\\n        uint256 externalDisputeId; // Id of the dispute created in Kleros court.\\n        Decision ruling; // Ruling given by the arbitrator.\\n        bool resolved; // True if the dispute has been resolved.\\n        IHATClaimsManager vault; // Address of the vault related to a dispute.\\n        Round[] rounds; // Appeal rounds.\\n    }\\n\\n    // Round struct stores the contributions made to particular sides.\\n    // - 0 side for `Decision.None`.\\n    // - 1 side for `Decision.ExecuteResolution`.\\n    // - 2 side for `Decision.DismissResolution`.\\n    struct Round {\\n        uint256[3] paidFees; // Tracks the fees paid in this round in the form paidFees[side].\\n        bool[3] hasPaid; // True if the fees for this particular side have been fully paid in the form hasPaid[side].\\n        mapping(address => uint256[3]) contributions; // Maps contributors to their contributions for each side in the form contributions[address][side].\\n        uint256 feeRewards; // Sum of reimbursable appeal fees available to the parties that made contributions to the side that ultimately wins a dispute.\\n        uint256[] fundedSides; // Stores the sides that are fully funded.\\n    }\\n\\n    IArbitrator public immutable klerosArbitrator; // The kleros arbitrator contract (e.g. Kleros Court).\\n    IHATArbitrator public immutable hatArbitrator; // Address of the Hat arbitrator contract.\\n    uint256 public metaEvidenceUpdates; // Relevant index of the metaevidence.\\n    bytes public arbitratorExtraData; // Extra data for the arbitrator.\\n\\n    uint256 public winnerMultiplier; // Multiplier for calculating the appeal fee that must be paid for the ruling that was chosen by the arbitrator in the previous round, in basis points.\\n    uint256 public loserMultiplier; // Multiplier for calculating the appeal fee that must be paid for the ruling that the arbitrator didn't rule for in the previous round, in basis points.\\n    uint256 public immutable loserAppealPeriodMultiplier = 5000; // Multiplier for calculating the duration of the appeal period for the loser, in basis points.\\n\\n    DisputeStruct[] public disputes; // Stores the disputes created in this contract.\\n    mapping(bytes32 => bool) public claimChallenged; // True if the claim was challenged in this contract.\\n    mapping(uint256 => uint256) public override externalIDtoLocalID; // Maps external dispute ids to local dispute ids.\\n\\n    /** @dev Raised when a claim is challenged.\\n     *  @param _claimId Id of the claim in Vault cotract.\\n     */\\n    event Challenged(bytes32 indexed _claimId);\\n\\n    /** @dev Constructor.\\n     *  @param _klerosArbitrator The Kleros arbitrator of the contract.\\n     *  @param _arbitratorExtraData Extra data for the arbitrator.\\n     *  @param _hatArbitrator Address of the Hat arbitrator.\\n     *  @param _metaEvidence Metaevidence for the dispute.\\n     *  @param _winnerMultiplier Multiplier for calculating the appeal cost of the winning side.\\n     *  @param _loserMultiplier Multiplier for calculation the appeal cost of the losing side.\\n     */\\n    constructor(\\n        IArbitrator _klerosArbitrator,\\n        bytes memory _arbitratorExtraData,\\n        IHATArbitrator _hatArbitrator,\\n        string memory _metaEvidence,\\n        uint256 _winnerMultiplier,\\n        uint256 _loserMultiplier\\n    ) {\\n        emit MetaEvidence(0, _metaEvidence);\\n\\n        klerosArbitrator = _klerosArbitrator;\\n        arbitratorExtraData = _arbitratorExtraData;\\n        hatArbitrator = _hatArbitrator;\\n        winnerMultiplier = _winnerMultiplier;\\n        loserMultiplier = _loserMultiplier;\\n    }\\n\\n    // ******************** //\\n    // *    Governance    * //\\n    // ******************** //\\n\\n    /** @dev Changes winnerMultiplier variable.\\n     *  @param _winnerMultiplier The new winnerMultiplier value.\\n     */\\n    function changeWinnerMultiplier(\\n        uint256 _winnerMultiplier\\n    ) external onlyOwner {\\n        winnerMultiplier = _winnerMultiplier;\\n    }\\n\\n    /** @dev Changes loserMultiplier variable.\\n     *  @param _loserMultiplier The new winnerMultiplier value.\\n     */\\n    function changeLoserMultiplier(\\n        uint256 _loserMultiplier\\n    ) external onlyOwner {\\n        loserMultiplier = _loserMultiplier;\\n    }\\n\\n    /** @dev Update the meta evidence used for disputes.\\n     *  @param _metaEvidence URI of the new meta evidence.\\n     */\\n    function changeMetaEvidence(\\n        string calldata _metaEvidence\\n    ) external onlyOwner {\\n        metaEvidenceUpdates++;\\n        emit MetaEvidence(metaEvidenceUpdates, _metaEvidence);\\n    }\\n\\n    // ******************** //\\n    // *    Challenges    * //\\n    // ******************** //\\n\\n    /** @dev Notify KlerosArbitrator that expert's committee decision was challenged. Can only be called by Hat arbitrator.\\n     *  Requires the arbitration fees to be paid.\\n     *  @param _claimId The Id of the active claim in Vault contract.\\n     *  @param _evidence URI of the evidence to support the challenge.\\n     *  @param _vault Relevant vault address.\\n     *  @param _disputer Address that made the challenge.\\n     *  Note that the validity of the claim should be checked by Hat arbitrator.\\n     */\\n    function notifyArbitrator(\\n        bytes32 _claimId,\\n        string calldata _evidence,\\n        IHATClaimsManager _vault,\\n        address _disputer\\n    ) external payable override {\\n        require(msg.sender == address(hatArbitrator), \\\"Wrong caller\\\");\\n        require(!claimChallenged[_claimId], \\\"Claim already challenged\\\");\\n\\n        uint256 arbitrationCost = getArbitrationCost();\\n        require(msg.value >= arbitrationCost, \\\"Should pay the full deposit.\\\");\\n\\n        claimChallenged[_claimId] = true;\\n\\n        uint256 localDisputeId = disputes.length;\\n\\n        DisputeStruct storage dispute = disputes.push();\\n        dispute.claimId = _claimId;\\n        dispute.vault = _vault;\\n\\n        // Preemptively create a new funding round for future appeals.\\n        dispute.rounds.push();\\n\\n        uint256 externalDisputeId = klerosArbitrator.createDispute{\\n            value: arbitrationCost\\n        }(RULING_OPTIONS, arbitratorExtraData);\\n        dispute.externalDisputeId = externalDisputeId;\\n        externalIDtoLocalID[externalDisputeId] = localDisputeId;\\n\\n        if (msg.value > arbitrationCost) {\\n            (bool success,) = payable(_disputer).call{value: msg.value - arbitrationCost}(\\\"\\\");\\n            require(success, \\\"Failed to send ETH\\\");\\n        }\\n\\n        emit Challenged(_claimId);\\n        emit Dispute(\\n            klerosArbitrator,\\n            externalDisputeId,\\n            metaEvidenceUpdates,\\n            localDisputeId\\n        );\\n        emit Evidence(klerosArbitrator, localDisputeId, _disputer, _evidence);\\n    }\\n\\n    /** @dev Give a ruling for a dispute. Can only be called by the Kleros arbitrator.\\n     *  @param _disputeId ID of the dispute in the Kleros arbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refused to arbitrate\\\".\\n     */\\n    function rule(uint256 _disputeId, uint256 _ruling) external override {\\n        uint256 localDisputeId = externalIDtoLocalID[_disputeId];\\n\\n        DisputeStruct storage dispute = disputes[localDisputeId];\\n\\n        require(!dispute.resolved, \\\"Already resolved\\\");\\n        require(_ruling <= RULING_OPTIONS, \\\"Invalid ruling option\\\");\\n        require(\\n            address(klerosArbitrator) == msg.sender,\\n            \\\"Only the arbitrator can execute\\\"\\n        );\\n        uint256 finalRuling = _ruling;\\n\\n        // If one side paid its fees, the ruling is in its favor. Note that if the other side had also paid, an appeal would have been created.\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        if (round.fundedSides.length == 1) finalRuling = round.fundedSides[0];\\n\\n        dispute.ruling = Decision(finalRuling);\\n        dispute.resolved = true;\\n\\n        bytes32 claimId = dispute.claimId;\\n        if (finalRuling == uint256(Decision.ExecuteResolution)) {\\n            hatArbitrator.executeResolution(dispute.vault, claimId);\\n        } else {\\n            // Arbitrator dismissed the resolution or refused to arbitrate (gave 0 ruling).\\n            hatArbitrator.dismissResolution(dispute.vault, claimId);\\n        }\\n\\n        emit Ruling(IArbitrator(msg.sender), _disputeId, finalRuling);\\n    }\\n\\n    /** @dev Submit a reference to evidence. EVENT.\\n     *  @param _localDisputeId The id of the related dispute.\\n     *  @param _evidenceURI Link to evidence.\\n     */\\n    function submitEvidence(\\n        uint256 _localDisputeId,\\n        string calldata _evidenceURI\\n    ) external override {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n        // Note that by reading dispute's value we also check that it exists.\\n        require(!dispute.resolved, \\\"Dispute already resolved\\\");\\n\\n        emit Evidence(\\n            klerosArbitrator,\\n            _localDisputeId,\\n            msg.sender,\\n            _evidenceURI\\n        );\\n    }\\n\\n    // ************************ //\\n    // *       Appeals        * //\\n    // ************************ //\\n\\n    /** @dev Takes up to the total amount required to fund a side. Reimburses the rest. Creates an appeal if both sides are fully funded.\\n     *  @param _localDisputeId The ID of the local dispute.\\n     *  @param _side The option to fund. 0 - refuse to rule, 1 - make no changes, 2 - side with challenger.\\n     *  @return fullyFunded Whether the side was fully funded or not.\\n     */\\n    function fundAppeal(\\n        uint256 _localDisputeId,\\n        uint256 _side\\n    ) external payable override returns (bool) {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n        require(!dispute.resolved, \\\"Dispute already resolved.\\\");\\n        require(_side <= RULING_OPTIONS, \\\"Side out of bounds\\\");\\n\\n        uint256 externalDisputeId = dispute.externalDisputeId;\\n        (uint256 appealPeriodStart, uint256 appealPeriodEnd) = klerosArbitrator\\n            .appealPeriod(externalDisputeId);\\n        require(\\n            block.timestamp >= appealPeriodStart &&\\n                block.timestamp < appealPeriodEnd,\\n            \\\"Appeal period is over.\\\"\\n        );\\n\\n        uint256 multiplier;\\n        {\\n            uint256 winner = klerosArbitrator.currentRuling(externalDisputeId);\\n            if (winner == _side) {\\n                multiplier = winnerMultiplier;\\n            } else {\\n                require(\\n                    block.timestamp - appealPeriodStart <\\n                        ((appealPeriodEnd - appealPeriodStart) *\\n                            loserAppealPeriodMultiplier) /\\n                            MULTIPLIER_DIVISOR,\\n                    \\\"Appeal period is over for loser\\\"\\n                );\\n                multiplier = loserMultiplier;\\n            }\\n        }\\n\\n        uint256 lastRoundId = dispute.rounds.length - 1;\\n        Round storage round = dispute.rounds[lastRoundId];\\n        require(!round.hasPaid[_side], \\\"Appeal fee is already paid.\\\");\\n        uint256 appealCost = klerosArbitrator.appealCost(\\n            externalDisputeId,\\n            arbitratorExtraData\\n        );\\n        uint256 totalCost = appealCost +\\n            (appealCost * multiplier) /\\n            MULTIPLIER_DIVISOR;\\n\\n        // Take up to the amount necessary to fund the current round at the current costs.\\n        uint256 contribution = totalCost - round.paidFees[_side] > msg.value\\n            ? msg.value\\n            : totalCost - round.paidFees[_side];\\n        emit Contribution(\\n            _localDisputeId,\\n            lastRoundId,\\n            _side,\\n            msg.sender,\\n            contribution\\n        );\\n\\n        round.contributions[msg.sender][_side] += contribution;\\n        round.paidFees[_side] += contribution;\\n        if (round.paidFees[_side] >= totalCost) {\\n            round.feeRewards += round.paidFees[_side];\\n            round.fundedSides.push(_side);\\n            round.hasPaid[_side] = true;\\n            emit RulingFunded(_localDisputeId, lastRoundId, _side);\\n        }\\n\\n        if (round.fundedSides.length > 1) {\\n            // At least two sides are fully funded.\\n            dispute.rounds.push();\\n\\n            round.feeRewards = round.feeRewards - appealCost;\\n            klerosArbitrator.appeal{value: appealCost}(\\n                externalDisputeId,\\n                arbitratorExtraData\\n            );\\n        }\\n\\n        if (msg.value > contribution) {\\n            (bool success,) = payable(msg.sender).call{value: msg.value - contribution}(\\\"\\\");\\n            require(success, \\\"Failed to send ETH\\\"); // Sending extra value back to contributor. It is the user's responsibility to accept ETH.\\n        }\\n\\n        return round.hasPaid[_side];\\n    }\\n\\n    /** @dev Sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute. Reimburses contributions if there is no winner.\\n     *  @param _localDisputeId The ID of the related dispute.\\n     *  @param _beneficiary The address to send reward to.\\n     *  @param _round The round from which to withdraw.\\n     *  @param _side The ruling to query the reward from.\\n     *  @return reward The withdrawn amount.\\n     */\\n    function withdrawFeesAndRewards(\\n        uint256 _localDisputeId,\\n        address payable _beneficiary,\\n        uint256 _round,\\n        uint256 _side\\n    ) public override returns (uint256 reward) {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n        Round storage round = dispute.rounds[_round];\\n        require(dispute.resolved, \\\"Dispute not resolved\\\");\\n\\n        uint256 finalRuling = uint256(dispute.ruling);\\n        // Allow to reimburse if funding of the round was unsuccessful.\\n        if (!round.hasPaid[_side]) {\\n            reward = round.contributions[_beneficiary][_side];\\n        } else if (!round.hasPaid[finalRuling]) {\\n            // Reimburse unspent fees proportionally if the ultimate winner didn't pay appeal fees fully.\\n            // Note that if only one side is funded it will become a winner and this part of the condition won't be reached.\\n            reward =\\n                (round.contributions[_beneficiary][_side] * round.feeRewards) /\\n                (round.paidFees[round.fundedSides[0]] +\\n                    round.paidFees[round.fundedSides[1]]);\\n        } else if (finalRuling == _side) {\\n            uint256 paidFees = round.paidFees[_side];\\n            // Reward the winner.\\n            reward = paidFees > 0\\n                ? (round.contributions[_beneficiary][_side] *\\n                    round.feeRewards) / paidFees\\n                : 0;\\n        }\\n\\n        if (reward != 0) {\\n            round.contributions[_beneficiary][_side] = 0;\\n            (bool success,) = payable(_beneficiary).call{value: reward}(\\\"\\\");\\n            require(success, \\\"Failed to send ETH\\\");  // It is the user's responsibility to accept ETH.\\n            emit Withdrawal(\\n                _localDisputeId,\\n                _round,\\n                _side,\\n                _beneficiary,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /** @dev Allows to withdraw any rewards or reimbursable fees for all rounds at once.\\n     *  @dev This function is O(n) where n is the total number of rounds. Arbitration cost of subsequent rounds is `A(n) = 2A(n-1) + 1`.\\n     *  Thus because of this exponential growth of costs, you can assume n is less than 10 at all times.\\n     *  @param _localDisputeId The ID of the related dispute.\\n     *  @param _beneficiary The address that made contributions.\\n     *  @param _contributedTo Side that received contributions from contributor.\\n     */\\n    function withdrawFeesAndRewardsForAllRounds(\\n        uint256 _localDisputeId,\\n        address payable _beneficiary,\\n        uint256 _contributedTo\\n    ) external override {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n\\n        uint256 numberOfRounds = dispute.rounds.length;\\n        for (\\n            uint256 roundNumber = 0;\\n            roundNumber < numberOfRounds;\\n            roundNumber++\\n        ) {\\n            withdrawFeesAndRewards(\\n                _localDisputeId,\\n                _beneficiary,\\n                roundNumber,\\n                _contributedTo\\n            );\\n        }\\n    }\\n\\n    // ***********((********* //\\n    // *      Getters       * //\\n    // ********************** //\\n\\n    /** @dev Get the arbitration cost to challenge a claim.\\n     *  @return Arbitration cost.\\n     */\\n    function getArbitrationCost() public view returns (uint256) {\\n        return klerosArbitrator.arbitrationCost(arbitratorExtraData);\\n    }\\n\\n    /** @dev Returns number of possible ruling options. Valid rulings are [0, return value].\\n     *  @return count The number of ruling options.\\n     */\\n    function numberOfRulingOptions(\\n        uint256 /* _localDisputeId */\\n    ) external pure override returns (uint256) {\\n        return RULING_OPTIONS;\\n    }\\n\\n    /** @dev Returns stake multipliers.\\n     *  @return winner Winners stake multiplier.\\n     *  @return loser Losers stake multiplier.\\n     *  @return loserAppealPeriod Multiplier for calculating an appeal period duration for the losing side.\\n     *  @return divisor Multiplier divisor.\\n     */\\n    function getMultipliers()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 winner,\\n            uint256 loser,\\n            uint256 loserAppealPeriod,\\n            uint256 divisor\\n        )\\n    {\\n        return (\\n            winnerMultiplier,\\n            loserMultiplier,\\n            loserAppealPeriodMultiplier,\\n            MULTIPLIER_DIVISOR\\n        );\\n    }\\n\\n    /** @dev Returns the sum of withdrawable amount.\\n     *  @dev This function is O(n) where n is the total number of rounds.\\n     *  @dev This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.\\n     *  @param _localDisputeId The ID of the dispute.\\n     *  @param _beneficiary The contributor for which to query.\\n     *  @param _contributedTo Side that received contributions from contributor.\\n     *  @return sum The total amount available to withdraw.\\n     */\\n    function getTotalWithdrawableAmount(\\n        uint256 _localDisputeId,\\n        address payable _beneficiary,\\n        uint256 _contributedTo\\n    ) external view override returns (uint256 sum) {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n        if (!dispute.resolved) return sum;\\n\\n        uint256 finalRuling = uint256(dispute.ruling);\\n        uint256 noOfRounds = dispute.rounds.length;\\n        for (uint256 roundNumber = 0; roundNumber < noOfRounds; roundNumber++) {\\n            Round storage round = dispute.rounds[roundNumber];\\n\\n            if (!round.hasPaid[_contributedTo]) {\\n                // Allow to reimburse if funding was unsuccessful for this side.\\n                sum += round.contributions[_beneficiary][_contributedTo];\\n            } else if (!round.hasPaid[finalRuling]) {\\n                // Reimburse unspent fees proportionally if the ultimate winner didn't pay appeal fees fully.\\n                // Note that if only one side is funded it will become a winner and this part of the condition won't be reached.\\n                sum +=\\n                    (round.contributions[_beneficiary][_contributedTo] *\\n                        round.feeRewards) /\\n                    (round.paidFees[round.fundedSides[0]] +\\n                        round.paidFees[round.fundedSides[1]]);\\n            } else if (finalRuling == _contributedTo) {\\n                uint256 paidFees = round.paidFees[_contributedTo];\\n                // Reward the winner.\\n                sum += paidFees > 0\\n                    ? (round.contributions[_beneficiary][_contributedTo] *\\n                        round.feeRewards) / paidFees\\n                    : 0;\\n            }\\n        }\\n    }\\n\\n    /** @dev Gets the number of rounds of the specific dispute.\\n     *  @param _localDisputeId The ID of the dispute.\\n     *  @return The number of rounds.\\n     */\\n    function getNumberOfRounds(\\n        uint256 _localDisputeId\\n    ) external view returns (uint256) {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n        return dispute.rounds.length;\\n    }\\n\\n    /** @dev Gets the information of a round of a dispute.\\n     *  @param _localDisputeId The ID of the dispute.\\n     *  @param _round The round to query.\\n     *  @return paidFees The amount of fees paid for each side.\\n     *  @return hasPaid True if the side is fully funded\\n     *  @return feeRewards The amount of fees that will be used as rewards.\\n     *  @return fundedSides Fully funded sides.\\n     */\\n    function getRoundInfo(\\n        uint256 _localDisputeId,\\n        uint256 _round\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[3] memory paidFees,\\n            bool[3] memory hasPaid,\\n            uint256 feeRewards,\\n            uint256[] memory fundedSides\\n        )\\n    {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n        Round storage round = dispute.rounds[_round];\\n        return (\\n            round.paidFees,\\n            round.hasPaid,\\n            round.feeRewards,\\n            round.fundedSides\\n        );\\n    }\\n\\n    /** @dev Gets the contributions made by a party for a given round of a dispute.\\n     *  @param _localDisputeId The ID of the dispute.\\n     *  @param _round The round to query.\\n     *  @param _contributor The address of the contributor.\\n     *  @return contributions The contributions.\\n     */\\n    function getContributions(\\n        uint256 _localDisputeId,\\n        uint256 _round,\\n        address _contributor\\n    ) external view returns (uint256[3] memory contributions) {\\n        DisputeStruct storage dispute = disputes[_localDisputeId];\\n        Round storage round = dispute.rounds[_round];\\n        contributions = round.contributions[_contributor];\\n    }\\n}\\n\",\"keccak256\":\"0x8c182fd57c61caa83cf0cb5afc0f2306b64f9b1560a919d4e4da9405dacf0167\",\"license\":\"MIT\"},\"contracts/interfaces/IHATArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\ninterface IHATArbitrator {\\n    error bondsNeededToStartDisputeMustBeHigherThanMinAmount();\\n    error BondAmountSubmittedTooLow();\\n    error ClaimIsNotCurrentlyActiveClaim();\\n    error CannotSubmitMoreEvidence();\\n    error ClaimIsNotDisputed();\\n    error OnlyExpertCommittee();\\n    error AlreadyResolved();\\n    error NoResolution();\\n    error ChallengePeriodDidNotPass();\\n    error CanOnlyBeCalledByCourt();\\n    error ChallengePeriodPassed();\\n    error CannotClaimBond();\\n    error CannotDismissUnchallengedResolution();\\n    error ClaimReviewPeriodEnd();\\n    error ClaimReviewPeriodDidNotEnd();\\n    error ClaimExpired();\\n    error AlreadyChallenged();\\n    error CourtCannotBeZero();\\n    error CannontChangeCourtAddress();\\n    error ClaimDisputesDismissed();\\n\\n    struct Resolution {\\n        address beneficiary;\\n        uint16 bountyPercentage;\\n        uint256 resolvedAt;\\n    }\\n\\n    struct SubmitClaimRequest {\\n        address submitter;\\n        uint256 bond;\\n        uint256 submittedAt;\\n        string descriptionHash;\\n    }\\n\\n    event ClaimDisputed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address indexed _disputer,\\n        uint256 _bondAmount,\\n        string _descriptionHash\\n    );\\n    event DisputeDismissed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        string _descriptionHash\\n    );\\n    event DisputeAccepted(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        uint16 _bountyPercentage,\\n        address _beneficiary,\\n        string _descriptionHash\\n    );\\n    event DisputersRefunded(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address[] _disputers\\n    );\\n    event DisputersConfiscated(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address[] _disputers\\n    );\\n    event BondRefundClaimed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address _disputer,\\n        uint256 _amountClaimed\\n    );\\n    event ResolutionExecuted(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId\\n    );\\n    event ResolutionDismissed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId\\n    );\\n    event ResolutionChallenged(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId\\n    );\\n\\n    event SubmitClaimRequestCreated(\\n        bytes32 indexed _internalClaimId,\\n        address indexed _submitter,\\n        uint256 _bond,\\n        string _descriptionHash\\n    );\\n    event SubmitClaimRequestDismissed(\\n        bytes32 indexed _internalClaimId,\\n        string _descriptionHash\\n    );\\n    event SubmitClaimRequestApproved(\\n        bytes32 indexed _internalClaimId,\\n        bytes32 indexed _claimId,\\n        IHATClaimsManager indexed _vault\\n    );\\n    event SubmitClaimRequestExpired(bytes32 indexed _internalClaimId);\\n    event CourtSet(address indexed _court);\\n\\n    /**\\n     * Sets the address of the court\\n     * Can be called only once and only by the owner\\n     * @param _court the address of the decentralized court contract\\n     */\\n    function setCourt(address _court) external;\\n\\n    /**\\n     * Dispute the commitee's claim\\n     * Can be called by anyone\\n     * @param _vault the vault that the claim was created\\n     * @param _claimId the id of the claim\\n     * @param _bondAmount Amount of tokens that the disputer will put up as a bond. This must be at least minBondAmount.\\n     * The dispute is accepted if the total amount of bonds exceeds bondsNeededToStartDispute\\n     */\\n    function dispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        uint256 _bondAmount,\\n        string calldata _descriptionHash\\n    ) external;\\n\\n    /**\\n     * Dismiss the dispute - i.e. approve the original claim from the committee\\n     * Can only be called by the expert commmittee.\\n     * The expert committee will receive the bonds of the disputers as a payment for their service\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _descriptionHash an (ipfs) hash representing the motiviations of the dismissal\\n     */\\n    function dismissDispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        string calldata _descriptionHash\\n    )\\n        external;\\n\\n    /**\\n     * Acccept the dispute - i.e. rule in favor of the disputers and against the original claim from the committee\\n     * Can only be called by the Expert Committee\\n     * The expert committee can include a payment for their service in the payout process\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _bountyPercentage the percentage of the vault that will be paid out to the _beneficiary\\n     * @param _beneficiary the (new) benficiary of the claim\\n     * @param _disputersToRefund array of addresses of disputers that will get their bond back\\n     * @param _disputersToConfiscate array of addresses of disputers that will lose their bond\\n     * @param _descriptionHash a motivation of the ruling\\n     */\\n    function acceptDispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        uint16 _bountyPercentage,\\n        address _beneficiary,\\n        address[] calldata _disputersToRefund,\\n        address[] calldata _disputersToConfiscate,\\n        string calldata _descriptionHash\\n    )\\n        external;\\n\\n    /**\\n     * @notice release the bonds of the disputers, so that they can claim them back\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _disputersToRefund array of addresses\\n     */\\n    function refundDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToRefund\\n    )\\n        external;\\n\\n    /**\\n     * Forfeit the bonds of the given list of disputers. Their bonds will be sent to the expert committee\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _disputersToConfiscate a list of addresses of disputers whose bond will be forfeited\\n     */\\n    function confiscateDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToConfiscate\\n    )\\n        external;\\n\\n    /**\\n     * reclaim a bond that msg.sender has put up for a given claim\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     */\\n    function reclaimBond(IHATClaimsManager _vault, bytes32 _claimId) external;\\n\\n    /**\\n     * @notice execute a resolution from the expert committee\\n     * if the resolution was challenged, this can only be called by the court\\n     * if the resolution was not challenged durring the resolutionChallengePeriod, this can be called by anyone\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     */\\n    function executeResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId\\n    )\\n        external;\\n\\n    /**\\n     * Dismiss a resolution from the expert committee\\n     * can only be called by the court\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     */\\n    function dismissResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId\\n    )\\n        external;\\n\\n    /**\\n     * Challenge a resolution of the expert committee - i.e. bring it to the attation of the court\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _evidence URI of the evidence to support the challenge\\n     */\\n    function challengeResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        string calldata _evidence\\n    )\\n        external payable;\\n\\n    /**\\n     * Submit a request for the expert committee to consider a claim\\n     * A security researcher can use this if his claim is ignored by the committee\\n     * The requester must provide a bond, which they will lose if the claim is considered invalid by the committee\\n     * @param _descriptionHash a hash of a description of the claim\\n     */\\n    function submitClaimRequest(string calldata _descriptionHash) external;\\n\\n    /**\\n     * Dismiss a request to create a claim. Can only be called by the expert committee\\n     * @param _internalClaimId the id of the claim to dismiss\\n     * @param _descriptionHash a motivation for the dismissal\\n     */\\n    function dismissSubmitClaimRequest(\\n        bytes32 _internalClaimId,\\n        string calldata _descriptionHash\\n    ) external;\\n\\n    /**\\n     * Submit a new claim on the basis of a submitClaimRequest\\n     * only calleable by the expert committee\\n     * the claim must be submitted within the submitClaimRequestReviewPeriod\\n     * @param _vault the vault where the claim was created\\n     * @param _internalClaimId the id of the claim to approve\\n     * @param _bountyPercentage the percentage of the vault that will be paid out to the _beneficiary\\n     * @param _beneficiary the (new) benficiary of the claim\\n     * @param _descriptionHash a motivation for the claim\\n     */\\n    function approveSubmitClaimRequest(\\n        IHATClaimsManager _vault,\\n        bytes32 _internalClaimId,\\n        address _beneficiary,\\n        uint16 _bountyPercentage,\\n        string calldata _descriptionHash\\n    ) external;\\n\\n    /**\\n     * Refund the bond of the claimRequest by the sumbitter of the claim\\n     * @param _internalClaimId the claim of which the bond will be refunded\\n     */\\n    function refundExpiredSubmitClaimRequest(\\n        bytes32 _internalClaimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd46ef3bbb741f8988b42b3d46ef2098f0f73fc0571ee5e8a66d9b218feee62ae\",\"license\":\"MIT\"},\"contracts/interfaces/IHATClaimsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the IHATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATClaimsManager {\\n\\n    // How to divide the bounty - after deducting the part that is swapped to\\n    // HAT tokens (and then sent to governance and vested to the hacker)\\n    // values are in percentages and should add up to 100% (defined as 10000)\\n    struct BountySplit {\\n        // the percentage of reward sent to the hacker via vesting contract\\n        uint16 hackerVested;\\n        // the percentage of tokens that are sent directly to the hacker\\n        uint16 hacker;\\n        // the percentage sent to the committee\\n        uint16 committee;\\n    }\\n\\n    // How to divide a bounty for a claim that has been approved\\n    // used to keep track of payouts, amounts are in vault's native token\\n    struct ClaimBounty {\\n        uint256 hacker;\\n        uint256 hackerVested;\\n        uint256 committee;\\n        uint256 hackerHatVested;\\n        uint256 governanceHat;\\n    }\\n\\n    struct Claim {\\n        bytes32 claimId;\\n        address beneficiary;\\n        uint16 bountyPercentage;\\n        // the address of the committee at the time of the submission, so that this committee will\\n        // be paid their share of the bounty in case the committee changes before claim approval\\n        address committee;\\n        uint32 createdAt;\\n        uint32 challengedAt;\\n        uint256 bountyGovernanceHAT;\\n        uint256 bountyHackerHATVested;\\n        address arbitrator;\\n        uint32 challengePeriod;\\n        uint32 challengeTimeOutPeriod;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n    }\\n\\n    struct PendingMaxBounty {\\n        uint16 maxBounty;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Initialization parameters for the vault\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param vestingDuration Duration of the vesting period of the vault's\\n    * token vested part of the bounty\\n    * @param vestingPeriods The number of vesting periods of the vault's token\\n    * vested part of the bounty\\n    * @param maxBounty The maximum percentage of the vault that can be paid\\n    * out as a bounty\\n    * @param bountySplit The way to split the bounty between the hacker, \\n    * hacker vested, and committee.\\n    *   Each entry is a number between 0 and `HUNDRED_PERCENT`.\\n    *   Total splits should be equal to `HUNDRED_PERCENT`.\\n    * @param bountyGovernanceHAT The HAT bounty for governance\\n    * @param bountyHackerHATVested The HAT bounty vested for the hacker\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param committee The address of the vault's committee \\n    * @param arbitrator The address of the vault's arbitrator\\n    * @param arbitratorCanChangeBounty Can the arbitrator change a claim's bounty\\n    * @param arbitratorCanChangeBeneficiary Can the arbitrator change a claim's beneficiary\\n    * @param arbitratorCanSubmitClaims Can the arbitrator submit a claim\\n    * @param isTokenLockRevocable can the committee revoke the token lock\\n    * @dev Needed to avoid a \\\"stack too deep\\\" error\\n    */\\n    struct ClaimsManagerInitParams {\\n        uint32 vestingDuration;\\n        uint32 vestingPeriods;\\n        uint16 maxBounty;\\n        BountySplit bountySplit;\\n        uint16 bountyGovernanceHAT;\\n        uint16 bountyHackerHATVested;\\n        address owner;\\n        address committee;\\n        address arbitrator;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n        bool arbitratorCanSubmitClaims;\\n        bool isTokenLockRevocable;\\n    }\\n\\n    // Only committee\\n    error OnlyCommittee();\\n    // Active claim exists\\n    error ActiveClaimExists();\\n    // Safety period\\n    error SafetyPeriod();\\n    // Not safety period\\n    error NotSafetyPeriod();\\n    // Bounty percentage is higher than the max bounty\\n    error BountyPercentageHigherThanMaxBounty();\\n    // Only callable by arbitrator or after challenge timeout period\\n    error OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod();\\n    // No active claim exists\\n    error NoActiveClaimExists();\\n    // Claim Id specified is not the active claim Id\\n    error ClaimIdIsNotActive();\\n    // Not enough fee paid\\n    error NotEnoughFeePaid();\\n    // No pending max bounty\\n    error NoPendingMaxBounty();\\n    // Delay period for setting max bounty had not passed\\n    error DelayPeriodForSettingMaxBountyHadNotPassed();\\n    // Committee already checked in\\n    error CommitteeAlreadyCheckedIn();\\n    // Total bounty split % should be `HUNDRED_PERCENT`\\n    error TotalSplitPercentageShouldBeHundredPercent();\\n    // Vesting duration is too long\\n    error VestingDurationTooLong();\\n    // Vesting periods cannot be zero\\n    error VestingPeriodsCannotBeZero();\\n    // Vesting duration smaller than periods\\n    error VestingDurationSmallerThanPeriods();\\n    // Max bounty cannot be more than `MAX_BOUNTY_LIMIT` (unless if it is 100%)\\n    error MaxBountyCannotBeMoreThanMaxBountyLimit();\\n    // Committee bounty split cannot be more than `MAX_COMMITTEE_BOUNTY`\\n    error CommitteeBountyCannotBeMoreThanMax();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Set shares arrays must have same length\\n    error SetSharesArraysMustHaveSameLength();\\n    // Not enough user balance\\n    error NotEnoughUserBalance();\\n    // Only arbitrator or registry owner\\n    error OnlyArbitratorOrRegistryOwner();\\n    // Unchallenged claim can only be approved if challenge period is over\\n    error UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod();\\n    // Challenged claim can only be approved by arbitrator before the challenge timeout period\\n    error ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod();\\n    // Claim has expired\\n    error ClaimExpired();\\n    // Challenge period is over\\n    error ChallengePeriodEnded();\\n    // Claim can be challenged only once\\n    error ClaimAlreadyChallenged();\\n    // Only callable if challenged\\n    error OnlyCallableIfChallenged();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Cannot set a reward controller that was already used in the past\\n    error CannotSetToPerviousRewardController();\\n    // Payout must either be 100%, or up to the MAX_BOUNTY_LIMIT\\n    error PayoutMustBeUpToMaxBountyLimitOrHundredPercent();\\n\\n\\n    event SubmitClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _submitter,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        string _descriptionHash\\n    );\\n    event ChallengeClaim(bytes32 indexed _claimId);\\n    event ApproveClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _approver,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        address _tokenLock,\\n        ClaimBounty _claimBounty\\n    );\\n    event DismissClaim(bytes32 indexed _claimId);\\n    event SetCommittee(address indexed _committee);\\n    event SetVestingParams(\\n        uint256 _duration,\\n        uint256 _periods\\n    );\\n    event SetBountySplit(BountySplit _bountySplit);\\n    event CommitteeCheckedIn();\\n    event SetPendingMaxBounty(uint256 _maxBounty);\\n    event SetMaxBounty(uint256 _maxBounty);\\n    event SetHATBountySplit(uint256 _bountyGovernanceHAT, uint256 _bountyHackerHATVested);\\n    event SetArbitrator(address indexed _arbitrator);\\n    event SetChallengePeriod(uint256 _challengePeriod);\\n    event SetChallengeTimeOutPeriod(uint256 _challengeTimeOutPeriod);\\n    event SetArbitratorOptions(bool _arbitratorCanChangeBounty, bool _arbitratorCanChangeBeneficiary, bool _arbitratorCanSubmitClaims);\\n\\n    /**\\n    * @notice Initialize a claims manager instance\\n    * @param _vault The vault instance\\n    * @param _params The claim manager's initialization parameters\\n    * @dev See {IHATClaimsManager-ClaimsManagerInitParams} for more details\\n    * @dev Called when the vault is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(IHATVault _vault, ClaimsManagerInitParams calldata _params) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Claim --------------------------------------- */\\n\\n    /**\\n     * @notice Called by the committee to submit a claim for a bounty payout.\\n     * This function should be called only on a safety period, when withdrawals\\n     * are disabled, and while there's no other active claim. Cannot be called\\n     * when the registry is in an emergency pause.\\n     * Upon a call to this function by the committee the vault's withdrawals\\n     * will be disabled until the claim is approved or dismissed. Also from the\\n     * time of this call the arbitrator will have a period of \\n     * {IHATVaultsRegistry.challengePeriod} to challenge the claim.\\n     * @param _beneficiary The submitted claim's beneficiary\\n     * @param _bountyPercentage The submitted claim's bug requested reward percentage\\n     */\\n    function submitClaim(\\n        address _beneficiary, \\n        uint16 _bountyPercentage, \\n        string calldata _descriptionHash\\n    )\\n        external\\n        returns (bytes32 claimId);\\n\\n   \\n    /**\\n    * @notice Called by the arbitrator or governance to challenge a claim for a bounty\\n    * payout that had been previously submitted by the committee.\\n    * Can only be called during the challenge period after submission of the\\n    * claim.\\n    * @param _claimId The claim ID\\n    */\\n    function challengeClaim(bytes32 _claimId) external;\\n\\n    /**\\n    * @notice Approve a claim for a bounty submitted by a committee, and\\n    * pay out bounty to hacker and committee. Also transfer to the \\n    * IHATVaultsRegistry the part of the bounty that will be swapped to HAT \\n    * tokens.\\n    * If the claim had been previously challenged, this is only callable by\\n    * the arbitrator. Otherwise, callable by anyone after challengePeriod had\\n    * passed.\\n    * @param _claimId The claim ID\\n    * @param _bountyPercentage The percentage of the vault's balance that will\\n    * be sent as a bounty. This value will be ignored if the caller is not the\\n    * arbitrator.\\n    * @param _beneficiary where the bounty will be sent to. This value will be \\n    * ignored if the caller is not the arbitrator.\\n    */\\n    function approveClaim(bytes32 _claimId, uint16 _bountyPercentage, address _beneficiary)\\n        external;\\n\\n    /**\\n    * @notice Dismiss the active claim for bounty payout submitted by the\\n    * committee.\\n    * Called either by the arbitrator, or by anyone if the claim has timed out.\\n    * @param _claimId The claim ID\\n    */\\n    function dismissClaim(bytes32 _claimId) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Params -------------------------------------- */\\n\\n    /**\\n    * @notice Set new committee address. Can be called by existing committee,\\n    * or by the the vault's owner in the case that the committee hadn't checked in\\n    * yet.\\n    * @param _committee The address of the new committee \\n    */\\n    function setCommittee(address _committee) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vesting params for the\\n    * part of the bounty that the hacker gets vested in the vault's native\\n    * token\\n    * @param _duration Duration of the vesting period. Must be smaller than\\n    * 120 days and bigger than `_periods`\\n    * @param _periods Number of vesting periods. Cannot be 0.\\n    */\\n    function setVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault token bounty split\\n    * upon an approval.\\n    * Can only be called if is no active claim and not during safety periods.\\n    * @param _bountySplit The bounty split\\n    */\\n    function setBountySplit(BountySplit calldata _bountySplit) external;\\n\\n    /**\\n    * @notice Called by the vault's committee to claim it's role.\\n    * Deposits are enabled only after committee check in.\\n    */\\n    function committeeCheckIn() external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set a pending request for the\\n    * maximum percentage of the vault that can be paid out as a bounty.\\n    * Cannot be called if there is an active claim that has been submitted.\\n    * Max bounty should be less than or equal to 90% (defined as 9000).\\n    * It can also be set to 100%, but in this mode the vault will only allow\\n    * payouts of the 100%, and the vault will become inactive forever afterwards.\\n    * The pending value can be set by the owner after the time delay (of \\n    * {IHATVaultsRegistry.generalParameters.setMaxBountyDelay}) had passed.\\n    * @param _maxBounty The maximum bounty percentage that can be paid out\\n    */\\n    function setPendingMaxBounty(uint16 _maxBounty) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault's max bounty to\\n    * the already pending max bounty.\\n    * Cannot be called if there are active claims that have been submitted.\\n    * Can only be called if there is a max bounty pending approval, and the\\n    * time delay since setting the pending max bounty had passed.\\n    */\\n    function setMaxBounty() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault HAT token bounty \\n    * split upon an approval.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _bountyGovernanceHAT The HAT bounty for governance\\n    * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n    */\\n    function setHATBountySplit(\\n        uint16 _bountyGovernanceHAT,\\n        uint16 _bountyHackerHATVested\\n    ) \\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault arbitrator\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitrator The address of vault's arbitrator\\n    */\\n    function setArbitrator(address _arbitrator) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * a claim for a bounty payout has been submitted that it can be challenged\\n    * by the arbitrator.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengePeriod The vault's challenge period\\n    */\\n    function setChallengePeriod(uint32 _challengePeriod) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * which a claim for a bounty payout can be dismissed by anyone.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengeTimeOutPeriod The vault's challenge timeout period\\n    */\\n    function setChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod)\\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set whether the arbitrator\\n    * can change a claim bounty percentage and/ or beneficiary\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitratorCanChangeBounty Whether the arbitrator can change a claim bounty percentage\\n    * @param _arbitratorCanChangeBeneficiary Whether the arbitrator can change a claim beneficiary\\n    */\\n    function setArbitratorOptions(\\n        bool _arbitratorCanChangeBounty,\\n        bool _arbitratorCanChangeBeneficiary,\\n        bool _arbitratorCanSubmitClaims\\n    )\\n        external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* --------------------------------- Getters -------------------------------------- */\\n\\n    /** \\n    * @notice Returns the max bounty that can be paid from the vault in percentages out of HUNDRED_PERCENT\\n    * @return The max bounty\\n    */\\n    function maxBounty() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns whether the committee has checked in\\n    * @return Whether the committee has checked in\\n    */\\n    function committeeCheckedIn() external view returns(bool);\\n\\n    /** \\n    * @notice Returns the current active claim\\n    * @return The current active claim\\n    */\\n    function getActiveClaim() external view returns(Claim memory);\\n\\n    /** \\n    * @notice Returns the vault HAT bounty split part that goes to the governance\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that goes to the governance\\n    */\\n    function getBountyGovernanceHAT() external view returns(uint16);\\n    \\n    /** \\n    * @notice Returns the vault HAT bounty split part that is vested for the hacker\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that is vested for the hacker\\n    */\\n    function getBountyHackerHATVested() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the address of the vault's arbitrator\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The address of the vault's arbitrator\\n    */\\n    function getArbitrator() external view returns(address);\\n\\n    /** \\n    * @notice Returns the period of time after a claim for a bounty payout has\\n    * been submitted that it can be challenged by the arbitrator.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge period\\n    */\\n    function getChallengePeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the period of time after which a claim for a bounty\\n    * payout can be dismissed by anyone.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge timeout period\\n    */\\n    function getChallengeTimeOutPeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the claims manager's version\\n    * @return The claims manager's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n}\\n\",\"keccak256\":\"0x65002b348c94f5fcacc302fd5da474317dfbc98b52530d523931a96216cad37e\",\"license\":\"MIT\"},\"contracts/interfaces/IHATKlerosConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\ninterface IHATKlerosConnector {\\n\\n    enum Decision {\\n        None, // Court wasn't able to make a decisive ruling. In this case the resolution is dismissed. Both sides will get their appeal deposits back in this case.\\n        ExecuteResolution, // Execute expert's committee resolution.\\n        DismissResolution // Dismiss the resolution.\\n    }\\n\\n    function notifyArbitrator(bytes32 _claimId, string calldata _evidence, IHATClaimsManager _vault, address _disputer) external payable;\\n}\\n\",\"keccak256\":\"0x97507b9e67b39b430cdd16c257d611abd94b029f75609e74e14cff0446d2c6fe\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the HATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATVault is IERC4626Upgradeable {\\n\\n    /**\\n    * @notice Initialization parameters for the vault token\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param isPaused Whether to initialize the vault with deposits disabled\\n    * @param descriptionHash The hash of the vault's description\\n    */\\n    struct VaultInitParams {\\n        string name;\\n        string symbol;\\n        IRewardController[] rewardControllers;\\n        IERC20 asset;\\n        address owner;\\n        bool isPaused;\\n        string descriptionHash;\\n    }\\n\\n    // Only claims manager can make this call\\n    error OnlyClaimsManager();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Vault not started yet\\n    error VaultNotStartedYet();\\n    // First deposit must return at least MINIMAL_AMOUNT_OF_SHARES\\n    error AmountOfSharesMustBeMoreThanMinimalAmount();\\n    // Withdraw amount must be greater than zero\\n    error WithdrawMustBeGreaterThanZero();\\n    // Cannot mint burn or transfer 0 amount of shares\\n    error AmountCannotBeZero();\\n    // Cannot transfer shares to self\\n    error CannotTransferToSelf();\\n    // Cannot deposit to another user with withdraw request\\n    error CannotTransferToAnotherUserWithActiveWithdrawRequest();\\n    // Redeem amount cannot be more than maximum for user\\n    error RedeemMoreThanMax();\\n    // Deposit passed max slippage\\n    error DepositSlippageProtection();\\n    // Mint passed max slippage\\n    error MintSlippageProtection();\\n    // Withdraw passed max slippage\\n    error WithdrawSlippageProtection();\\n    // Redeem passed max slippage\\n    error RedeemSlippageProtection();\\n    // Cannot add the same reward controller more than once\\n    error DuplicatedRewardController();\\n    // Fee must be less than or equal to 2%\\n    error WithdrawalFeeTooBig();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Only fee setter\\n    error OnlyFeeSetter();\\n    // Cannot unpasue deposits for a vault that was destroyed\\n    error CannotUnpauseDestroyedVault();\\n\\n    event AddRewardController(IRewardController indexed _newRewardController);\\n    event SetWithdrawalFee(uint256 _newFee);\\n    event VaultPayout(uint256 _amount);\\n    event SetDepositPause(bool _depositPause);\\n    event SetWithdrawPaused(bool _withdrawPaused);\\n    event VaultStarted();\\n    event VaultDestroyed();\\n    event SetVaultDescription(string _descriptionHash);\\n    event WithdrawRequest(\\n        address indexed _beneficiary,\\n        uint256 _withdrawEnableTime\\n    );\\n\\n    /**\\n    * @notice Initialize a vault token instance\\n    * @param _claimsManager The vault's claims manager\\n    * @param _params The vault token initialization parameters\\n    * @dev See {IHATVault-VaultInitParams} for more details\\n    * @dev Called when the vault token is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(address _claimsManager, VaultInitParams calldata _params) external;\\n\\n    /**\\n    * @notice Adds a reward controller to the reward controllers list\\n    * @param _rewardController The reward controller to add\\n    */\\n    function addRewardController(IRewardController _rewardController) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to disable all deposits to the vault\\n    * @param _depositPause Are deposits paused\\n    */\\n    function setDepositPause(bool _depositPause) external;\\n\\n    /**\\n    * @notice Called by the registry's fee setter to set the fee for \\n    * withdrawals from the vault.\\n    * @param _fee The new fee. Must be smaller than or equal to `MAX_WITHDRAWAL_FEE`\\n    */\\n    function setWithdrawalFee(uint256 _fee) external;\\n\\n    /**\\n    * @notice Make a payout out of the vault\\n    * @param _amount The amount to send out for the payout\\n    */\\n    function makePayout(uint256 _amount) external;\\n\\n    /**\\n    * @notice Called by the vault's claims manager to disable all withdrawals from the vault\\n    * @param _withdrawPaused Are withdraws paused\\n    */\\n    function setWithdrawPaused(bool _withdrawPaused) external;\\n\\n    /**\\n    * @notice Start the vault, deposits are disabled until the vault is first started\\n    */\\n    function startVault() external;\\n\\n\\n    /**\\n    * @notice Permanently disables deposits to the vault\\n    */\\n    function destroyVault() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to change the description of the\\n    * vault in the Hats.finance UI\\n    * @param _descriptionHash the hash of the vault's description\\n    */\\n    function setVaultDescription(string calldata _descriptionHash) external;\\n    \\n    /** \\n    * @notice Returns the vault's version\\n    * @return The vault's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function claimsManager() external view returns(address);\\n\\n    /**\\n    * @notice Submit a request to withdraw funds from the vault.\\n    * The request will only be approved if there is no previous active\\n    * withdraw request.\\n    * The request will be pending for a period of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestPendingPeriod},\\n    * after which a withdraw will be possible for a duration of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestEnablePeriod}\\n    */\\n    function withdrawRequest() external;\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Redeem all of the user's shares in the vault for the respective amount\\n    * of underlying assets without calling the reward controller, meaning user renounces\\n    * their uncommited part of the reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param receiver Address of receiver of the funds \\n    */\\n    function emergencyWithdraw(address receiver) external returns (uint256 assets);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated rewards.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeem(uint256 shares, address receiver, address owner)\\n        external  \\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @dev See {IERC4626-deposit}.\\n    */\\n    function deposit(uint256 assets, address receiver) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * Allows to specify minimum shares to be minted for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @param minShares Minimum amount of shares to minted for the assets\\n    */\\n    function deposit(uint256 assets, address receiver, uint256 minShares) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault based on the amount of shares to mint specified.\\n    * Can only be called if the committee had checked in and deposits are not paused,\\n    * and the registry is not in an emergency pause.\\n    * Allows to specify maximum assets to be deposited for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param shares Amount of vault's shares to mint\\n    * @param maxAssets Maximum amount of assets to deposit for the shares\\n    */\\n    function mint(uint256 shares, address receiver, uint256 maxAssets) \\n        external\\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated HAT reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external  \\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Returns the amount of shares to be burned to give the user the exact\\n    * amount of assets requested plus cover for the fee. Also returns the amount assets\\n    * to be paid as fee.\\n    * @return shares The amount of shares to be burned to get the requested amount of assets\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewWithdrawAndFee(uint256 assets) external view returns (uint256 shares, uint256 fee);\\n\\n\\n    /** \\n    * @notice Returns the amount of assets to be sent to the user for the exact\\n    * amount of shares to redeem. Also returns the amount assets to be paid as fee.\\n    * @return assets amount of assets to be sent in exchange for the amount of shares specified\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewRedeemAndFee(uint256 shares) external view returns (uint256 assets, uint256 fee);\\n}\\n\",\"keccak256\":\"0x98e04ef364f09fb7ec4c4cb4bcc46973a98dc742b3399e82a21a8aee02f6c1b1\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title Interface for the Hats.finance Vault Registry\\n * @author hats.finance\\n * @notice The Hats.finance Vault Registry is used to deploy Hats.finance\\n * vaults and manage shared parameters.\\n *\\n * Hats.finance is a proactive bounty protocol for white hat hackers and\\n * security experts, where projects, community members, and stakeholders\\n * incentivize protocol security and responsible disclosure.\\n * Hats create scalable vaults using the project\\u2019s own token. The value of the\\n * bounty increases with the success of the token and project.\\n *\\n * The owner of the registry has the permission to set time limits and bounty\\n * parameters and change vaults' info, and to set the other registry roles -\\n * fee setter and arbitrator.\\n * The arbitrator can challenge submitted claims for bounty payouts made by\\n * vaults' committees, approve them with a different bounty percentage or\\n * dismiss them.\\n * The fee setter can set the fee on withdrawals on all vaults.\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n *\\n * @dev New hats.finance vaults should be created through a call to {createVault}\\n * so that they are linked to the registry\\n */\\ninterface IHATVaultsRegistry {\\n\\n    // a struct with parameters for all vaults\\n    struct GeneralParameters {\\n        // vesting duration for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingDuration;\\n        // vesting periods for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingPeriods;\\n        // withdraw enable period. safetyPeriod starts when finished.\\n        uint32 withdrawPeriod;\\n        // withdraw disable period - time for the committee to gather and decide on actions,\\n        // withdrawals are not possible in this time. withdrawPeriod starts when finished.\\n        uint32 safetyPeriod;\\n        // period of time after withdrawRequestPendingPeriod where it is possible to withdraw\\n        // (after which withdrawals are not possible)\\n        uint32 withdrawRequestEnablePeriod;\\n        // period of time that has to pass after withdraw request until withdraw is possible\\n        uint32 withdrawRequestPendingPeriod;\\n        // period of time that has to pass after setting a pending max\\n        // bounty before it can be set as the new max bounty\\n        uint32 setMaxBountyDelay;\\n        // fee in ETH to be transferred with every logging of a claim\\n        uint256 claimFee;\\n    }\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the withdraw period to\\n     * be set is shorter than 1 hour\\n     */\\n    error WithdrawPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the safety period to\\n     * be set is longer than 6 hours\\n     */\\n    error SafetyPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * pending period to be set is shorter than 3 months\\n     */\\n    error WithdrawRequestPendingPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is shorter than 6 hours\\n     */\\n    error WithdrawRequestEnabledPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is longer than 100 days\\n     */\\n    error WithdrawRequestEnabledPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration to be\\n     * set is longer than 180 days\\n     */\\n    error HatVestingDurationTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting periods to be\\n     * set is 0\\n     */\\n    error HatVestingPeriodsCannotBeZero();\\n    \\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration is \\n     * smaller than the vesting periods\\n     */\\n    error HatVestingDurationSmallerThanPeriods();\\n\\n    /**\\n     * @notice Raised on {setMaxBountyDelay} if the max bounty to be set is\\n     * shorter than 2 days\\n     */\\n    error DelayTooShort();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount to swap is zero\\n     */\\n    error AmountToSwapIsZero();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the swap was not successful\\n     */\\n    error SwapFailed();\\n    // Wrong amount received\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount that was recieved in\\n     * the swap was less than the minimum amount specified\\n     */\\n    error AmountSwappedLessThanMinimum();\\n\\n    /**\\n     * @notice Raised on {setDefaultHATBountySplit} if the split to be set is\\n     * greater than 20% (defined as 2000)\\n     */\\n    error TotalHatsSplitPercentageShouldBeUpToMaxHATSplit();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is shorter than 1 day\\n     */\\n    error ChallengePeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is longer than 5 days\\n     */\\n    error ChallengePeriodTooLong();\\n        \\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is shorter than 1 day\\n     */\\n    error ChallengeTimeOutPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is longer than 125 days\\n     */\\n    error ChallengeTimeOutPeriodTooLong();\\n    \\n    /**\\n     * @notice Raised on {LogClaim} if the transaction was not sent with the\\n     * amount of ETH specified as {generalParameters.claimFee}\\n     */\\n    error NotEnoughFeePaid();\\n\\n    /**\\n     * @notice Raised on {LogClaim} if the transfer of the claim fee failed\\n     */\\n    error ClaimFeeTransferFailed();\\n\\n    /**\\n     * @notice Emitted on deployment of the registry\\n     * @param _hatVaultImplementation The HATVault implementation address\\n     * @param _hatClaimsManagerImplementation The HATClaimsManager implementation address\\n     * @param _HAT The HAT token address\\n     * @param _tokenLockFactory The token lock factory address\\n     * @param _generalParameters The registry's general parameters\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     * @param _hatGovernance The registry's governance\\n     * @param _defaultChallengePeriod The new default challenge period\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     */\\n    event RegistryCreated(\\n        address _hatVaultImplementation,\\n        address _hatClaimsManagerImplementation,\\n        address _HAT,\\n        address _tokenLockFactory,\\n        GeneralParameters _generalParameters,\\n        uint256 _bountyGovernanceHAT,\\n        uint256 _bountyHackerHATVested,\\n        address _hatGovernance,\\n        address _defaultArbitrator,\\n        uint256 _defaultChallengePeriod,\\n        uint256 _defaultChallengeTimeOutPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a claim is logged\\n     * @param _claimer The address of the claimer\\n     * @param _descriptionHash - a hash of an ipfs encrypted file which\\n     * describes the claim.\\n     */\\n    event LogClaim(address indexed _claimer, string _descriptionHash);\\n\\n    /**\\n     * @notice Emitted when a new fee setter is set\\n     * @param _feeSetter The address of the new fee setter\\n     */\\n    event SetFeeSetter(address indexed _feeSetter);\\n\\n    /**\\n     * @notice Emitted when new withdraw request time limits are set\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    event SetWithdrawRequestParams(\\n        uint256 _withdrawRequestPendingPeriod,\\n        uint256 _withdrawRequestEnablePeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a new fee for logging a claim for a bounty is set\\n     * @param _fee Claim fee in ETH to be transferred on any call of {logClaim}\\n     */\\n    event SetClaimFee(uint256 _fee);\\n\\n    /**\\n     * @notice Emitted when new durations are set for withdraw period and\\n     * safety period\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled\\n     */\\n    event SetWithdrawSafetyPeriod(\\n        uint256 _withdrawPeriod,\\n        uint256 _safetyPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when new HAT vesting parameters are set\\n     * @param _duration The duration of the vesting period\\n     * @param _periods The number of vesting periods\\n     */\\n    event SetHatVestingParams(uint256 _duration, uint256 _periods);\\n\\n    /**\\n     * @notice Emitted when a new timelock delay for setting the\\n     * max bounty is set\\n     * @param _delay The time period for the delay\\n     */\\n    event SetMaxBountyDelay(uint256 _delay);\\n\\n    /**\\n     * @notice Emitted when the UI visibility of a vault is changed\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     */\\n    event SetVaultVisibility(address indexed _vault, bool indexed _visible);\\n\\n    /** @dev Emitted when a new vault is created\\n     * @param _vault The address of the vault to add to the registry\\n     * @param _claimsManager The address of the vault's claims manager\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _claimsManagerParams The vault's claims manager initialization parameters\\n     */\\n    event VaultCreated(\\n        address indexed _vault,\\n        address indexed _claimsManager,\\n        IHATVault.VaultInitParams _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams _claimsManagerParams\\n    );\\n    \\n    /** @notice Emitted when a swap of vault tokens to HAT tokens is done and\\n     * the HATS tokens are sent to beneficiary through vesting contract\\n     * @param _beneficiary Address of beneficiary\\n     * @param _amountSwapped Amount of vault's native tokens that was swapped\\n     * @param _amountSent Amount of HAT tokens sent to beneficiary\\n     * @param _tokenLock Address of the token lock contract that holds the HAT\\n     * tokens (address(0) if no token lock is used)\\n     */\\n    event SwapAndSend(\\n        address indexed _beneficiary,\\n        uint256 _amountSwapped,\\n        uint256 _amountSent,\\n        address indexed _tokenLock\\n    );\\n\\n    /**\\n     * @notice Emitted when a new default HAT bounty split is set\\n     * @param _defaultBountyGovernanceHAT The new default HAT bounty part sent to governance\\n     * @param _defaultBountyHackerHATVested The new default HAT bounty part vseted for the hacker\\n     */\\n    event SetDefaultHATBountySplit(uint256 _defaultBountyGovernanceHAT, uint256 _defaultBountyHackerHATVested);\\n\\n    /**\\n     * @notice Emitted when a new default arbitrator is set\\n     * @param _defaultArbitrator The address of the new arbitrator\\n     */\\n    event SetDefaultArbitrator(address indexed _defaultArbitrator);\\n\\n    /**\\n     * @notice Emitted when a new default challenge period is set\\n     * @param _defaultChallengePeriod The new default challenge period\\n     */ \\n    event SetDefaultChallengePeriod(uint256 _defaultChallengePeriod);\\n\\n    /**\\n     * @notice Emitted when a new default challenge timeout period is set\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     * period\\n     */\\n    event SetDefaultChallengeTimeOutPeriod(uint256 _defaultChallengeTimeOutPeriod);\\n\\n    /** @notice Emitted when the system is put into emergency pause/unpause\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    event SetEmergencyPaused(bool _isEmergencyPaused);\\n\\n    /**\\n     * @notice Emitted when a new swap token is set\\n     * @param _swapToken The new swap token address\\n     */\\n    event SetSwapToken(address indexed _swapToken);\\n\\n    /**\\n     * @notice Emitted when a new HATVault implementation is set\\n     * @param _hatVaultImplementation The address of the new HATVault implementation\\n     */\\n    event SetHATVaultImplementation(address indexed _hatVaultImplementation);\\n\\n    /**\\n     * @notice Emitted when a new HATClaimsManager implementation is set\\n     * @param _hatClaimsManagerImplementation The address of the new HATClaimsManager implementation\\n     */\\n    event SetHATClaimsManagerImplementation(address indexed _hatClaimsManagerImplementation);\\n\\n    /**\\n     * @notice Called by governance to pause/unpause the system in case of an\\n     * emergency\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    function setEmergencyPaused(bool _isEmergencyPaused) external;\\n\\n    /**\\n     * @notice Called by governance to set a new swap token\\n     * @param _swapToken the new swap token address\\n     */\\n    function setSwapToken(address _swapToken) external;\\n\\n    /**\\n     * @notice Called by governance to set a new HATVault and HATVault implementation to be\\n     * used by the registry for creating new vaults\\n     * @param _hatVaultImplementation The address of the HATVault implementation\\n     * @param _hatClaimsManagerImplementation The address of the HATClaimsManager implementation\\n     */\\n    function setVaultImplementations(address _hatVaultImplementation, address _hatClaimsManagerImplementation) external;\\n\\n    /**\\n     * @notice Emit an event that includes the given _descriptionHash\\n     * This can be used by the claimer as evidence that she had access to the\\n     * information at the time of the call\\n     * if a {generalParameters.claimFee} > 0, the caller must send that amount\\n     * of ETH for the claim to succeed\\n     * @param _descriptionHash - a hash of an IPFS encrypted file which \\n     * describes the claim.\\n     */\\n    function logClaim(string calldata _descriptionHash) external payable;\\n\\n    /**\\n     * @notice Called by governance to set the default percentage of each claim bounty\\n     * that will be swapped for hats and sent to the governance or vested for the hacker\\n     * @param _defaultBountyGovernanceHAT The HAT bounty for governance\\n     * @param _defaultBountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function setDefaultHATBountySplit(\\n        uint16 _defaultBountyGovernanceHAT,\\n        uint16 _defaultBountyHackerHATVested\\n    ) \\n        external;\\n\\n    /** \\n     * @dev Check that a given hats bounty split is legal, meaning that:\\n     *   Each entry is a number between 0 and less than `MAX_HAT_SPLIT`.\\n     *   Total splits should be less than `MAX_HAT_SPLIT`.\\n     * function will revert in case the bounty split is not legal.\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function validateHATSplit(uint16 _bountyGovernanceHAT, uint16 _bountyHackerHATVested)\\n         external\\n         pure;\\n\\n    /**\\n     * @notice Called by governance to set the default arbitrator.\\n     * @param _defaultArbitrator The default arbitrator address\\n     */\\n    function setDefaultArbitrator(address _defaultArbitrator) external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge period\\n     * @param _defaultChallengePeriod The default challenge period\\n     */\\n    function setDefaultChallengePeriod(uint32 _defaultChallengePeriod) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge timeout\\n     * @param _defaultChallengeTimeOutPeriod The Default challenge timeout\\n     */\\n    function setDefaultChallengeTimeOutPeriod(\\n        uint32 _defaultChallengeTimeOutPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Check that the given challenge period is legal, meaning that it\\n     * is greater than 1 day and less than 5 days.\\n     * @param _challengePeriod The challenge period to check\\n     */\\n    function validateChallengePeriod(uint32 _challengePeriod) external pure;\\n\\n    /**\\n     * @notice Check that the given challenge timeout period is legal, meaning\\n     * that it is greater than 2 days and less than 125 days.\\n     * @param _challengeTimeOutPeriod The challenge timeout period to check\\n     */\\n    function validateChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod) external pure;\\n   \\n    /**\\n     * @notice Called by governance to set the fee setter role\\n     * @param _feeSetter Address of new fee setter\\n     */\\n    function setFeeSetter(address _feeSetter) external;\\n\\n    /**\\n     * @notice Called by governance to set time limits for withdraw requests\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    function setWithdrawRequestParams(\\n        uint32 _withdrawRequestPendingPeriod,\\n        uint32  _withdrawRequestEnablePeriod\\n    )\\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the fee for logging a claim for a\\n     * bounty in any vault.\\n     * @param _fee Claim fee in ETH to be transferred on any call of\\n     * {logClaim}\\n     */\\n    function setClaimFee(uint256 _fee) external;\\n\\n    /**\\n     * @notice Called by governance to set the withdraw period and safety\\n     * period, which are always interchanging.\\n     * The safety period is time that the committee can submit claims for \\n     * bounty payouts, and during which withdrawals are disabled and the\\n     * bounty split cannot be changed.\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance. Must be\\n     * at least 1 hour.\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled. Must be at most 6 hours.\\n     */\\n    function setWithdrawSafetyPeriod(\\n        uint32 _withdrawPeriod,\\n        uint32 _safetyPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set vesting params for rewarding hackers\\n     * with rewardToken, for all vaults\\n     * @param _duration Duration of the vesting period. Must be less than 180\\n     * days.\\n     * @param _periods The number of vesting periods. Must be more than 0 and \\n     * less then the vesting duration.\\n     */\\n    function setHatVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n     * @notice Called by governance to set the timelock delay for setting the\\n     * max bounty (the time between setPendingMaxBounty and setMaxBounty)\\n     * @param _delay The time period for the delay. Must be at least 2 days.\\n     */\\n    function setMaxBountyDelay(uint32 _delay) external;\\n\\n    /**\\n     * @notice Create a new vault\\n     * NOTE: Vaults should not use tokens which do not guarantee that the \\n     * amount specified is the amount transferred\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _vaultParams The vault token initialization parameters\\n     * @return vault The address of the new vault\\n     */\\n    function createVault(\\n        IHATVault.VaultInitParams calldata _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams calldata _claimsManagerParams\\n    ) external returns(address vault, address vaultClaimsManager);\\n\\n    /**\\n     * @notice Called by governance to change the UI visibility of a vault\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     * This parameter can be used by the UI to include or exclude the vault\\n     */\\n    function setVaultVisibility(address _vault, bool _visible) external;\\n\\n    /**\\n     * @notice Transfer the part of the bounty that is supposed to be swapped\\n     * into HAT tokens from the HATVault to the registry, and keep track of\\n     * the amounts to be swapped and sent/burnt in a later transaction\\n     * @param _asset The vault's native token\\n     * @param _hacker The address of the beneficiary of the bounty\\n     * @param _hackersHatReward The amount of the vault's native token to be\\n     * swapped to HAT tokens and sent to the hacker via a vesting contract\\n     * @param _governanceHatReward The amount of the vault's native token to\\n     * be swapped to HAT tokens and sent to governance\\n     */\\n    function addTokensToSwap(\\n        IERC20 _asset,\\n        address _hacker,\\n        uint256 _hackersHatReward,\\n        uint256 _governanceHatReward\\n    ) external;\\n\\n    /**\\n     * @notice Called by governance to swap the given asset to HAT tokens and \\n     * distribute the HAT tokens: Send to governance their share and send to\\n     * beneficiaries their share through a vesting contract.\\n     * @param _asset The address of the token to be swapped to HAT tokens\\n     * @param _beneficiaries Addresses of beneficiaries\\n     * @param _amountOutMinimum Minimum amount of HAT tokens at swap\\n     * @param _routingContract Routing contract to call for the swap\\n     * @param _routingPayload Payload to send to the _routingContract for the\\n     * swap\\n     */\\n    function swapAndSend(\\n        address _asset,\\n        address[] calldata _beneficiaries,\\n        uint256 _amountOutMinimum,\\n        address _routingContract,\\n        bytes calldata _routingPayload\\n    ) external;\\n  \\n    /**\\n     * @notice Returns the withdraw enable period for all vaults. The safety\\n     * period starts when finished.\\n     * @return Withdraw enable period for all vaults\\n     */\\n    function getWithdrawPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw disable period - time for the committee to\\n     * gather and decide on actions, withdrawals are not possible in this\\n     * time. The withdraw period starts when finished.\\n     * @return Safety period for all vaults\\n     */\\n    function getSafetyPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request enable period for all vaults -\\n     * period of time after withdrawRequestPendingPeriod where it is possible\\n     * to withdraw, and after which withdrawals are not possible.\\n     * @return Withdraw request enable period for all vaults\\n     */\\n    function getWithdrawRequestEnablePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request pending period for all vaults -\\n     * period of time that has to pass after withdraw request until withdraw\\n     * is possible\\n     * @return Withdraw request pending period for all vaults\\n     */\\n    function getWithdrawRequestPendingPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the set max bounty delay for all vaults - period of\\n     * time that has to pass after setting a pending max bounty before it can\\n     * be set as the new max bounty\\n     * @return Set max bounty delay for all vaults\\n     */\\n    function getSetMaxBountyDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the number of vaults that have been previously created\\n     * @return The number of vaults in the registry\\n     */\\n    function getNumberOfVaults() external view returns(uint256);\\n\\n    /**\\n     * @notice Get the fee setter address\\n     * @return The address of the fee setter\\n     */\\n    function feeSetter() external view returns(address);\\n\\n    /**\\n     * @notice Get whether the system is in an emergency pause\\n     * @return Whether the system is in an emergency pause\\n     */\\n    function isEmergencyPaused() external view returns(bool);\\n\\n    /**\\n     * @notice Get the owner address\\n     * @return The address of the owner\\n     */\\n    function owner() external view returns(address);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to governance\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to governance\\n     */\\n    function defaultBountyGovernanceHAT() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     */\\n    function defaultBountyHackerHATVested() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default arbitrator address\\n     * @return The default arbitrator address\\n     */\\n    function defaultArbitrator() external view returns(address);\\n\\n    /**\\n     * @notice Get the default challenge period\\n     * @return The default challenge period\\n     */\\n    function defaultChallengePeriod() external view returns(uint32);\\n\\n    /**\\n     * @notice Get the default challenge time out period\\n     * @return The default challenge time out period\\n     */\\n    function defaultChallengeTimeOutPeriod() external view returns(uint32);\\n}\\n\",\"keccak256\":\"0x71f2cbbf2b35c973777713f5cf4680ecf9af466db56c1c4ca2bf08b97b55e882\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IRewardController {\\n    \\n    error EpochLengthZero();\\n    // Not enough rewards to transfer to user\\n    error NotEnoughRewardsToTransferToUser();\\n\\n    event RewardControllerCreated(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startBlock,\\n        uint256 _epochLength,\\n        uint256[24] _epochRewardPerBlock\\n    );\\n    event SetEpochRewardPerBlock(uint256[24] _epochRewardPerBlock);\\n    event SetAllocPoint(address indexed _vault, uint256 _prevAllocPoint, uint256 _allocPoint);\\n    event VaultUpdated(address indexed _vault, uint256 _rewardPerShare, uint256 _lastProcessedVaultUpdate);\\n    event UserBalanceCommitted(address indexed _vault, address indexed _user, uint256 _unclaimedReward, uint256 _rewardDebt);\\n    event ClaimReward(address indexed _vault, address indexed _user, uint256 _amount);\\n\\n    /**\\n     * @notice Initializes the reward controller\\n     * @param _rewardToken The address of the ERC20 token to be distributed as rewards\\n     * @param _governance The hats governance address, to be given ownership of the reward controller\\n     * @param _startRewardingBlock The block number from which to start rewarding\\n     * @param _epochLength The length of a rewarding epoch\\n     * @param _epochRewardPerBlock The reward per block for each of the 24 epochs\\n     */\\n    function initialize(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startRewardingBlock,\\n        uint256 _epochLength,\\n        uint256[24] calldata _epochRewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice Called by the owner to set the allocation points for a vault, meaning the\\n     * vault's relative share of the total rewards\\n     * @param _vault The address of the vault\\n     * @param _allocPoint The allocation points for the vault\\n     */\\n    function setAllocPoint(address _vault, uint256 _allocPoint) external;\\n\\n    /**\\n    * @notice Update the vault's reward per share, not more then once per block\\n    * @param _vault The vault's address\\n    */\\n    function updateVault(address _vault) external;\\n\\n    /**\\n    * @notice Called by the owner to set reward per epoch\\n    * Reward can only be set for epochs which have not yet started\\n    * @param _epochRewardPerBlock reward per block for each epoch\\n    */\\n    function setEpochRewardPerBlock(uint256[24] calldata _epochRewardPerBlock) external;\\n\\n    /**\\n    * @notice Called by the vault to update a user claimable reward after deposit or withdraw.\\n    * This call should never revert.\\n    * @param _user The user address to updare rewards for\\n    * @param _sharesChange The user of shared the user deposited or withdrew\\n    * @param _isDeposit Whether user deposited or withdrew\\n    */\\n    function commitUserBalance(address _user, uint256 _sharesChange, bool _isDeposit) external;\\n    /**\\n    * @notice Transfer to the specified user their pending share of rewards.\\n    * @param _vault The vault address\\n    * @param _user The user address to claim for\\n    */\\n    function claimReward(address _vault, address _user) external;\\n\\n    /**\\n    * @notice Calculate rewards for a vault by iterating over the history of totalAllocPoints updates,\\n    * and sum up all rewards periods from vault.lastRewardBlock until current block number.\\n    * @param _vault The vault address\\n    * @param _fromBlock The block from which to start calculation\\n    * @return reward The amount of rewards for the vault\\n    */\\n    function getVaultReward(address _vault, uint256 _fromBlock) external view returns(uint256 reward);\\n\\n    /**\\n    * @notice Calculate the amount of rewards a user can claim for having contributed to a specific vault\\n    * @param _vault The vault address\\n    * @param _user The user for which the reward is calculated\\n    */\\n    function getPendingReward(address _vault, address _user) external view returns (uint256);\\n\\n    /**\\n    * @notice Called by the owner to transfer any tokens held in this contract to the owner\\n    * @param _token The token to sweep\\n    * @param _amount The amount of token to sweep\\n    */\\n    function sweepToken(IERC20Upgradeable _token, uint256 _amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6eceb6516497db7ea79c8f571b03359ec1e53489222c9fffd60aa2f4496e0d23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x604060e08152346200034257620027b8803803806200001e8162000347565b92833981019060c081830312620003425780516001600160a01b03928382168203620003425760208381015190926001600160401b03918281116200034257850192601f9381858201121562000342578181876200007f93519101620003a8565b90888701519588871687036200034257606088015185811162000342578801938287860112156200034257620000bd8b9386848a98519101620003a8565b997f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d60a060808c01519b01519b60009586938454923360018060a01b0319851617865582519384923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08885a361138860c0528782526200014e81518092818b8601528a868601910162000383565b601f199c018c168101030190a260805282519485116200032e57600254956001968781811c9116801562000323575b838210146200030f57858111620002c6575b50819486116001146200025e5750509183949184939462000252575b50501b916000199060031b1c1916176002555b60a052600355600455516123c89081620003f08239608051818181610432015281816105c901528181610a1f01528181610a8501528181610b3901528181610ce001528181610d3c015281816111b1015281816115b4015261204c015260a05181818161023b01528181611232015281816112f501526114d8015260c0518181816107a301528181610f3c01526119030152f35b015192503880620001ab565b600283528183209493928692918316915b88838310620002ab575050501062000291575b505050811b01600255620001be565b015160001960f88460031b161c1916905538808062000282565b8587015188559096019594850194879350908101906200026f565b600284528284208680890160051c820192858a1062000305575b0160051c019088905b828110620002f95750506200018f565b858155018890620002e9565b92508192620002e0565b634e487b7160e01b84526022600452602484fd5b90607f16906200017d565b634e487b7160e01b82526041600452602482fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200036d57604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110620003975750506000910152565b818101518382015260200162000386565b919291906001600160401b0381116200036d57620003d0601f8201601f191660200162000347565b93818552818301116200034257620003ed91602085019062000383565b56fe6080604052600436101561001257600080fd5b6000803560e01c806305528715146119265780630c139eb4146118eb5780630c7ac7b6146118065780632edc218f1461147e578063311a6c5614611165578063325df18814611140578063362c3479146111055780634b2f0ea0146109d1578063564a565d146108e457806363022560146108c957806368c76ffd1461084d5780636cdc090f1461082f578063715018a6146107d157806379873f8a1461077d57806386f46a591461074e5780638a9bb02a146105f85780638c5aa9c1146105b35780638d8b2d7e146105965780638da5cb5b1461056f57806390765279146104e6578063965394ab146104c85780639b3ac998146104aa578063a6a7f0eb146103b0578063c21ae06114610386578063ec85635b14610364578063f2fde38b14610296578063fc6f8f161461026a578063fc83f43514610225578063fe2dddeb146101dc5763ffa1ad741461016757600080fd5b346101d957806003193601126101d957604051604081019080821067ffffffffffffffff8311176101c3576101bf9160405260058152640322e302e360dc1b60208201526040519182916020835260208301906119d7565b0390f35b634e487b7160e01b600052604160045260246000fd5b80fd5b50346101d9576101eb36611abd565b9060036101f784611a5b565b50015492845b84811061020a5785604051f35b8061021a85610220938686611d94565b50611b3f565b6101fd565b50346101d957806003193601126101d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101d95760203660031901126101d9576020600361028b600435611a5b565b500154604051908152f35b50346101d95760203660031901126101d9576001600160a01b036004358181169081900361035f576102c6611ae7565b801561030b57600080546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080fd5b50346101d957602061037e61037836611abd565b9161213d565b604051908152f35b50346101d95760203660031901126101d95760406020916004358152600783522054604051908152f35b50346101d95760403660031901126101d95760043560243567ffffffffffffffff81116104a6576103e5903690600401611a17565b919060ff60026103f484611a5b565b50015460081c16610461577fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c60405180610459339660018060a01b037f0000000000000000000000000000000000000000000000000000000000000000169583611b64565b0390a4604051f35b60405162461bcd60e51b815260206004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152606490fd5b8280fd5b50346101d957806003193601126101d9576020600354604051908152f35b50346101d957806003193601126101d9576020600454604051908152f35b50346101d95760203660031901126101d95760043567ffffffffffffffff811161056b576105397f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d913690600401611a17565b610544929192611ae7565b61054f600154611b3f565b928360015561056360405192839283611b64565b0390a2604051f35b5080fd5b50346101d957806003193601126101d957546040516001600160a01b039091168152602090f35b50346101d95760203660031901126101d957602060405160028152f35b50346101d957806003193601126101d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101d95761063661064261060d36611a45565b9290606060405161061d81611999565b369037606060405161062e81611999565b369037611a5b565b50916003809301611b8c565b5060058101549260068201916106578161234c565b90846040519101549060ff82161515815260ff602092818160081c1615158484015260101c161515604082015261068d81611999565b60405190818387549182815201908197875284872090875b81811061073a57505050826106bb9103836119b5565b604051978897610100926106d28a85810198611a95565b879060608b015b838310610720575050505060c088015260e087015251809252610120850193925b82811061070957505050500390f35b8351855286955093810193928101926001016106fa565b8151151581528c9b506001909201919087019087016106d9565b8254845292860192600192830192016106a5565b50346101d95760203660031901126101d95760ff60406020926004358152600684522054166040519015158152f35b50346101d957806003193601126101d957608060035460045460405191825260208201527f000000000000000000000000000000000000000000000000000000000000000060408201526127106060820152f35b50346101d957806003193601126101d9576107ea611ae7565b600080546001600160a01b03198116825560405191906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346101d957806003193601126101d9576020600154604051908152f35b50346101d95760603660031901126101d9576044356001600160a01b0381169081900361035f57600490606060405161088581611999565b3690376108a26108958335611a5b565b5060036024359101611b8c565b50906000520160205260606108ba604060002061234c565b6108c76040518092611a95565bf35b50346101d957806003193601126101d957602061037e611ffe565b50346101d95760203660031901126101d95760043560055481101561056b57600560005260021b807f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db27f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db18201549101549060ff821690604051938452602084015260038110156109bd576040830152600881901c60ff161515606083015260101c6001600160a01b0316608082015260a09150f35b634e487b7160e01b84526021600452602484fd5b506109db36611a45565b906109e581611a5b565b509060ff600283015460081c166110c057600283116110865760018201546040805163afe15cfb60e01b81526004810183905290816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561107b578690879261103d575b508042101580611034575b15610ff657604051631c3db16d60e01b8152600481018490526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610feb5787918991610fb6575b5003610f20575050600354905b60038401549384600019810111610f0c57610aed600019860160038301611b8c565b509460ff610afe8860038901611d5e565b90549060031b1c16610ec7576040519363791f8b7360e11b85528360048601526040602486015260208580610b3560448201611bc9565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa948515610ebc578995610e86575b50612710610b82610b899287611d2b565b0485611d77565b94610ba4610b978989611d84565b90549060031b1c87611c6d565b341015610e735734955b6040518981528760208201523390837fcae597f39a3ad75c2e10d46b031f023c5c2babcd58ca0491b122acda3968d4c06040600019880193a43360005260048801602052610c2c610c038a6040600020611d84565b610c138a83548360031b1c611d77565b9082549060031b600019811b9283911b16911916179055565b610c39610c038a8a611d84565b610c438989611d84565b90549060031b1c1015610d9b575b50506001600686015411610cbd575b505050916003610c80928460209660ff963411610c92575b505001611d5e565b90549060031b1c166040519015158152f35b8080610ca1610cb69434611c6d565b60405190335af1610cb0611c7a565b50611cba565b3880610c78565b90610ccb6003889301611ba8565b505060058501610cdc848254611c6d565b90557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561056b5760405192839163093225f160e31b83526004830152604060248301528180610d3860448201611bc9565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015610d9057610d78575b8080610c60565b610d828591611985565b610d8c5738610d71565b8380fd5b6040513d87823e3d90fd5b610da58888611d84565b90549060031b1c610dbb60058901918254611d77565b9055600687015491600160401b831015610e5f57600183018060068a0155831015610e495788809360068a01600052602060002001556001610e008460038b01611d5e565b819291549060031b60ff811b9283911b1691191617905560001901907f39493c1b78d9a13bcc9e1d532fc7faed3889248d93affa811416ce3c6bcb1a688a604051a43880610c51565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b8a52604160045260248afd5b610e80610b978989611d84565b95610bae565b9094506020813d602011610eb4575b81610ea2602093836119b5565b8101031261035f575193612710610b71565b3d9150610e95565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601b60248201527f41707065616c2066656520697320616c726561647920706169642e00000000006044820152606490fd5b634e487b7160e01b87526011600452602487fd5b610f61610f3a82610f346127109442611c6d565b94611c6d565b7f000000000000000000000000000000000000000000000000000000000000000090611d2b565b041115610f715760045490610acb565b60405162461bcd60e51b815260206004820152601f60248201527f41707065616c20706572696f64206973206f76657220666f72206c6f736572006044820152606490fd5b9150506020813d602011610fe3575b81610fd2602093836119b5565b8101031261035f5786905138610abe565b3d9150610fc5565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152601660248201527520b83832b0b6103832b934b7b21034b99037bb32b91760511b6044820152606490fd5b50814210610a64565b9150506040813d604011611073575b81611059604093836119b5565b8101031261106f57602081519101519038610a59565b8580fd5b3d915061104c565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152601260248201527153696465206f7574206f6620626f756e647360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f4469737075746520616c7265616479207265736f6c7665642e000000000000006044820152606490fd5b50346101d95760803660031901126101d9576024356001600160a01b038116810361035f5761037e6020916064359060443590600435611d94565b50346101d95760203660031901126101d95761115a611ae7565b600435600355604051f35b50346101d95761117436611a45565b81835260076020526111896040842054611a5b565b50600281019081549260ff8460081c166114465760028111611409576001600160a01b0390337f00000000000000000000000000000000000000000000000000000000000000008316036113c457936003830180549060001982019182116113b0576006916111f791611b8c565b50016001815414611397575b5060038510156113835761ffff191660ff851617610100178084559154869392909190600186036112ef5750807f000000000000000000000000000000000000000000000000000000000000000016925460101c1690823b15610d8c576040516304b1332f60e51b81526001600160a01b0392909216600483015260248201529082908290604490829084905af180156112e4576112d0575b50505b6040519081527f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e7562227660203392a3604051f35b6112d990611985565b6104a657823861129c565b6040513d84823e3d90fd5b939250807f00000000000000000000000000000000000000000000000000000000000000001690813b15610d8c5760405163658c652f60e01b815260109590951c166001600160a01b03166004850152602484019190915282908183816044810103925af1801561137857611365575b5061129f565b61137190939193611985565b913861135f565b6040513d86823e3d90fd5b634e487b7160e01b87526021600452602487fd5b6113a2919550611cfb565b90549060031b1c9338611203565b634e487b7160e01b89526011600452602489fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b210393ab634b7339037b83a34b7b760591b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b6044820152606490fd5b5060803660031901126101d9576004356024803567ffffffffffffffff8111610d8c576114af903690600401611a17565b6001600160a01b0392916044359190848316830361180257606435958587168097036117fe57857f00000000000000000000000000000000000000000000000000000000000000001633036117cb578088526020946006865260ff60408a2054166117885761151c611ffe565b9081341061174557828a526006875260408a20805460ff1916600117905560055497600160401b89101561173257908a9160018a0160055561155d8a611a5b565b5085815560028101805462010000600160b01b03191660109a909a1b62010000600160b01b03169990991790985561159760038901611ba8565b50506040805163c13517e160e01b815260026004820152928301527f000000000000000000000000000000000000000000000000000000000000000016978082806115e460448201611bc9565b0381878d5af19485156117275789948c8c9486986116c9575b50918593917f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d96604096948a60017fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c9f01558a82526007855285888320558234116116a4575b5050507f924044c7febe4b664a944b86c81b2d8535a49ffbce0f9fd14f409a59c61c1c6385519485a26001548352820152a361045960405192839283611b64565b8180916116b46116c19534611c6d565b8a51915af1610cb0611c7a565b38848f611663565b9450509391955093508482813d8311611720575b6116e781836119b5565b810103126101d957905193889391928a92908c7f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d6115fd565b503d6116dd565b6040513d85823e3d90fd5b50634e487b7160e01b8a52604160045289fd5b86601c6064926040519262461bcd60e51b845260048401528201527f53686f756c6420706179207468652066756c6c206465706f7369742e000000006044820152fd5b8560186064926040519262461bcd60e51b845260048401528201527f436c61696d20616c7265616479206368616c6c656e67656400000000000000006044820152fd5b60405162461bcd60e51b815260206004820152600c818701526b2bb937b7339031b0b63632b960a11b6044820152606490fd5b8780fd5b8680fd5b50346101d957806003193601126101d95760405190806002546118288161194b565b808552916001918083169081156118c15750600114611866575b6101bf85611852818703826119b5565b6040519182916020835260208301906119d7565b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106118a9575050508101602001611852826101bf611842565b8054602085870181019190915290930192810161188e565b8695506101bf9693506020925061185294915060ff191682840152151560051b8201019293611842565b50346101d957806003193601126101d95760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101d95760203660031901126101d957611940611ae7565b600435600455604051f35b90600182811c9216801561197b575b602083101461196557565b634e487b7160e01b600052602260045260246000fd5b91607f169161195a565b67ffffffffffffffff81116101c357604052565b6060810190811067ffffffffffffffff8211176101c357604052565b90601f8019910116810190811067ffffffffffffffff8211176101c357604052565b919082519283825260005b848110611a03575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016119e2565b9181601f8401121561035f5782359167ffffffffffffffff831161035f576020838186019501011161035f57565b604090600319011261035f576004359060243590565b600554811015610e4957600560005260021b7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b6000915b60038310611aa657505050565b600190825181526020809101920192019190611a99565b606090600319011261035f57600435906024356001600160a01b038116810361035f579060443590565b6000546001600160a01b03163303611afb57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000198114611b4e5760010190565b634e487b7160e01b600052601160045260246000fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b8054821015610e49576000526007602060002091020190600090565b8054600160401b8110156101c357611bc591600182018155611b8c565b9091565b60025460009291611bd98261194b565b80825291600190818116908115611c505750600114611bf757505050565b9192935060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace916000925b848410611c3857505060209250010190565b80546020858501810191909152909301928101611c26565b915050602093945060ff929192191683830152151560051b010190565b91908203918211611b4e57565b3d15611cb5573d9067ffffffffffffffff82116101c35760405191611ca9601f8201601f1916602001846119b5565b82523d6000602084013e565b606090565b15611cc157565b60405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b6044820152606490fd5b805415610e4957600052602060002090600090565b805460011015610e4957600052600160206000200190600090565b8060001904821181151516611b4e570290565b8115611d48570490565b634e487b7160e01b600052601260045260246000fd5b9190916003831015610e4957601f908360051c01921690565b91908201809211611b4e57565b6003821015610e49570190600090565b9392919093600080611da583611a5b565b50946003916002611db887858a01611b8c565b5097015460ff8160081c1615611fc25760ff1683811015611fae5783880160ff611de28583611d5e565b905490871b1c16611ea7575050506001600160a01b03881683526004860160205260408320611e12908290611d84565b905490831b1c975b88611e29575b50505050505050565b7f54b3cab3cb5c4aca3209db1151caff092e878011202e43a36782d4ebe0b963ae936040936004611e8f9360018060a01b0316998a845201602052611e7084868420611d84565b9091825491600019911b1b19169055808085518c8b5af1610cb0611c7a565b8151908152876020820152a438808080808080611e20565b611eb38260ff92611d5e565b905490861b1c16611f4a57505060018060a01b038816835260048601602052611f44611ef5611ee58360408720611d84565b905460058a015491861b1c611d2b565b611f3e60068901611f32611f26611f1a611f0e84611cfb565b9054908a1b1c8d611d84565b905490891b1c92611d10565b905490881b1c8b611d84565b905490871b1c90611d77565b90611d3e565b97611e1a565b829099919903611e1a579750611f608187611d84565b905490831b1c8015611fa757611f449060018060a01b038a16855260048801602052611fa2611f928460408820611d84565b905460058b015491871b1c611d2b565b611d3e565b5082611f44565b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b8152602060048201526014602482015273111a5cdc1d5d19481b9bdd081c995cdbdb1d995960621b6044820152606490fd5b60405163f7434ea960e01b81526020806004830152808260006002546120238161194b565b9081602485015260019084828216918260001461211d5750506001146120c3575b5050819003817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156120b75760009161208b575b50905090565b82813d83116120b0575b61209f81836119b5565b810103126101d95750518038612085565b503d612095565b6040513d6000823e3d90fd5b6002600090815292507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106121045750505081016044018138612044565b80546044858a01015286958895509093019281016120ee565b91509350604492915060ff191682840152151560051b8201019038612044565b60009392849161214c90611a5b565b509060028201549260ff93848160081c1615612343578416946003938487101561232f5784018054929692959493928792915b87891061219157505050505050505050565b9091929394959697996121a48b83611b8c565b508884898301826121b58b83611d5e565b9054908d1b1c1661220b575050506001600160a01b0385168652600401602052604085206121fe916121f8916121ec908990611d84565b9054908a1b1c90611d77565b9a611b3f565b979695949392919061217f565b9061221591611d5e565b9054908a1b1c166122af576121fe916122a96121f892611f3e6122618c6122518d60408e8e60018060a01b031681526004880160205220611d84565b9054911b1c600584015490611d2b565b918c61229e600683019261229261228661227a86611cfb565b905490861b1c83611d84565b905490851b1c94611d10565b905490841b1c90611d84565b9054911b1c90611d77565b90611d77565b86849c929c146122c4575b506121fe90611b3f565b6121fe919b8682896122d98161231d96611d84565b9054908d1b1c91898d84156123245761230f611fa29460406122a99860059560018060a01b031681526004870160205220611d84565b9054911b1c91015490611d2b565b9a906122ba565b505050505090611d77565b634e487b7160e01b83526021600452602483fd5b50955050505050565b60405191906000835b6003821061237c575050506060820182811067ffffffffffffffff8211176101c357604052565b600160208192855481520193019101909161235556fea26469706673582212200ca6757d5ec84d02cff334b6c89702f8aaf8b4f44a0ba6bec2c7c3a6ad8b0aa864736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806305528715146119265780630c139eb4146118eb5780630c7ac7b6146118065780632edc218f1461147e578063311a6c5614611165578063325df18814611140578063362c3479146111055780634b2f0ea0146109d1578063564a565d146108e457806363022560146108c957806368c76ffd1461084d5780636cdc090f1461082f578063715018a6146107d157806379873f8a1461077d57806386f46a591461074e5780638a9bb02a146105f85780638c5aa9c1146105b35780638d8b2d7e146105965780638da5cb5b1461056f57806390765279146104e6578063965394ab146104c85780639b3ac998146104aa578063a6a7f0eb146103b0578063c21ae06114610386578063ec85635b14610364578063f2fde38b14610296578063fc6f8f161461026a578063fc83f43514610225578063fe2dddeb146101dc5763ffa1ad741461016757600080fd5b346101d957806003193601126101d957604051604081019080821067ffffffffffffffff8311176101c3576101bf9160405260058152640322e302e360dc1b60208201526040519182916020835260208301906119d7565b0390f35b634e487b7160e01b600052604160045260246000fd5b80fd5b50346101d9576101eb36611abd565b9060036101f784611a5b565b50015492845b84811061020a5785604051f35b8061021a85610220938686611d94565b50611b3f565b6101fd565b50346101d957806003193601126101d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101d95760203660031901126101d9576020600361028b600435611a5b565b500154604051908152f35b50346101d95760203660031901126101d9576001600160a01b036004358181169081900361035f576102c6611ae7565b801561030b57600080546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080fd5b50346101d957602061037e61037836611abd565b9161213d565b604051908152f35b50346101d95760203660031901126101d95760406020916004358152600783522054604051908152f35b50346101d95760403660031901126101d95760043560243567ffffffffffffffff81116104a6576103e5903690600401611a17565b919060ff60026103f484611a5b565b50015460081c16610461577fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c60405180610459339660018060a01b037f0000000000000000000000000000000000000000000000000000000000000000169583611b64565b0390a4604051f35b60405162461bcd60e51b815260206004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152606490fd5b8280fd5b50346101d957806003193601126101d9576020600354604051908152f35b50346101d957806003193601126101d9576020600454604051908152f35b50346101d95760203660031901126101d95760043567ffffffffffffffff811161056b576105397f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d913690600401611a17565b610544929192611ae7565b61054f600154611b3f565b928360015561056360405192839283611b64565b0390a2604051f35b5080fd5b50346101d957806003193601126101d957546040516001600160a01b039091168152602090f35b50346101d95760203660031901126101d957602060405160028152f35b50346101d957806003193601126101d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101d95761063661064261060d36611a45565b9290606060405161061d81611999565b369037606060405161062e81611999565b369037611a5b565b50916003809301611b8c565b5060058101549260068201916106578161234c565b90846040519101549060ff82161515815260ff602092818160081c1615158484015260101c161515604082015261068d81611999565b60405190818387549182815201908197875284872090875b81811061073a57505050826106bb9103836119b5565b604051978897610100926106d28a85810198611a95565b879060608b015b838310610720575050505060c088015260e087015251809252610120850193925b82811061070957505050500390f35b8351855286955093810193928101926001016106fa565b8151151581528c9b506001909201919087019087016106d9565b8254845292860192600192830192016106a5565b50346101d95760203660031901126101d95760ff60406020926004358152600684522054166040519015158152f35b50346101d957806003193601126101d957608060035460045460405191825260208201527f000000000000000000000000000000000000000000000000000000000000000060408201526127106060820152f35b50346101d957806003193601126101d9576107ea611ae7565b600080546001600160a01b03198116825560405191906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346101d957806003193601126101d9576020600154604051908152f35b50346101d95760603660031901126101d9576044356001600160a01b0381169081900361035f57600490606060405161088581611999565b3690376108a26108958335611a5b565b5060036024359101611b8c565b50906000520160205260606108ba604060002061234c565b6108c76040518092611a95565bf35b50346101d957806003193601126101d957602061037e611ffe565b50346101d95760203660031901126101d95760043560055481101561056b57600560005260021b807f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db27f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db18201549101549060ff821690604051938452602084015260038110156109bd576040830152600881901c60ff161515606083015260101c6001600160a01b0316608082015260a09150f35b634e487b7160e01b84526021600452602484fd5b506109db36611a45565b906109e581611a5b565b509060ff600283015460081c166110c057600283116110865760018201546040805163afe15cfb60e01b81526004810183905290816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561107b578690879261103d575b508042101580611034575b15610ff657604051631c3db16d60e01b8152600481018490526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610feb5787918991610fb6575b5003610f20575050600354905b60038401549384600019810111610f0c57610aed600019860160038301611b8c565b509460ff610afe8860038901611d5e565b90549060031b1c16610ec7576040519363791f8b7360e11b85528360048601526040602486015260208580610b3560448201611bc9565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa948515610ebc578995610e86575b50612710610b82610b899287611d2b565b0485611d77565b94610ba4610b978989611d84565b90549060031b1c87611c6d565b341015610e735734955b6040518981528760208201523390837fcae597f39a3ad75c2e10d46b031f023c5c2babcd58ca0491b122acda3968d4c06040600019880193a43360005260048801602052610c2c610c038a6040600020611d84565b610c138a83548360031b1c611d77565b9082549060031b600019811b9283911b16911916179055565b610c39610c038a8a611d84565b610c438989611d84565b90549060031b1c1015610d9b575b50506001600686015411610cbd575b505050916003610c80928460209660ff963411610c92575b505001611d5e565b90549060031b1c166040519015158152f35b8080610ca1610cb69434611c6d565b60405190335af1610cb0611c7a565b50611cba565b3880610c78565b90610ccb6003889301611ba8565b505060058501610cdc848254611c6d565b90557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561056b5760405192839163093225f160e31b83526004830152604060248301528180610d3860448201611bc9565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015610d9057610d78575b8080610c60565b610d828591611985565b610d8c5738610d71565b8380fd5b6040513d87823e3d90fd5b610da58888611d84565b90549060031b1c610dbb60058901918254611d77565b9055600687015491600160401b831015610e5f57600183018060068a0155831015610e495788809360068a01600052602060002001556001610e008460038b01611d5e565b819291549060031b60ff811b9283911b1691191617905560001901907f39493c1b78d9a13bcc9e1d532fc7faed3889248d93affa811416ce3c6bcb1a688a604051a43880610c51565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b8a52604160045260248afd5b610e80610b978989611d84565b95610bae565b9094506020813d602011610eb4575b81610ea2602093836119b5565b8101031261035f575193612710610b71565b3d9150610e95565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601b60248201527f41707065616c2066656520697320616c726561647920706169642e00000000006044820152606490fd5b634e487b7160e01b87526011600452602487fd5b610f61610f3a82610f346127109442611c6d565b94611c6d565b7f000000000000000000000000000000000000000000000000000000000000000090611d2b565b041115610f715760045490610acb565b60405162461bcd60e51b815260206004820152601f60248201527f41707065616c20706572696f64206973206f76657220666f72206c6f736572006044820152606490fd5b9150506020813d602011610fe3575b81610fd2602093836119b5565b8101031261035f5786905138610abe565b3d9150610fc5565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152601660248201527520b83832b0b6103832b934b7b21034b99037bb32b91760511b6044820152606490fd5b50814210610a64565b9150506040813d604011611073575b81611059604093836119b5565b8101031261106f57602081519101519038610a59565b8580fd5b3d915061104c565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152601260248201527153696465206f7574206f6620626f756e647360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f4469737075746520616c7265616479207265736f6c7665642e000000000000006044820152606490fd5b50346101d95760803660031901126101d9576024356001600160a01b038116810361035f5761037e6020916064359060443590600435611d94565b50346101d95760203660031901126101d95761115a611ae7565b600435600355604051f35b50346101d95761117436611a45565b81835260076020526111896040842054611a5b565b50600281019081549260ff8460081c166114465760028111611409576001600160a01b0390337f00000000000000000000000000000000000000000000000000000000000000008316036113c457936003830180549060001982019182116113b0576006916111f791611b8c565b50016001815414611397575b5060038510156113835761ffff191660ff851617610100178084559154869392909190600186036112ef5750807f000000000000000000000000000000000000000000000000000000000000000016925460101c1690823b15610d8c576040516304b1332f60e51b81526001600160a01b0392909216600483015260248201529082908290604490829084905af180156112e4576112d0575b50505b6040519081527f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e7562227660203392a3604051f35b6112d990611985565b6104a657823861129c565b6040513d84823e3d90fd5b939250807f00000000000000000000000000000000000000000000000000000000000000001690813b15610d8c5760405163658c652f60e01b815260109590951c166001600160a01b03166004850152602484019190915282908183816044810103925af1801561137857611365575b5061129f565b61137190939193611985565b913861135f565b6040513d86823e3d90fd5b634e487b7160e01b87526021600452602487fd5b6113a2919550611cfb565b90549060031b1c9338611203565b634e487b7160e01b89526011600452602489fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b210393ab634b7339037b83a34b7b760591b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b6044820152606490fd5b5060803660031901126101d9576004356024803567ffffffffffffffff8111610d8c576114af903690600401611a17565b6001600160a01b0392916044359190848316830361180257606435958587168097036117fe57857f00000000000000000000000000000000000000000000000000000000000000001633036117cb578088526020946006865260ff60408a2054166117885761151c611ffe565b9081341061174557828a526006875260408a20805460ff1916600117905560055497600160401b89101561173257908a9160018a0160055561155d8a611a5b565b5085815560028101805462010000600160b01b03191660109a909a1b62010000600160b01b03169990991790985561159760038901611ba8565b50506040805163c13517e160e01b815260026004820152928301527f000000000000000000000000000000000000000000000000000000000000000016978082806115e460448201611bc9565b0381878d5af19485156117275789948c8c9486986116c9575b50918593917f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d96604096948a60017fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c9f01558a82526007855285888320558234116116a4575b5050507f924044c7febe4b664a944b86c81b2d8535a49ffbce0f9fd14f409a59c61c1c6385519485a26001548352820152a361045960405192839283611b64565b8180916116b46116c19534611c6d565b8a51915af1610cb0611c7a565b38848f611663565b9450509391955093508482813d8311611720575b6116e781836119b5565b810103126101d957905193889391928a92908c7f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d6115fd565b503d6116dd565b6040513d85823e3d90fd5b50634e487b7160e01b8a52604160045289fd5b86601c6064926040519262461bcd60e51b845260048401528201527f53686f756c6420706179207468652066756c6c206465706f7369742e000000006044820152fd5b8560186064926040519262461bcd60e51b845260048401528201527f436c61696d20616c7265616479206368616c6c656e67656400000000000000006044820152fd5b60405162461bcd60e51b815260206004820152600c818701526b2bb937b7339031b0b63632b960a11b6044820152606490fd5b8780fd5b8680fd5b50346101d957806003193601126101d95760405190806002546118288161194b565b808552916001918083169081156118c15750600114611866575b6101bf85611852818703826119b5565b6040519182916020835260208301906119d7565b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106118a9575050508101602001611852826101bf611842565b8054602085870181019190915290930192810161188e565b8695506101bf9693506020925061185294915060ff191682840152151560051b8201019293611842565b50346101d957806003193601126101d95760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101d95760203660031901126101d957611940611ae7565b600435600455604051f35b90600182811c9216801561197b575b602083101461196557565b634e487b7160e01b600052602260045260246000fd5b91607f169161195a565b67ffffffffffffffff81116101c357604052565b6060810190811067ffffffffffffffff8211176101c357604052565b90601f8019910116810190811067ffffffffffffffff8211176101c357604052565b919082519283825260005b848110611a03575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016119e2565b9181601f8401121561035f5782359167ffffffffffffffff831161035f576020838186019501011161035f57565b604090600319011261035f576004359060243590565b600554811015610e4957600560005260021b7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b6000915b60038310611aa657505050565b600190825181526020809101920192019190611a99565b606090600319011261035f57600435906024356001600160a01b038116810361035f579060443590565b6000546001600160a01b03163303611afb57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000198114611b4e5760010190565b634e487b7160e01b600052601160045260246000fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b8054821015610e49576000526007602060002091020190600090565b8054600160401b8110156101c357611bc591600182018155611b8c565b9091565b60025460009291611bd98261194b565b80825291600190818116908115611c505750600114611bf757505050565b9192935060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace916000925b848410611c3857505060209250010190565b80546020858501810191909152909301928101611c26565b915050602093945060ff929192191683830152151560051b010190565b91908203918211611b4e57565b3d15611cb5573d9067ffffffffffffffff82116101c35760405191611ca9601f8201601f1916602001846119b5565b82523d6000602084013e565b606090565b15611cc157565b60405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b6044820152606490fd5b805415610e4957600052602060002090600090565b805460011015610e4957600052600160206000200190600090565b8060001904821181151516611b4e570290565b8115611d48570490565b634e487b7160e01b600052601260045260246000fd5b9190916003831015610e4957601f908360051c01921690565b91908201809211611b4e57565b6003821015610e49570190600090565b9392919093600080611da583611a5b565b50946003916002611db887858a01611b8c565b5097015460ff8160081c1615611fc25760ff1683811015611fae5783880160ff611de28583611d5e565b905490871b1c16611ea7575050506001600160a01b03881683526004860160205260408320611e12908290611d84565b905490831b1c975b88611e29575b50505050505050565b7f54b3cab3cb5c4aca3209db1151caff092e878011202e43a36782d4ebe0b963ae936040936004611e8f9360018060a01b0316998a845201602052611e7084868420611d84565b9091825491600019911b1b19169055808085518c8b5af1610cb0611c7a565b8151908152876020820152a438808080808080611e20565b611eb38260ff92611d5e565b905490861b1c16611f4a57505060018060a01b038816835260048601602052611f44611ef5611ee58360408720611d84565b905460058a015491861b1c611d2b565b611f3e60068901611f32611f26611f1a611f0e84611cfb565b9054908a1b1c8d611d84565b905490891b1c92611d10565b905490881b1c8b611d84565b905490871b1c90611d77565b90611d3e565b97611e1a565b829099919903611e1a579750611f608187611d84565b905490831b1c8015611fa757611f449060018060a01b038a16855260048801602052611fa2611f928460408820611d84565b905460058b015491871b1c611d2b565b611d3e565b5082611f44565b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b8152602060048201526014602482015273111a5cdc1d5d19481b9bdd081c995cdbdb1d995960621b6044820152606490fd5b60405163f7434ea960e01b81526020806004830152808260006002546120238161194b565b9081602485015260019084828216918260001461211d5750506001146120c3575b5050819003817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156120b75760009161208b575b50905090565b82813d83116120b0575b61209f81836119b5565b810103126101d95750518038612085565b503d612095565b6040513d6000823e3d90fd5b6002600090815292507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106121045750505081016044018138612044565b80546044858a01015286958895509093019281016120ee565b91509350604492915060ff191682840152151560051b8201019038612044565b60009392849161214c90611a5b565b509060028201549260ff93848160081c1615612343578416946003938487101561232f5784018054929692959493928792915b87891061219157505050505050505050565b9091929394959697996121a48b83611b8c565b508884898301826121b58b83611d5e565b9054908d1b1c1661220b575050506001600160a01b0385168652600401602052604085206121fe916121f8916121ec908990611d84565b9054908a1b1c90611d77565b9a611b3f565b979695949392919061217f565b9061221591611d5e565b9054908a1b1c166122af576121fe916122a96121f892611f3e6122618c6122518d60408e8e60018060a01b031681526004880160205220611d84565b9054911b1c600584015490611d2b565b918c61229e600683019261229261228661227a86611cfb565b905490861b1c83611d84565b905490851b1c94611d10565b905490841b1c90611d84565b9054911b1c90611d77565b90611d77565b86849c929c146122c4575b506121fe90611b3f565b6121fe919b8682896122d98161231d96611d84565b9054908d1b1c91898d84156123245761230f611fa29460406122a99860059560018060a01b031681526004870160205220611d84565b9054911b1c91015490611d2b565b9a906122ba565b505050505090611d77565b634e487b7160e01b83526021600452602483fd5b50955050505050565b60405191906000835b6003821061237c575050506060820182811067ffffffffffffffff8211176101c357604052565b600160208192855481520193019101909161235556fea26469706673582212200ca6757d5ec84d02cff334b6c89702f8aaf8b4f44a0ba6bec2c7c3a6ad8b0aa864736f6c63430008100033",
  "devdoc": {
    "details": "This contract acts a connector between HatsFinance and Kleros court.  This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.  The arbitrator must support appeal period.  The contract also trusts that IHATArbitrator contract is honest and won't reenter.",
    "events": {
      "Challenged(bytes32)": {
        "details": "Raised when a claim is challenged.",
        "params": {
          "_claimId": "Id of the claim in Vault cotract."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "changeLoserMultiplier(uint256)": {
        "details": "Changes loserMultiplier variable.",
        "params": {
          "_loserMultiplier": "The new winnerMultiplier value."
        }
      },
      "changeMetaEvidence(string)": {
        "details": "Update the meta evidence used for disputes.",
        "params": {
          "_metaEvidence": "URI of the new meta evidence."
        }
      },
      "changeWinnerMultiplier(uint256)": {
        "details": "Changes winnerMultiplier variable.",
        "params": {
          "_winnerMultiplier": "The new winnerMultiplier value."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitratorExtraData": "Extra data for the arbitrator.",
          "_hatArbitrator": "Address of the Hat arbitrator.",
          "_klerosArbitrator": "The Kleros arbitrator of the contract.",
          "_loserMultiplier": "Multiplier for calculation the appeal cost of the losing side.",
          "_metaEvidence": "Metaevidence for the dispute.",
          "_winnerMultiplier": "Multiplier for calculating the appeal cost of the winning side."
        }
      },
      "fundAppeal(uint256,uint256)": {
        "details": "Takes up to the total amount required to fund a side. Reimburses the rest. Creates an appeal if both sides are fully funded.",
        "params": {
          "_localDisputeId": "The ID of the local dispute.",
          "_side": "The option to fund. 0 - refuse to rule, 1 - make no changes, 2 - side with challenger."
        },
        "returns": {
          "_0": "fullyFunded Whether the side was fully funded or not."
        }
      },
      "getArbitrationCost()": {
        "details": "Get the arbitration cost to challenge a claim.",
        "returns": {
          "_0": "Arbitration cost."
        }
      },
      "getContributions(uint256,uint256,address)": {
        "details": "Gets the contributions made by a party for a given round of a dispute.",
        "params": {
          "_contributor": "The address of the contributor.",
          "_localDisputeId": "The ID of the dispute.",
          "_round": "The round to query."
        },
        "returns": {
          "contributions": "The contributions."
        }
      },
      "getMultipliers()": {
        "details": "Returns stake multipliers.",
        "returns": {
          "divisor": "Multiplier divisor.",
          "loser": "Losers stake multiplier.",
          "loserAppealPeriod": "Multiplier for calculating an appeal period duration for the losing side.",
          "winner": "Winners stake multiplier."
        }
      },
      "getNumberOfRounds(uint256)": {
        "details": "Gets the number of rounds of the specific dispute.",
        "params": {
          "_localDisputeId": "The ID of the dispute."
        },
        "returns": {
          "_0": "The number of rounds."
        }
      },
      "getRoundInfo(uint256,uint256)": {
        "details": "Gets the information of a round of a dispute.",
        "params": {
          "_localDisputeId": "The ID of the dispute.",
          "_round": "The round to query."
        },
        "returns": {
          "feeRewards": "The amount of fees that will be used as rewards.",
          "fundedSides": "Fully funded sides.",
          "hasPaid": "True if the side is fully funded",
          "paidFees": "The amount of fees paid for each side."
        }
      },
      "getTotalWithdrawableAmount(uint256,address,uint256)": {
        "details": "Returns the sum of withdrawable amount.This function is O(n) where n is the total number of rounds.This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.",
        "params": {
          "_beneficiary": "The contributor for which to query.",
          "_contributedTo": "Side that received contributions from contributor.",
          "_localDisputeId": "The ID of the dispute."
        },
        "returns": {
          "sum": "The total amount available to withdraw."
        }
      },
      "notifyArbitrator(bytes32,string,address,address)": {
        "details": "Notify KlerosArbitrator that expert's committee decision was challenged. Can only be called by Hat arbitrator.  Requires the arbitration fees to be paid.",
        "params": {
          "_claimId": "The Id of the active claim in Vault contract.",
          "_disputer": "Address that made the challenge.  Note that the validity of the claim should be checked by Hat arbitrator.",
          "_evidence": "URI of the evidence to support the challenge.",
          "_vault": "Relevant vault address."
        }
      },
      "numberOfRulingOptions(uint256)": {
        "details": "Returns number of possible ruling options. Valid rulings are [0, return value].",
        "returns": {
          "_0": "count The number of ruling options."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rule(uint256,uint256)": {
        "details": "Give a ruling for a dispute. Can only be called by the Kleros arbitrator.",
        "params": {
          "_disputeId": "ID of the dispute in the Kleros arbitrator contract.",
          "_ruling": "Ruling given by the arbitrator. Note that 0 is reserved for \"Refused to arbitrate\"."
        }
      },
      "submitEvidence(uint256,string)": {
        "details": "Submit a reference to evidence. EVENT.",
        "params": {
          "_evidenceURI": "Link to evidence.",
          "_localDisputeId": "The id of the related dispute."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFeesAndRewards(uint256,address,uint256,uint256)": {
        "details": "Sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute. Reimburses contributions if there is no winner.",
        "params": {
          "_beneficiary": "The address to send reward to.",
          "_localDisputeId": "The ID of the related dispute.",
          "_round": "The round from which to withdraw.",
          "_side": "The ruling to query the reward from."
        },
        "returns": {
          "reward": "The withdrawn amount."
        }
      },
      "withdrawFeesAndRewardsForAllRounds(uint256,address,uint256)": {
        "details": "Allows to withdraw any rewards or reimbursable fees for all rounds at once.This function is O(n) where n is the total number of rounds. Arbitration cost of subsequent rounds is `A(n) = 2A(n-1) + 1`.  Thus because of this exponential growth of costs, you can assume n is less than 10 at all times.",
        "params": {
          "_beneficiary": "The address that made contributions.",
          "_contributedTo": "Side that received contributions from contributor.",
          "_localDisputeId": "The ID of the related dispute."
        }
      }
    },
    "stateVariables": {
      "externalIDtoLocalID": {
        "details": "Maps external (arbitrator side) dispute id to local (arbitrable) dispute id.",
        "params": {
          "_externalDisputeID": "Dispute id as in arbitrator contract."
        },
        "return": "Dispute id as in arbitrable contract.",
        "returns": {
          "_0": "Dispute id as in arbitrable contract."
        }
      }
    },
    "title": "HATKlerosConnector",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5155,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17079,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "metaEvidenceUpdates",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17081,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "arbitratorExtraData",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 17083,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "winnerMultiplier",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 17085,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "loserMultiplier",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17092,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "disputes",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(DisputeStruct)17051_storage)dyn_storage"
      },
      {
        "astId": 17096,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "claimChallenged",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 17101,
        "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
        "label": "externalIDtoLocalID",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)3_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(DisputeStruct)17051_storage)dyn_storage": {
        "base": "t_struct(DisputeStruct)17051_storage",
        "encoding": "dynamic_array",
        "label": "struct HATKlerosConnector.DisputeStruct[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Round)17071_storage)dyn_storage": {
        "base": "t_struct(Round)17071_storage",
        "encoding": "dynamic_array",
        "label": "struct HATKlerosConnector.Round[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IHATClaimsManager)23648": {
        "encoding": "inplace",
        "label": "contract IHATClaimsManager",
        "numberOfBytes": "20"
      },
      "t_enum(Decision)23655": {
        "encoding": "inplace",
        "label": "enum IHATKlerosConnector.Decision",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DisputeStruct)17051_storage": {
        "encoding": "inplace",
        "label": "struct HATKlerosConnector.DisputeStruct",
        "members": [
          {
            "astId": 17036,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "claimId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 17038,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "externalDisputeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17041,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "ruling",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Decision)23655"
          },
          {
            "astId": 17043,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "resolved",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 17046,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "vault",
            "offset": 2,
            "slot": "2",
            "type": "t_contract(IHATClaimsManager)23648"
          },
          {
            "astId": 17050,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "rounds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(Round)17071_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Round)17071_storage": {
        "encoding": "inplace",
        "label": "struct HATKlerosConnector.Round",
        "members": [
          {
            "astId": 17055,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "paidFees",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 17059,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "hasPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bool)3_storage"
          },
          {
            "astId": 17065,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "contributions",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_array(t_uint256)3_storage)"
          },
          {
            "astId": 17067,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "feeRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 17070,
            "contract": "contracts/HATKlerosConnector.sol:HATKlerosConnector",
            "label": "fundedSides",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}