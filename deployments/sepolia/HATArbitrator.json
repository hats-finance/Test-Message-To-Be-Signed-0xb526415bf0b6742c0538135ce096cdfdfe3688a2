{
  "address": "0x11a7d0501895059177e8436fe89bb1e3bdebf8d8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_expertCommittee",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bondsNeededToStartDispute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBondAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_resolutionChallengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_submitClaimRequestReviewPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyChallenged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BondAmountSubmittedTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanOnlyBeCalledByCourt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannontChangeCourtAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotClaimBond",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotDismissUnchallengedResolution",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSubmitMoreEvidence",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengePeriodDidNotPass",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengePeriodPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimDisputesDismissed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimIsNotCurrentlyActiveClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimIsNotDisputed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimReviewPeriodDidNotEnd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimReviewPeriodEnd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CourtCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoResolution",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyExpertCommittee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bondsNeededToStartDisputeMustBeHigherThanMinAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_disputer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "BondRefundClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_disputer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "ClaimDisputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_court",
          "type": "address"
        }
      ],
      "name": "CourtSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_bountyPercentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "DisputeAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "DisputeDismissed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_disputers",
          "type": "address[]"
        }
      ],
      "name": "DisputersConfiscated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_disputers",
          "type": "address[]"
        }
      ],
      "name": "DisputersRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "ResolutionChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "ResolutionDismissed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "ResolutionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_internalClaimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "SubmitClaimRequestApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_internalClaimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_submitter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "SubmitClaimRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_internalClaimId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "SubmitClaimRequestDismissed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_internalClaimId",
          "type": "bytes32"
        }
      ],
      "name": "SubmitClaimRequestExpired",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_bountyPercentage",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_disputersToRefund",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_disputersToConfiscate",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "acceptDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_internalClaimId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_bountyPercentage",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "approveSubmitClaimRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IHATClaimsManager",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bondClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondsNeededToStartDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "challengeResolution",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimDisputesDismissed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_disputersToConfiscate",
          "type": "address[]"
        }
      ],
      "name": "confiscateDisputers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "court",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "dismissDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "dismissResolution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_internalClaimId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "dismissSubmitClaimRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bondAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "dispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IHATClaimsManager",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "disputersBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "executeResolution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expertCommittee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "reclaimBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_disputersToRefund",
          "type": "address[]"
        }
      ],
      "name": "refundDisputers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_internalClaimId",
          "type": "bytes32"
        }
      ],
      "name": "refundExpiredSubmitClaimRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolutionChallengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "resolutionChallengedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "resolutions",
      "outputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bountyPercentage",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "resolvedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_court",
          "type": "address"
        }
      ],
      "name": "setCourt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "submitClaimRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submitClaimRequestReviewPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "submitClaimRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "submittedAt",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "descriptionHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHATClaimsManager",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "totalBondsOnClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f57fb42007657ee09b5372579eb881ce5c3289addb8433b968a062ec0b7152b",
  "receipt": {
    "to": null,
    "from": "0x1885b7c7a3ae1f35ba71c0392c13153a95c4914f",
    "contractAddress": "0x11a7d0501895059177e8436fe89bb1e3bdebf8d8",
    "transactionIndex": "0x30",
    "gasUsed": "0x25b1fd",
    "logsBloom": "0x
    "blockHash": "0x6dfb7ae9db56295d0450886c21589f3376a94aec39d4516a578a49372367c46a",
    "transactionHash": "0x2f57fb42007657ee09b5372579eb881ce5c3289addb8433b968a062ec0b7152b",
    "logs": [
      {
        "address": "0x11a7d0501895059177e8436fe89bb1e3bdebf8d8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "blockNumber": "0x569ac1",
        "transactionHash": "0x2f57fb42007657ee09b5372579eb881ce5c3289addb8433b968a062ec0b7152b",
        "transactionIndex": "0x30",
        "blockHash": "0x6dfb7ae9db56295d0450886c21589f3376a94aec39d4516a578a49372367c46a",
        "logIndex": "0x3e",
        "removed": false
      }
    ],
    "blockNumber": "0x569ac1",
    "cumulativeGasUsed": "0x6c1933",
    "status": "0x1"
  },
  "args": [
    "0xFA6579F3Bb1793eFaB541de06763b872E11bfCBe",
    "0xbdb34BB8665510d331FacAAaA0eeAe994a5B6612",
    "10000000000000000000",
    "1000000000000000000",
    604800,
    900
  ],
  "numDeployments": 1,
  "solcInputHash": "579124222395e9458f06f5a2ed1ea107",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expertCommittee\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bondsNeededToStartDispute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resolutionChallengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submitClaimRequestReviewPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyChallenged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BondAmountSubmittedTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanOnlyBeCalledByCourt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannontChangeCourtAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimBond\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotDismissUnchallengedResolution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSubmitMoreEvidence\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengePeriodDidNotPass\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengePeriodPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimDisputesDismissed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimIsNotCurrentlyActiveClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimIsNotDisputed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimReviewPeriodDidNotEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimReviewPeriodEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CourtCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoResolution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyExpertCommittee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bondsNeededToStartDisputeMustBeHigherThanMinAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountClaimed\",\"type\":\"uint256\"}],\"name\":\"BondRefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"ClaimDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_court\",\"type\":\"address\"}],\"name\":\"CourtSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_bountyPercentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"DisputeAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"DisputeDismissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_disputers\",\"type\":\"address[]\"}],\"name\":\"DisputersConfiscated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_disputers\",\"type\":\"address[]\"}],\"name\":\"DisputersRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"ResolutionChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"ResolutionDismissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"ResolutionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_internalClaimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"SubmitClaimRequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_internalClaimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"SubmitClaimRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_internalClaimId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"SubmitClaimRequestDismissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_internalClaimId\",\"type\":\"bytes32\"}],\"name\":\"SubmitClaimRequestExpired\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_bountyPercentage\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_disputersToRefund\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_disputersToConfiscate\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"acceptDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_internalClaimId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_bountyPercentage\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"approveSubmitClaimRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bondClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondsNeededToStartDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"challengeResolution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimDisputesDismissed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_disputersToConfiscate\",\"type\":\"address[]\"}],\"name\":\"confiscateDisputers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"court\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"dismissDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"dismissResolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_internalClaimId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"dismissSubmitClaimRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputersBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"executeResolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expertCommittee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"reclaimBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_disputersToRefund\",\"type\":\"address[]\"}],\"name\":\"refundDisputers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_internalClaimId\",\"type\":\"bytes32\"}],\"name\":\"refundExpiredSubmitClaimRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolutionChallengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"resolutionChallengedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"resolutions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bountyPercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"resolvedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_court\",\"type\":\"address\"}],\"name\":\"setCourt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"submitClaimRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitClaimRequestReviewPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"submitClaimRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submittedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"descriptionHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHATClaimsManager\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"totalBondsOnClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptDispute(address,bytes32,uint16,address,address[],address[],string)\":{\"notice\":\"See {IHATArbitrator-acceptDispute}. \"},\"approveSubmitClaimRequest(address,bytes32,address,uint16,string)\":{\"notice\":\"See {IHATArbitrator-approveSubmitClaimRequest}. \"},\"challengeResolution(address,bytes32,string)\":{\"notice\":\"See {IHATArbitrator-challengeResolution}. \"},\"confiscateDisputers(address,bytes32,address[])\":{\"notice\":\"See {IHATArbitrator-confiscateDisputers}. \"},\"dismissDispute(address,bytes32,string)\":{\"notice\":\"See {IHATArbitrator-dismissDispute}. \"},\"dismissResolution(address,bytes32)\":{\"notice\":\"See {IHATArbitrator-dismissResolution}. \"},\"dismissSubmitClaimRequest(bytes32,string)\":{\"notice\":\"See {IHATArbitrator-dismissSubmitClaimRequest}. \"},\"dispute(address,bytes32,uint256,string)\":{\"notice\":\"See {IHATArbitrator-dispute}. \"},\"executeResolution(address,bytes32)\":{\"notice\":\"See {IHATArbitrator-executeResolution}. \"},\"reclaimBond(address,bytes32)\":{\"notice\":\"See {IHATArbitrator-reclaimBond}. \"},\"refundDisputers(address,bytes32,address[])\":{\"notice\":\"See {IHATArbitrator-refundDisputers}. \"},\"refundExpiredSubmitClaimRequest(bytes32)\":{\"notice\":\"See {IHATArbitrator-refundExpiredSubmitClaimRequest}. \"},\"setCourt(address)\":{\"notice\":\"See {IHATArbitrator-setCourt}. \"},\"submitClaimRequest(string)\":{\"notice\":\"See {IHATArbitrator-submitClaimRequest}. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HATArbitrator.sol\":\"HATArbitrator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x8177581667dcba94ed9eaf94aa2f4fbf5f9b908a40c98bf0de4578a92a5a47fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HATArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IHATKlerosConnector.sol\\\";\\nimport \\\"./interfaces/IHATArbitrator.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\ncontract HATArbitrator is IHATArbitrator, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public expertCommittee; // address of the Expert Committee\\n    address public court; // address of the court - kleros, uma, etc\\n    IERC20 public token; // the token in which bonds need to be paid\\n    uint256 public minBondAmount; // minimum bond that a disputer needs to provide to participate in a dispute of the committee's claim\\n    uint256 public bondsNeededToStartDispute; // total amount of bonds needed to start a dispute of a committee's claim\\n    uint256 public resolutionChallengePeriod; // the amount of time that the expert committee's resolution can be challenged\\n    uint256 public submitClaimRequestReviewPeriod; // the time within which the expert committee must decide on a submitClaimRequest\\n\\n    mapping(address => mapping(IHATClaimsManager => mapping(bytes32 => uint256)))\\n        public disputersBonds; // bonds provided by disputers\\n    mapping(address => mapping(IHATClaimsManager => mapping(bytes32 => bool)))\\n        public bondClaimable; // whether a given bond is reclaimable by the disputer\\n    mapping(IHATClaimsManager => mapping(bytes32 => bool)) public claimDisputesDismissed; // claims of which disputes were dismissed\\n    mapping(IHATClaimsManager => mapping(bytes32 => uint256)) public totalBondsOnClaim; // total amount of bonds ona given claim\\n    mapping(IHATClaimsManager => mapping(bytes32 => Resolution)) public resolutions; // resolutions of disputes by the expert committee\\n    mapping(IHATClaimsManager => mapping(bytes32 => uint256))\\n        public resolutionChallengedAt; // the time an expert committee's resolution was challenged\\n    mapping(bytes32 => SubmitClaimRequest) public submitClaimRequests; // a registry of requests to the expert committee to submit a claim\\n\\n    uint256 internal nonce;\\n\\n    modifier onlyExpertCommittee() {\\n        if (msg.sender != expertCommittee) {\\n            revert OnlyExpertCommittee();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyChallengedActiveClaim(IHATClaimsManager _vault, bytes32 _claimId) {\\n        IHATClaimsManager.Claim memory claim = _vault.getActiveClaim();\\n\\n        if (claim.claimId != _claimId) {\\n            revert ClaimIsNotCurrentlyActiveClaim();\\n        }\\n\\n        if (claim.challengedAt == 0) {\\n            revert ClaimIsNotDisputed();\\n        }\\n\\n        if (\\n            block.timestamp >=\\n            claim.createdAt + claim.challengePeriod + claim.challengeTimeOutPeriod\\n        ) {\\n            revert ClaimExpired();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyUnresolvedDispute(IHATClaimsManager _vault, bytes32 _claimId) {\\n        if (resolutions[_vault][_claimId].resolvedAt != 0) {\\n            revert AlreadyResolved();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyResolvedDispute(IHATClaimsManager _vault, bytes32 _claimId) {\\n        if (resolutions[_vault][_claimId].resolvedAt == 0) {\\n            revert NoResolution();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address _expertCommittee,\\n        IERC20 _token,\\n        uint256 _bondsNeededToStartDispute,\\n        uint256 _minBondAmount,\\n        uint256 _resolutionChallengePeriod,\\n        uint256 _submitClaimRequestReviewPeriod\\n    ) {\\n        expertCommittee = _expertCommittee;\\n        token = _token;\\n        bondsNeededToStartDispute = _bondsNeededToStartDispute;\\n        minBondAmount = _minBondAmount;\\n        resolutionChallengePeriod = _resolutionChallengePeriod;\\n        submitClaimRequestReviewPeriod = _submitClaimRequestReviewPeriod;\\n        if (minBondAmount > bondsNeededToStartDispute) {\\n            revert bondsNeededToStartDisputeMustBeHigherThanMinAmount();\\n        }\\n    }\\n\\n    /** @notice See {IHATArbitrator-setCourt}. */\\n    function setCourt(address _court) external onlyOwner {\\n        if (_court == address(0)) {\\n            revert CourtCannotBeZero();\\n        }\\n\\n        if (court != address(0)) {\\n            revert CannontChangeCourtAddress();\\n        }\\n\\n        court = _court;\\n\\n        emit CourtSet(_court);\\n    }\\n\\n    /** @notice See {IHATArbitrator-dispute}. */\\n    function dispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        uint256 _bondAmount,\\n        string calldata _descriptionHash\\n    ) external {\\n        if (_bondAmount < minBondAmount) {\\n            revert BondAmountSubmittedTooLow();\\n        }\\n\\n        IHATClaimsManager.Claim memory claim = _vault.getActiveClaim();\\n        if (claim.claimId != _claimId) {\\n            revert ClaimIsNotCurrentlyActiveClaim();\\n        }\\n\\n        disputersBonds[msg.sender][_vault][_claimId] += _bondAmount;\\n        totalBondsOnClaim[_vault][_claimId] += _bondAmount;\\n\\n        token.safeTransferFrom(msg.sender, address(this), _bondAmount);\\n\\n        if (totalBondsOnClaim[_vault][_claimId] >= bondsNeededToStartDispute) {\\n            if (claim.challengedAt == 0) {\\n                _vault.challengeClaim(_claimId);\\n            } else {\\n                // solhint-disable-next-line not-rely-on-time\\n                if (block.timestamp > claim.challengedAt + 24 hours) {\\n                    revert CannotSubmitMoreEvidence();\\n                }\\n            }\\n        }\\n\\n        emit ClaimDisputed(\\n            _vault,\\n            _claimId,\\n            msg.sender,\\n            _bondAmount,\\n            _descriptionHash\\n        );\\n    }\\n\\n    /** @notice See {IHATArbitrator-dismissDispute}. */\\n    function dismissDispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        string calldata _descriptionHash\\n    )\\n        external\\n        onlyExpertCommittee\\n        onlyChallengedActiveClaim(_vault, _claimId)\\n        onlyUnresolvedDispute(_vault, _claimId)\\n    {\\n        claimDisputesDismissed[_vault][_claimId] = true;\\n        resolutions[_vault][_claimId].resolvedAt = block.timestamp;\\n        token.safeTransfer(msg.sender, totalBondsOnClaim[_vault][_claimId]);\\n\\n        _vault.approveClaim(_claimId, 0, address(0));\\n\\n        emit DisputeDismissed(_vault, _claimId, _descriptionHash);\\n    }\\n\\n    /** @notice See {IHATArbitrator-acceptDispute}. */\\n    function acceptDispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        uint16 _bountyPercentage,\\n        address _beneficiary,\\n        address[] calldata _disputersToRefund,\\n        address[] calldata _disputersToConfiscate,\\n        string calldata _descriptionHash\\n    )\\n        external\\n        onlyExpertCommittee\\n        onlyChallengedActiveClaim(_vault, _claimId)\\n        onlyUnresolvedDispute(_vault, _claimId)\\n    {\\n        resolutions[_vault][_claimId] = Resolution({\\n            bountyPercentage: _bountyPercentage,\\n            beneficiary: _beneficiary,\\n            resolvedAt: block.timestamp\\n        });\\n        _refundDisputers(_vault, _claimId, _disputersToRefund);\\n        _confiscateDisputers(_vault, _claimId, _disputersToConfiscate);\\n\\n        emit DisputeAccepted(\\n            _vault,\\n            _claimId,\\n            _bountyPercentage,\\n            _beneficiary,\\n            _descriptionHash\\n        );\\n    }\\n\\n    /** @notice See {IHATArbitrator-refundDisputers}. */\\n    function refundDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToRefund\\n    )\\n        external\\n        onlyExpertCommittee\\n        onlyChallengedActiveClaim(_vault, _claimId)\\n        onlyResolvedDispute(_vault, _claimId)\\n    {\\n        _refundDisputers(_vault, _claimId, _disputersToRefund);\\n    }\\n\\n    function _refundDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToRefund\\n    ) internal {\\n        for (uint256 i = 0; i < _disputersToRefund.length; ) {\\n            bondClaimable[_disputersToRefund[i]][_vault][_claimId] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit DisputersRefunded(_vault, _claimId, _disputersToRefund);\\n    }\\n\\n    /** @notice See {IHATArbitrator-confiscateDisputers}. */\\n    function confiscateDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToConfiscate\\n    )\\n        external\\n        onlyExpertCommittee\\n        onlyChallengedActiveClaim(_vault, _claimId)\\n        onlyResolvedDispute(_vault, _claimId)\\n    {\\n        _confiscateDisputers(_vault, _claimId, _disputersToConfiscate);\\n    }\\n\\n    function _confiscateDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToConfiscate\\n    ) internal {\\n        uint256 totalBondsToConfiscate;\\n        for (uint256 i = 0; i < _disputersToConfiscate.length; ) {\\n            totalBondsToConfiscate += disputersBonds[_disputersToConfiscate[i]][\\n                _vault\\n            ][_claimId];\\n            disputersBonds[_disputersToConfiscate[i]][_vault][_claimId] = 0;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        token.safeTransfer(expertCommittee, totalBondsToConfiscate);\\n\\n        emit DisputersConfiscated(_vault, _claimId, _disputersToConfiscate);\\n    }\\n\\n    /** @notice See {IHATArbitrator-reclaimBond}. */\\n    function reclaimBond(IHATClaimsManager _vault, bytes32 _claimId) external {\\n        if (!bondClaimable[msg.sender][_vault][_claimId]) {\\n            // the bond is claimable if the claim wasn't dismissed and either\\n            // (a) it is not related to the current active claim\\n            // (b) it is about the current active claim but the claim has already expired\\n\\n            if (claimDisputesDismissed[_vault][_claimId]) {\\n                revert ClaimDisputesDismissed();\\n            }\\n\\n            IHATClaimsManager.Claim memory claim = _vault.getActiveClaim();\\n\\n            if (\\n                claim.claimId == _claimId &&\\n                block.timestamp <\\n                claim.createdAt + claim.challengePeriod + claim.challengeTimeOutPeriod\\n            ) {\\n                revert CannotClaimBond();\\n            }\\n        } else {\\n            bondClaimable[msg.sender][_vault][_claimId] = false;\\n        }\\n\\n        uint256 disputerBond = disputersBonds[msg.sender][_vault][_claimId];\\n        disputersBonds[msg.sender][_vault][_claimId] = 0;\\n        token.safeTransfer(msg.sender, disputerBond);\\n\\n        emit BondRefundClaimed(_vault, _claimId, msg.sender, disputerBond);\\n    }\\n\\n    /** @notice See {IHATArbitrator-executeResolution}. */\\n    function executeResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId\\n    )\\n        external\\n        onlyChallengedActiveClaim(_vault, _claimId)\\n        onlyResolvedDispute(_vault, _claimId)\\n    {\\n        Resolution memory resolution = resolutions[_vault][_claimId];\\n\\n        if (resolutionChallengedAt[_vault][_claimId] != 0) {\\n            if (msg.sender != court) {\\n                revert CanOnlyBeCalledByCourt();\\n            }\\n        } else {\\n            if (\\n                block.timestamp <\\n                resolution.resolvedAt + resolutionChallengePeriod\\n            ) {\\n                revert ChallengePeriodDidNotPass();\\n            }\\n        }\\n\\n        _vault.approveClaim(\\n            _claimId,\\n            resolution.bountyPercentage,\\n            resolution.beneficiary\\n        );\\n\\n        emit ResolutionExecuted(_vault, _claimId);\\n    }\\n\\n    /** @notice See {IHATArbitrator-dismissResolution}. */\\n    function dismissResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId\\n    )\\n        external\\n        onlyChallengedActiveClaim(_vault, _claimId)\\n        onlyResolvedDispute(_vault, _claimId)\\n    {\\n        if (resolutionChallengedAt[_vault][_claimId] == 0) {\\n            revert CannotDismissUnchallengedResolution();\\n        }\\n\\n        if (msg.sender != court) {\\n            revert CanOnlyBeCalledByCourt();\\n        }\\n\\n        _vault.dismissClaim(_claimId);\\n\\n        emit ResolutionDismissed(_vault, _claimId);\\n    }\\n\\n    /** @notice See {IHATArbitrator-challengeResolution}. */\\n    function challengeResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        string calldata _evidence\\n    )\\n        external\\n        payable\\n        onlyChallengedActiveClaim(_vault, _claimId)\\n        onlyResolvedDispute(_vault, _claimId)\\n    {\\n        if (\\n            block.timestamp >=\\n            resolutions[_vault][_claimId].resolvedAt + resolutionChallengePeriod\\n        ) {\\n            revert ChallengePeriodPassed();\\n        }\\n\\n        if (resolutionChallengedAt[_vault][_claimId] != 0) {\\n            revert AlreadyChallenged();\\n        }\\n\\n        resolutionChallengedAt[_vault][_claimId] = block.timestamp;\\n\\n        emit ResolutionChallenged(_vault, _claimId);\\n\\n        IHATKlerosConnector(court).notifyArbitrator{value: msg.value}(\\n            _claimId,\\n            _evidence,\\n            _vault,\\n            msg.sender\\n        );\\n    }\\n\\n    /** @notice See {IHATArbitrator-submitClaimRequest}. */\\n    function submitClaimRequest(string calldata _descriptionHash) external {\\n        bytes32 internalClaimId = keccak256(\\n            abi.encodePacked(address(this), ++nonce)\\n        );\\n        submitClaimRequests[internalClaimId] = SubmitClaimRequest({\\n            submitter: msg.sender,\\n            bond: bondsNeededToStartDispute,\\n            submittedAt: block.timestamp,\\n            descriptionHash: _descriptionHash\\n        });\\n        token.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            bondsNeededToStartDispute\\n        );\\n\\n        emit SubmitClaimRequestCreated(\\n            internalClaimId,\\n            msg.sender,\\n            bondsNeededToStartDispute,\\n            _descriptionHash\\n        );\\n    }\\n\\n    /** @notice See {IHATArbitrator-dismissSubmitClaimRequest}. */\\n    function dismissSubmitClaimRequest(\\n        bytes32 _internalClaimId,\\n        string calldata _descriptionHash\\n    ) external onlyExpertCommittee {\\n        SubmitClaimRequest memory submitClaimRequest = submitClaimRequests[\\n            _internalClaimId\\n        ];\\n\\n        if (\\n            block.timestamp >\\n            submitClaimRequest.submittedAt + submitClaimRequestReviewPeriod\\n        ) {\\n            revert ClaimReviewPeriodEnd();\\n        }\\n\\n        delete submitClaimRequests[_internalClaimId];\\n\\n        token.safeTransfer(msg.sender, submitClaimRequest.bond);\\n\\n        emit SubmitClaimRequestDismissed(_internalClaimId, _descriptionHash);\\n    }\\n\\n    /** @notice See {IHATArbitrator-approveSubmitClaimRequest}. */\\n    function approveSubmitClaimRequest(\\n        IHATClaimsManager _vault,\\n        bytes32 _internalClaimId,\\n        address _beneficiary,\\n        uint16 _bountyPercentage,\\n        string calldata _descriptionHash\\n    ) external onlyExpertCommittee {\\n        SubmitClaimRequest memory submitClaimRequest = submitClaimRequests[\\n            _internalClaimId\\n        ];\\n\\n        if (\\n            block.timestamp >\\n            submitClaimRequest.submittedAt + submitClaimRequestReviewPeriod\\n        ) {\\n            revert ClaimReviewPeriodEnd();\\n        }\\n\\n        delete submitClaimRequests[_internalClaimId];\\n\\n        bytes32 claimId = _vault.submitClaim(\\n            _beneficiary,\\n            _bountyPercentage,\\n            _descriptionHash\\n        );\\n\\n        // pass control over the claim to the arbitrator\\n        _vault.challengeClaim(claimId);\\n\\n        resolutions[_vault][claimId] = Resolution({\\n            bountyPercentage: _bountyPercentage,\\n            beneficiary: _beneficiary,\\n            resolvedAt: block.timestamp\\n        });\\n\\n        // refund the bond to the submitter\\n        token.safeTransfer(\\n            submitClaimRequest.submitter,\\n            submitClaimRequest.bond\\n        );\\n\\n        emit SubmitClaimRequestApproved(_internalClaimId, claimId, _vault);\\n    }\\n\\n    /** @notice See {IHATArbitrator-refundExpiredSubmitClaimRequest}. */\\n    function refundExpiredSubmitClaimRequest(\\n        bytes32 _internalClaimId\\n    ) external {\\n        SubmitClaimRequest memory submitClaimRequest = submitClaimRequests[\\n            _internalClaimId\\n        ];\\n\\n        if (\\n            submitClaimRequest.submittedAt == 0 ||\\n            block.timestamp <=\\n            submitClaimRequest.submittedAt + submitClaimRequestReviewPeriod\\n        ) {\\n            revert ClaimReviewPeriodDidNotEnd();\\n        }\\n\\n        delete submitClaimRequests[_internalClaimId];\\n        token.safeTransfer(\\n            submitClaimRequest.submitter,\\n            submitClaimRequest.bond\\n        );\\n\\n        emit SubmitClaimRequestExpired(_internalClaimId);\\n    }\\n}\\n\",\"keccak256\":\"0xb112bb10672c3ea4f6e4e9a09014f6c8024eba9d1c380e710dbe62ba4d1654cf\",\"license\":\"MIT\"},\"contracts/interfaces/IHATArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\ninterface IHATArbitrator {\\n    error bondsNeededToStartDisputeMustBeHigherThanMinAmount();\\n    error BondAmountSubmittedTooLow();\\n    error ClaimIsNotCurrentlyActiveClaim();\\n    error CannotSubmitMoreEvidence();\\n    error ClaimIsNotDisputed();\\n    error OnlyExpertCommittee();\\n    error AlreadyResolved();\\n    error NoResolution();\\n    error ChallengePeriodDidNotPass();\\n    error CanOnlyBeCalledByCourt();\\n    error ChallengePeriodPassed();\\n    error CannotClaimBond();\\n    error CannotDismissUnchallengedResolution();\\n    error ClaimReviewPeriodEnd();\\n    error ClaimReviewPeriodDidNotEnd();\\n    error ClaimExpired();\\n    error AlreadyChallenged();\\n    error CourtCannotBeZero();\\n    error CannontChangeCourtAddress();\\n    error ClaimDisputesDismissed();\\n\\n    struct Resolution {\\n        address beneficiary;\\n        uint16 bountyPercentage;\\n        uint256 resolvedAt;\\n    }\\n\\n    struct SubmitClaimRequest {\\n        address submitter;\\n        uint256 bond;\\n        uint256 submittedAt;\\n        string descriptionHash;\\n    }\\n\\n    event ClaimDisputed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address indexed _disputer,\\n        uint256 _bondAmount,\\n        string _descriptionHash\\n    );\\n    event DisputeDismissed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        string _descriptionHash\\n    );\\n    event DisputeAccepted(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        uint16 _bountyPercentage,\\n        address _beneficiary,\\n        string _descriptionHash\\n    );\\n    event DisputersRefunded(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address[] _disputers\\n    );\\n    event DisputersConfiscated(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address[] _disputers\\n    );\\n    event BondRefundClaimed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId,\\n        address _disputer,\\n        uint256 _amountClaimed\\n    );\\n    event ResolutionExecuted(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId\\n    );\\n    event ResolutionDismissed(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId\\n    );\\n    event ResolutionChallenged(\\n        IHATClaimsManager indexed _vault,\\n        bytes32 indexed _claimId\\n    );\\n\\n    event SubmitClaimRequestCreated(\\n        bytes32 indexed _internalClaimId,\\n        address indexed _submitter,\\n        uint256 _bond,\\n        string _descriptionHash\\n    );\\n    event SubmitClaimRequestDismissed(\\n        bytes32 indexed _internalClaimId,\\n        string _descriptionHash\\n    );\\n    event SubmitClaimRequestApproved(\\n        bytes32 indexed _internalClaimId,\\n        bytes32 indexed _claimId,\\n        IHATClaimsManager indexed _vault\\n    );\\n    event SubmitClaimRequestExpired(bytes32 indexed _internalClaimId);\\n    event CourtSet(address indexed _court);\\n\\n    /**\\n     * Sets the address of the court\\n     * Can be called only once and only by the owner\\n     * @param _court the address of the decentralized court contract\\n     */\\n    function setCourt(address _court) external;\\n\\n    /**\\n     * Dispute the commitee's claim\\n     * Can be called by anyone\\n     * @param _vault the vault that the claim was created\\n     * @param _claimId the id of the claim\\n     * @param _bondAmount Amount of tokens that the disputer will put up as a bond. This must be at least minBondAmount.\\n     * The dispute is accepted if the total amount of bonds exceeds bondsNeededToStartDispute\\n     */\\n    function dispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        uint256 _bondAmount,\\n        string calldata _descriptionHash\\n    ) external;\\n\\n    /**\\n     * Dismiss the dispute - i.e. approve the original claim from the committee\\n     * Can only be called by the expert commmittee.\\n     * The expert committee will receive the bonds of the disputers as a payment for their service\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _descriptionHash an (ipfs) hash representing the motiviations of the dismissal\\n     */\\n    function dismissDispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        string calldata _descriptionHash\\n    )\\n        external;\\n\\n    /**\\n     * Acccept the dispute - i.e. rule in favor of the disputers and against the original claim from the committee\\n     * Can only be called by the Expert Committee\\n     * The expert committee can include a payment for their service in the payout process\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _bountyPercentage the percentage of the vault that will be paid out to the _beneficiary\\n     * @param _beneficiary the (new) benficiary of the claim\\n     * @param _disputersToRefund array of addresses of disputers that will get their bond back\\n     * @param _disputersToConfiscate array of addresses of disputers that will lose their bond\\n     * @param _descriptionHash a motivation of the ruling\\n     */\\n    function acceptDispute(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        uint16 _bountyPercentage,\\n        address _beneficiary,\\n        address[] calldata _disputersToRefund,\\n        address[] calldata _disputersToConfiscate,\\n        string calldata _descriptionHash\\n    )\\n        external;\\n\\n    /**\\n     * @notice release the bonds of the disputers, so that they can claim them back\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _disputersToRefund array of addresses\\n     */\\n    function refundDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToRefund\\n    )\\n        external;\\n\\n    /**\\n     * Forfeit the bonds of the given list of disputers. Their bonds will be sent to the expert committee\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _disputersToConfiscate a list of addresses of disputers whose bond will be forfeited\\n     */\\n    function confiscateDisputers(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        address[] calldata _disputersToConfiscate\\n    )\\n        external;\\n\\n    /**\\n     * reclaim a bond that msg.sender has put up for a given claim\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     */\\n    function reclaimBond(IHATClaimsManager _vault, bytes32 _claimId) external;\\n\\n    /**\\n     * @notice execute a resolution from the expert committee\\n     * if the resolution was challenged, this can only be called by the court\\n     * if the resolution was not challenged durring the resolutionChallengePeriod, this can be called by anyone\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     */\\n    function executeResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId\\n    )\\n        external;\\n\\n    /**\\n     * Dismiss a resolution from the expert committee\\n     * can only be called by the court\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     */\\n    function dismissResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId\\n    )\\n        external;\\n\\n    /**\\n     * Challenge a resolution of the expert committee - i.e. bring it to the attation of the court\\n     * @param _vault the address of the vault where the claim was started\\n     * @param _claimId id of the claim that was disputed. Must be the currently active claim\\n     * @param _evidence URI of the evidence to support the challenge\\n     */\\n    function challengeResolution(\\n        IHATClaimsManager _vault,\\n        bytes32 _claimId,\\n        string calldata _evidence\\n    )\\n        external payable;\\n\\n    /**\\n     * Submit a request for the expert committee to consider a claim\\n     * A security researcher can use this if his claim is ignored by the committee\\n     * The requester must provide a bond, which they will lose if the claim is considered invalid by the committee\\n     * @param _descriptionHash a hash of a description of the claim\\n     */\\n    function submitClaimRequest(string calldata _descriptionHash) external;\\n\\n    /**\\n     * Dismiss a request to create a claim. Can only be called by the expert committee\\n     * @param _internalClaimId the id of the claim to dismiss\\n     * @param _descriptionHash a motivation for the dismissal\\n     */\\n    function dismissSubmitClaimRequest(\\n        bytes32 _internalClaimId,\\n        string calldata _descriptionHash\\n    ) external;\\n\\n    /**\\n     * Submit a new claim on the basis of a submitClaimRequest\\n     * only calleable by the expert committee\\n     * the claim must be submitted within the submitClaimRequestReviewPeriod\\n     * @param _vault the vault where the claim was created\\n     * @param _internalClaimId the id of the claim to approve\\n     * @param _bountyPercentage the percentage of the vault that will be paid out to the _beneficiary\\n     * @param _beneficiary the (new) benficiary of the claim\\n     * @param _descriptionHash a motivation for the claim\\n     */\\n    function approveSubmitClaimRequest(\\n        IHATClaimsManager _vault,\\n        bytes32 _internalClaimId,\\n        address _beneficiary,\\n        uint16 _bountyPercentage,\\n        string calldata _descriptionHash\\n    ) external;\\n\\n    /**\\n     * Refund the bond of the claimRequest by the sumbitter of the claim\\n     * @param _internalClaimId the claim of which the bond will be refunded\\n     */\\n    function refundExpiredSubmitClaimRequest(\\n        bytes32 _internalClaimId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd46ef3bbb741f8988b42b3d46ef2098f0f73fc0571ee5e8a66d9b218feee62ae\",\"license\":\"MIT\"},\"contracts/interfaces/IHATClaimsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the IHATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATClaimsManager {\\n\\n    // How to divide the bounty - after deducting the part that is swapped to\\n    // HAT tokens (and then sent to governance and vested to the hacker)\\n    // values are in percentages and should add up to 100% (defined as 10000)\\n    struct BountySplit {\\n        // the percentage of reward sent to the hacker via vesting contract\\n        uint16 hackerVested;\\n        // the percentage of tokens that are sent directly to the hacker\\n        uint16 hacker;\\n        // the percentage sent to the committee\\n        uint16 committee;\\n    }\\n\\n    // How to divide a bounty for a claim that has been approved\\n    // used to keep track of payouts, amounts are in vault's native token\\n    struct ClaimBounty {\\n        uint256 hacker;\\n        uint256 hackerVested;\\n        uint256 committee;\\n        uint256 hackerHatVested;\\n        uint256 governanceHat;\\n    }\\n\\n    struct Claim {\\n        bytes32 claimId;\\n        address beneficiary;\\n        uint16 bountyPercentage;\\n        // the address of the committee at the time of the submission, so that this committee will\\n        // be paid their share of the bounty in case the committee changes before claim approval\\n        address committee;\\n        uint32 createdAt;\\n        uint32 challengedAt;\\n        uint256 bountyGovernanceHAT;\\n        uint256 bountyHackerHATVested;\\n        address arbitrator;\\n        uint32 challengePeriod;\\n        uint32 challengeTimeOutPeriod;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n    }\\n\\n    struct PendingMaxBounty {\\n        uint16 maxBounty;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Initialization parameters for the vault\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param vestingDuration Duration of the vesting period of the vault's\\n    * token vested part of the bounty\\n    * @param vestingPeriods The number of vesting periods of the vault's token\\n    * vested part of the bounty\\n    * @param maxBounty The maximum percentage of the vault that can be paid\\n    * out as a bounty\\n    * @param bountySplit The way to split the bounty between the hacker, \\n    * hacker vested, and committee.\\n    *   Each entry is a number between 0 and `HUNDRED_PERCENT`.\\n    *   Total splits should be equal to `HUNDRED_PERCENT`.\\n    * @param bountyGovernanceHAT The HAT bounty for governance\\n    * @param bountyHackerHATVested The HAT bounty vested for the hacker\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param committee The address of the vault's committee \\n    * @param arbitrator The address of the vault's arbitrator\\n    * @param arbitratorCanChangeBounty Can the arbitrator change a claim's bounty\\n    * @param arbitratorCanChangeBeneficiary Can the arbitrator change a claim's beneficiary\\n    * @param arbitratorCanSubmitClaims Can the arbitrator submit a claim\\n    * @param isTokenLockRevocable can the committee revoke the token lock\\n    * @dev Needed to avoid a \\\"stack too deep\\\" error\\n    */\\n    struct ClaimsManagerInitParams {\\n        uint32 vestingDuration;\\n        uint32 vestingPeriods;\\n        uint16 maxBounty;\\n        BountySplit bountySplit;\\n        uint16 bountyGovernanceHAT;\\n        uint16 bountyHackerHATVested;\\n        address owner;\\n        address committee;\\n        address arbitrator;\\n        bool arbitratorCanChangeBounty;\\n        bool arbitratorCanChangeBeneficiary;\\n        bool arbitratorCanSubmitClaims;\\n        bool isTokenLockRevocable;\\n    }\\n\\n    // Only committee\\n    error OnlyCommittee();\\n    // Active claim exists\\n    error ActiveClaimExists();\\n    // Safety period\\n    error SafetyPeriod();\\n    // Not safety period\\n    error NotSafetyPeriod();\\n    // Bounty percentage is higher than the max bounty\\n    error BountyPercentageHigherThanMaxBounty();\\n    // Only callable by arbitrator or after challenge timeout period\\n    error OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod();\\n    // No active claim exists\\n    error NoActiveClaimExists();\\n    // Claim Id specified is not the active claim Id\\n    error ClaimIdIsNotActive();\\n    // Not enough fee paid\\n    error NotEnoughFeePaid();\\n    // No pending max bounty\\n    error NoPendingMaxBounty();\\n    // Delay period for setting max bounty had not passed\\n    error DelayPeriodForSettingMaxBountyHadNotPassed();\\n    // Committee already checked in\\n    error CommitteeAlreadyCheckedIn();\\n    // Total bounty split % should be `HUNDRED_PERCENT`\\n    error TotalSplitPercentageShouldBeHundredPercent();\\n    // Vesting duration is too long\\n    error VestingDurationTooLong();\\n    // Vesting periods cannot be zero\\n    error VestingPeriodsCannotBeZero();\\n    // Vesting duration smaller than periods\\n    error VestingDurationSmallerThanPeriods();\\n    // Max bounty cannot be more than `MAX_BOUNTY_LIMIT` (unless if it is 100%)\\n    error MaxBountyCannotBeMoreThanMaxBountyLimit();\\n    // Committee bounty split cannot be more than `MAX_COMMITTEE_BOUNTY`\\n    error CommitteeBountyCannotBeMoreThanMax();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Set shares arrays must have same length\\n    error SetSharesArraysMustHaveSameLength();\\n    // Not enough user balance\\n    error NotEnoughUserBalance();\\n    // Only arbitrator or registry owner\\n    error OnlyArbitratorOrRegistryOwner();\\n    // Unchallenged claim can only be approved if challenge period is over\\n    error UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod();\\n    // Challenged claim can only be approved by arbitrator before the challenge timeout period\\n    error ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod();\\n    // Claim has expired\\n    error ClaimExpired();\\n    // Challenge period is over\\n    error ChallengePeriodEnded();\\n    // Claim can be challenged only once\\n    error ClaimAlreadyChallenged();\\n    // Only callable if challenged\\n    error OnlyCallableIfChallenged();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Cannot set a reward controller that was already used in the past\\n    error CannotSetToPerviousRewardController();\\n    // Payout must either be 100%, or up to the MAX_BOUNTY_LIMIT\\n    error PayoutMustBeUpToMaxBountyLimitOrHundredPercent();\\n\\n\\n    event SubmitClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _submitter,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        string _descriptionHash\\n    );\\n    event ChallengeClaim(bytes32 indexed _claimId);\\n    event ApproveClaim(\\n        bytes32 indexed _claimId,\\n        address _committee,\\n        address indexed _approver,\\n        address indexed _beneficiary,\\n        uint256 _bountyPercentage,\\n        address _tokenLock,\\n        ClaimBounty _claimBounty\\n    );\\n    event DismissClaim(bytes32 indexed _claimId);\\n    event SetCommittee(address indexed _committee);\\n    event SetVestingParams(\\n        uint256 _duration,\\n        uint256 _periods\\n    );\\n    event SetBountySplit(BountySplit _bountySplit);\\n    event CommitteeCheckedIn();\\n    event SetPendingMaxBounty(uint256 _maxBounty);\\n    event SetMaxBounty(uint256 _maxBounty);\\n    event SetHATBountySplit(uint256 _bountyGovernanceHAT, uint256 _bountyHackerHATVested);\\n    event SetArbitrator(address indexed _arbitrator);\\n    event SetChallengePeriod(uint256 _challengePeriod);\\n    event SetChallengeTimeOutPeriod(uint256 _challengeTimeOutPeriod);\\n    event SetArbitratorOptions(bool _arbitratorCanChangeBounty, bool _arbitratorCanChangeBeneficiary, bool _arbitratorCanSubmitClaims);\\n\\n    /**\\n    * @notice Initialize a claims manager instance\\n    * @param _vault The vault instance\\n    * @param _params The claim manager's initialization parameters\\n    * @dev See {IHATClaimsManager-ClaimsManagerInitParams} for more details\\n    * @dev Called when the vault is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(IHATVault _vault, ClaimsManagerInitParams calldata _params) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Claim --------------------------------------- */\\n\\n    /**\\n     * @notice Called by the committee to submit a claim for a bounty payout.\\n     * This function should be called only on a safety period, when withdrawals\\n     * are disabled, and while there's no other active claim. Cannot be called\\n     * when the registry is in an emergency pause.\\n     * Upon a call to this function by the committee the vault's withdrawals\\n     * will be disabled until the claim is approved or dismissed. Also from the\\n     * time of this call the arbitrator will have a period of \\n     * {IHATVaultsRegistry.challengePeriod} to challenge the claim.\\n     * @param _beneficiary The submitted claim's beneficiary\\n     * @param _bountyPercentage The submitted claim's bug requested reward percentage\\n     */\\n    function submitClaim(\\n        address _beneficiary, \\n        uint16 _bountyPercentage, \\n        string calldata _descriptionHash\\n    )\\n        external\\n        returns (bytes32 claimId);\\n\\n   \\n    /**\\n    * @notice Called by the arbitrator or governance to challenge a claim for a bounty\\n    * payout that had been previously submitted by the committee.\\n    * Can only be called during the challenge period after submission of the\\n    * claim.\\n    * @param _claimId The claim ID\\n    */\\n    function challengeClaim(bytes32 _claimId) external;\\n\\n    /**\\n    * @notice Approve a claim for a bounty submitted by a committee, and\\n    * pay out bounty to hacker and committee. Also transfer to the \\n    * IHATVaultsRegistry the part of the bounty that will be swapped to HAT \\n    * tokens.\\n    * If the claim had been previously challenged, this is only callable by\\n    * the arbitrator. Otherwise, callable by anyone after challengePeriod had\\n    * passed.\\n    * @param _claimId The claim ID\\n    * @param _bountyPercentage The percentage of the vault's balance that will\\n    * be sent as a bounty. This value will be ignored if the caller is not the\\n    * arbitrator.\\n    * @param _beneficiary where the bounty will be sent to. This value will be \\n    * ignored if the caller is not the arbitrator.\\n    */\\n    function approveClaim(bytes32 _claimId, uint16 _bountyPercentage, address _beneficiary)\\n        external;\\n\\n    /**\\n    * @notice Dismiss the active claim for bounty payout submitted by the\\n    * committee.\\n    * Called either by the arbitrator, or by anyone if the claim has timed out.\\n    * @param _claimId The claim ID\\n    */\\n    function dismissClaim(bytes32 _claimId) external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* ---------------------------------- Params -------------------------------------- */\\n\\n    /**\\n    * @notice Set new committee address. Can be called by existing committee,\\n    * or by the the vault's owner in the case that the committee hadn't checked in\\n    * yet.\\n    * @param _committee The address of the new committee \\n    */\\n    function setCommittee(address _committee) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vesting params for the\\n    * part of the bounty that the hacker gets vested in the vault's native\\n    * token\\n    * @param _duration Duration of the vesting period. Must be smaller than\\n    * 120 days and bigger than `_periods`\\n    * @param _periods Number of vesting periods. Cannot be 0.\\n    */\\n    function setVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault token bounty split\\n    * upon an approval.\\n    * Can only be called if is no active claim and not during safety periods.\\n    * @param _bountySplit The bounty split\\n    */\\n    function setBountySplit(BountySplit calldata _bountySplit) external;\\n\\n    /**\\n    * @notice Called by the vault's committee to claim it's role.\\n    * Deposits are enabled only after committee check in.\\n    */\\n    function committeeCheckIn() external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set a pending request for the\\n    * maximum percentage of the vault that can be paid out as a bounty.\\n    * Cannot be called if there is an active claim that has been submitted.\\n    * Max bounty should be less than or equal to 90% (defined as 9000).\\n    * It can also be set to 100%, but in this mode the vault will only allow\\n    * payouts of the 100%, and the vault will become inactive forever afterwards.\\n    * The pending value can be set by the owner after the time delay (of \\n    * {IHATVaultsRegistry.generalParameters.setMaxBountyDelay}) had passed.\\n    * @param _maxBounty The maximum bounty percentage that can be paid out\\n    */\\n    function setPendingMaxBounty(uint16 _maxBounty) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to set the vault's max bounty to\\n    * the already pending max bounty.\\n    * Cannot be called if there are active claims that have been submitted.\\n    * Can only be called if there is a max bounty pending approval, and the\\n    * time delay since setting the pending max bounty had passed.\\n    */\\n    function setMaxBounty() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault HAT token bounty \\n    * split upon an approval.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _bountyGovernanceHAT The HAT bounty for governance\\n    * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n    */\\n    function setHATBountySplit(\\n        uint16 _bountyGovernanceHAT,\\n        uint16 _bountyHackerHATVested\\n    ) \\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the vault arbitrator\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitrator The address of vault's arbitrator\\n    */\\n    function setArbitrator(address _arbitrator) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * a claim for a bounty payout has been submitted that it can be challenged\\n    * by the arbitrator.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengePeriod The vault's challenge period\\n    */\\n    function setChallengePeriod(uint32 _challengePeriod) external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set the period of time after\\n    * which a claim for a bounty payout can be dismissed by anyone.\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _challengeTimeOutPeriod The vault's challenge timeout period\\n    */\\n    function setChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod)\\n        external;\\n\\n    /**\\n    * @notice Called by the registry's owner to set whether the arbitrator\\n    * can change a claim bounty percentage and/ or beneficiary\\n    * If the value passed is the special \\\"null\\\" value the vault will use the\\n    * registry's default value.\\n    * @param _arbitratorCanChangeBounty Whether the arbitrator can change a claim bounty percentage\\n    * @param _arbitratorCanChangeBeneficiary Whether the arbitrator can change a claim beneficiary\\n    */\\n    function setArbitratorOptions(\\n        bool _arbitratorCanChangeBounty,\\n        bool _arbitratorCanChangeBeneficiary,\\n        bool _arbitratorCanSubmitClaims\\n    )\\n        external;\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* --------------------------------- Getters -------------------------------------- */\\n\\n    /** \\n    * @notice Returns the max bounty that can be paid from the vault in percentages out of HUNDRED_PERCENT\\n    * @return The max bounty\\n    */\\n    function maxBounty() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns whether the committee has checked in\\n    * @return Whether the committee has checked in\\n    */\\n    function committeeCheckedIn() external view returns(bool);\\n\\n    /** \\n    * @notice Returns the current active claim\\n    * @return The current active claim\\n    */\\n    function getActiveClaim() external view returns(Claim memory);\\n\\n    /** \\n    * @notice Returns the vault HAT bounty split part that goes to the governance\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that goes to the governance\\n    */\\n    function getBountyGovernanceHAT() external view returns(uint16);\\n    \\n    /** \\n    * @notice Returns the vault HAT bounty split part that is vested for the hacker\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's HAT bounty split part that is vested for the hacker\\n    */\\n    function getBountyHackerHATVested() external view returns(uint16);\\n\\n    /** \\n    * @notice Returns the address of the vault's arbitrator\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The address of the vault's arbitrator\\n    */\\n    function getArbitrator() external view returns(address);\\n\\n    /** \\n    * @notice Returns the period of time after a claim for a bounty payout has\\n    * been submitted that it can be challenged by the arbitrator.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge period\\n    */\\n    function getChallengePeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the period of time after which a claim for a bounty\\n    * payout can be dismissed by anyone.\\n    * If no specific value for this vault has been set, the registry's default\\n    * value will be returned.\\n    * @return The vault's challenge timeout period\\n    */\\n    function getChallengeTimeOutPeriod() external view returns(uint32);\\n\\n    /** \\n    * @notice Returns the claims manager's version\\n    * @return The claims manager's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n}\\n\",\"keccak256\":\"0x65002b348c94f5fcacc302fd5da474317dfbc98b52530d523931a96216cad37e\",\"license\":\"MIT\"},\"contracts/interfaces/IHATKlerosConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\ninterface IHATKlerosConnector {\\n\\n    enum Decision {\\n        None, // Court wasn't able to make a decisive ruling. In this case the resolution is dismissed. Both sides will get their appeal deposits back in this case.\\n        ExecuteResolution, // Execute expert's committee resolution.\\n        DismissResolution // Dismiss the resolution.\\n    }\\n\\n    function notifyArbitrator(bytes32 _claimId, string calldata _evidence, IHATClaimsManager _vault, address _disputer) external payable;\\n}\\n\",\"keccak256\":\"0x97507b9e67b39b430cdd16c257d611abd94b029f75609e74e14cff0446d2c6fe\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardController.sol\\\";\\nimport \\\"./IHATVaultsRegistry.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\n\\n/** @title Interface for Hats.finance Vaults\\n * @author Hats.finance\\n * @notice A HATVault holds the funds for a specific project's bug bounties.\\n * Anyone can permissionlessly deposit into the HATVault using\\n * the vault\\u2019s native token. When a bug is submitted and approved, the bounty \\n * is paid out using the funds in the vault. Bounties are paid out as a\\n * percentage of the vault. The percentage is set according to the severity of\\n * the bug. Vaults have regular safety periods (typically for an hour twice a\\n * day) which are time for the committee to make decisions.\\n *\\n * In addition to the roles defined in the HATVaultsRegistry, every HATVault \\n * has the roles:\\n * Committee - The only address which can submit a claim for a bounty payout\\n * and set the maximum bounty.\\n * User - Anyone can deposit the vault's native token into the vault and \\n * recieve shares for it. Shares represent the user's relative part in the\\n * vault, and when a bounty is paid out, users lose part of their deposits\\n * (based on percentage paid), but keep their share of the vault.\\n * Users also receive rewards for their deposits, which can be claimed at any\\n *  time.\\n * To withdraw previously deposited tokens, a user must first send a withdraw\\n * request, and the withdrawal will be made available after a pending period.\\n * Withdrawals are not permitted during safety periods or while there is an \\n * active claim for a bounty payout.\\n *\\n * Bounties are payed out distributed between a few channels, and that \\n * distribution is set upon creation (the hacker gets part in direct transfer,\\n * part in vested reward and part in vested HAT token, part gets rewarded to\\n * the committee, part gets swapped to HAT token and burned and/or sent to Hats\\n * governance).\\n *\\n * NOTE: Vaults should not use tokens which do not guarantee that the amount\\n * specified is the amount transferred\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n */\\ninterface IHATVault is IERC4626Upgradeable {\\n\\n    /**\\n    * @notice Initialization parameters for the vault token\\n    * @param name The vault's name (concatenated as \\\"Hats Vault \\\" + name)\\n    * @param symbol The vault's symbol (concatenated as \\\"HAT\\\" + symbol)\\n    * @param rewardController The reward controller for the vault\\n    * @param asset The vault's native token\\n    * @param owner The address of the vault's owner \\n    * @param isPaused Whether to initialize the vault with deposits disabled\\n    * @param descriptionHash The hash of the vault's description\\n    */\\n    struct VaultInitParams {\\n        string name;\\n        string symbol;\\n        IRewardController[] rewardControllers;\\n        IERC20 asset;\\n        address owner;\\n        bool isPaused;\\n        string descriptionHash;\\n    }\\n\\n    // Only claims manager can make this call\\n    error OnlyClaimsManager();\\n    // Only registry owner\\n    error OnlyRegistryOwner();\\n    // Vault not started yet\\n    error VaultNotStartedYet();\\n    // First deposit must return at least MINIMAL_AMOUNT_OF_SHARES\\n    error AmountOfSharesMustBeMoreThanMinimalAmount();\\n    // Withdraw amount must be greater than zero\\n    error WithdrawMustBeGreaterThanZero();\\n    // Cannot mint burn or transfer 0 amount of shares\\n    error AmountCannotBeZero();\\n    // Cannot transfer shares to self\\n    error CannotTransferToSelf();\\n    // Cannot deposit to another user with withdraw request\\n    error CannotTransferToAnotherUserWithActiveWithdrawRequest();\\n    // Redeem amount cannot be more than maximum for user\\n    error RedeemMoreThanMax();\\n    // Deposit passed max slippage\\n    error DepositSlippageProtection();\\n    // Mint passed max slippage\\n    error MintSlippageProtection();\\n    // Withdraw passed max slippage\\n    error WithdrawSlippageProtection();\\n    // Redeem passed max slippage\\n    error RedeemSlippageProtection();\\n    // Cannot add the same reward controller more than once\\n    error DuplicatedRewardController();\\n    // Fee must be less than or equal to 2%\\n    error WithdrawalFeeTooBig();\\n    // System is in an emergency pause\\n    error SystemInEmergencyPause();\\n    // Only fee setter\\n    error OnlyFeeSetter();\\n    // Cannot unpasue deposits for a vault that was destroyed\\n    error CannotUnpauseDestroyedVault();\\n\\n    event AddRewardController(IRewardController indexed _newRewardController);\\n    event SetWithdrawalFee(uint256 _newFee);\\n    event VaultPayout(uint256 _amount);\\n    event SetDepositPause(bool _depositPause);\\n    event SetWithdrawPaused(bool _withdrawPaused);\\n    event VaultStarted();\\n    event VaultDestroyed();\\n    event SetVaultDescription(string _descriptionHash);\\n    event WithdrawRequest(\\n        address indexed _beneficiary,\\n        uint256 _withdrawEnableTime\\n    );\\n\\n    /**\\n    * @notice Initialize a vault token instance\\n    * @param _claimsManager The vault's claims manager\\n    * @param _params The vault token initialization parameters\\n    * @dev See {IHATVault-VaultInitParams} for more details\\n    * @dev Called when the vault token is created in {IHATVaultsRegistry-createVault}\\n    */\\n    function initialize(address _claimsManager, VaultInitParams calldata _params) external;\\n\\n    /**\\n    * @notice Adds a reward controller to the reward controllers list\\n    * @param _rewardController The reward controller to add\\n    */\\n    function addRewardController(IRewardController _rewardController) external;\\n\\n    /**\\n    * @notice Called by the vault's owner to disable all deposits to the vault\\n    * @param _depositPause Are deposits paused\\n    */\\n    function setDepositPause(bool _depositPause) external;\\n\\n    /**\\n    * @notice Called by the registry's fee setter to set the fee for \\n    * withdrawals from the vault.\\n    * @param _fee The new fee. Must be smaller than or equal to `MAX_WITHDRAWAL_FEE`\\n    */\\n    function setWithdrawalFee(uint256 _fee) external;\\n\\n    /**\\n    * @notice Make a payout out of the vault\\n    * @param _amount The amount to send out for the payout\\n    */\\n    function makePayout(uint256 _amount) external;\\n\\n    /**\\n    * @notice Called by the vault's claims manager to disable all withdrawals from the vault\\n    * @param _withdrawPaused Are withdraws paused\\n    */\\n    function setWithdrawPaused(bool _withdrawPaused) external;\\n\\n    /**\\n    * @notice Start the vault, deposits are disabled until the vault is first started\\n    */\\n    function startVault() external;\\n\\n\\n    /**\\n    * @notice Permanently disables deposits to the vault\\n    */\\n    function destroyVault() external;\\n\\n    /**\\n    * @notice Called by the registry's owner to change the description of the\\n    * vault in the Hats.finance UI\\n    * @param _descriptionHash the hash of the vault's description\\n    */\\n    function setVaultDescription(string calldata _descriptionHash) external;\\n    \\n    /** \\n    * @notice Returns the vault's version\\n    * @return The vault's version\\n    */\\n    function VERSION() external view returns(string calldata);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function registry() external view returns(IHATVaultsRegistry);\\n\\n    /** \\n    * @notice Returns the vault's registry\\n    * @return The registry's address\\n    */\\n    function claimsManager() external view returns(address);\\n\\n    /**\\n    * @notice Submit a request to withdraw funds from the vault.\\n    * The request will only be approved if there is no previous active\\n    * withdraw request.\\n    * The request will be pending for a period of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestPendingPeriod},\\n    * after which a withdraw will be possible for a duration of\\n    * {HATVaultsRegistry.generalParameters.withdrawRequestEnablePeriod}\\n    */\\n    function withdrawRequest() external;\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Redeem all of the user's shares in the vault for the respective amount\\n    * of underlying assets without calling the reward controller, meaning user renounces\\n    * their uncommited part of the reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param receiver Address of receiver of the funds \\n    */\\n    function emergencyWithdraw(address receiver) external returns (uint256 assets);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated rewards.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds \\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeem(uint256 shares, address receiver, address owner)\\n        external  \\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @dev See {IERC4626-deposit}.\\n    */\\n    function deposit(uint256 assets, address receiver) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault. Can only be called if the committee had\\n    * checked in and deposits are not paused, and the registry is not in an emergency pause.\\n    * Allows to specify minimum shares to be minted for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param assets Amount of vault's native token to deposit\\n    * @param minShares Minimum amount of shares to minted for the assets\\n    */\\n    function deposit(uint256 assets, address receiver, uint256 minShares) \\n        external\\n        returns (uint256);\\n\\n    /**\\n    * @dev Deposit funds to the vault based on the amount of shares to mint specified.\\n    * Can only be called if the committee had checked in and deposits are not paused,\\n    * and the registry is not in an emergency pause.\\n    * Allows to specify maximum assets to be deposited for slippage protection.\\n    * @param receiver Reciever of the shares from the deposit\\n    * @param shares Amount of vault's shares to mint\\n    * @param maxAssets Maximum amount of assets to deposit for the shares\\n    */\\n    function mint(uint256 shares, address receiver, uint256 maxAssets) \\n        external\\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault, without\\n    * transferring the accumulated HAT reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets, without transferring the accumulated reward.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external  \\n        returns (uint256);\\n\\n    /** \\n    * @notice Withdraw previously deposited funds from the vault and claim\\n    * the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify maximum shares to be burnt for slippage protection.\\n    * @param assets Amount of tokens to withdraw\\n    * @param receiver Address of receiver of the funds\\n    * @param owner Address of owner of the funds\\n    * @param maxShares Maximum amount of shares to burn for the assets\\n    * @dev See {IERC4626-withdraw}.\\n    */\\n    function withdrawAndClaim(uint256 assets, address receiver, address owner, uint256 maxShares)\\n        external \\n        returns (uint256 shares);\\n\\n    /** \\n    * @notice Redeem shares in the vault for the respective amount\\n    * of underlying assets and claim the HAT reward that the user has earned.\\n    * Can only be performed if a withdraw request has been previously\\n    * submitted, and the pending period had passed, and while the withdraw\\n    * enabled timeout had not passed. Withdrawals are not permitted during\\n    * safety periods or while there is an active claim for a bounty payout.\\n    * Allows to specify minimum assets to be received for slippage protection.\\n    * @param shares Amount of shares to redeem\\n    * @param receiver Address of receiver of the funds \\n    * @param owner Address of owner of the funds\\n    * @param minAssets Minimum amount of assets to receive for the shares\\n    * @dev See {IERC4626-redeem}.\\n    */\\n    function redeemAndClaim(uint256 shares, address receiver, address owner, uint256 minAssets)\\n        external \\n        returns (uint256 assets);\\n\\n    /** \\n    * @notice Returns the amount of shares to be burned to give the user the exact\\n    * amount of assets requested plus cover for the fee. Also returns the amount assets\\n    * to be paid as fee.\\n    * @return shares The amount of shares to be burned to get the requested amount of assets\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewWithdrawAndFee(uint256 assets) external view returns (uint256 shares, uint256 fee);\\n\\n\\n    /** \\n    * @notice Returns the amount of assets to be sent to the user for the exact\\n    * amount of shares to redeem. Also returns the amount assets to be paid as fee.\\n    * @return assets amount of assets to be sent in exchange for the amount of shares specified\\n    * @return fee The amount of assets that will be paid as fee\\n    */\\n    function previewRedeemAndFee(uint256 shares) external view returns (uint256 assets, uint256 fee);\\n}\\n\",\"keccak256\":\"0x98e04ef364f09fb7ec4c4cb4bcc46973a98dc742b3399e82a21a8aee02f6c1b1\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Disclaimer https://github.com/hats-finance/hats-contracts/blob/main/DISCLAIMER.md\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHATVault.sol\\\";\\nimport \\\"./IHATClaimsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title Interface for the Hats.finance Vault Registry\\n * @author hats.finance\\n * @notice The Hats.finance Vault Registry is used to deploy Hats.finance\\n * vaults and manage shared parameters.\\n *\\n * Hats.finance is a proactive bounty protocol for white hat hackers and\\n * security experts, where projects, community members, and stakeholders\\n * incentivize protocol security and responsible disclosure.\\n * Hats create scalable vaults using the project\\u2019s own token. The value of the\\n * bounty increases with the success of the token and project.\\n *\\n * The owner of the registry has the permission to set time limits and bounty\\n * parameters and change vaults' info, and to set the other registry roles -\\n * fee setter and arbitrator.\\n * The arbitrator can challenge submitted claims for bounty payouts made by\\n * vaults' committees, approve them with a different bounty percentage or\\n * dismiss them.\\n * The fee setter can set the fee on withdrawals on all vaults.\\n *\\n * This project is open-source and can be found at:\\n * https://github.com/hats-finance/hats-contracts\\n *\\n * @dev New hats.finance vaults should be created through a call to {createVault}\\n * so that they are linked to the registry\\n */\\ninterface IHATVaultsRegistry {\\n\\n    // a struct with parameters for all vaults\\n    struct GeneralParameters {\\n        // vesting duration for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingDuration;\\n        // vesting periods for the part of the bounty given to the hacker in HAT tokens\\n        uint32 hatVestingPeriods;\\n        // withdraw enable period. safetyPeriod starts when finished.\\n        uint32 withdrawPeriod;\\n        // withdraw disable period - time for the committee to gather and decide on actions,\\n        // withdrawals are not possible in this time. withdrawPeriod starts when finished.\\n        uint32 safetyPeriod;\\n        // period of time after withdrawRequestPendingPeriod where it is possible to withdraw\\n        // (after which withdrawals are not possible)\\n        uint32 withdrawRequestEnablePeriod;\\n        // period of time that has to pass after withdraw request until withdraw is possible\\n        uint32 withdrawRequestPendingPeriod;\\n        // period of time that has to pass after setting a pending max\\n        // bounty before it can be set as the new max bounty\\n        uint32 setMaxBountyDelay;\\n        // fee in ETH to be transferred with every logging of a claim\\n        uint256 claimFee;\\n    }\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the withdraw period to\\n     * be set is shorter than 1 hour\\n     */\\n    error WithdrawPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawSafetyPeriod} if the safety period to\\n     * be set is longer than 6 hours\\n     */\\n    error SafetyPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * pending period to be set is shorter than 3 months\\n     */\\n    error WithdrawRequestPendingPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is shorter than 6 hours\\n     */\\n    error WithdrawRequestEnabledPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setWithdrawRequestParams} if the withdraw request\\n     * enabled period to be set is longer than 100 days\\n     */\\n    error WithdrawRequestEnabledPeriodTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration to be\\n     * set is longer than 180 days\\n     */\\n    error HatVestingDurationTooLong();\\n\\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting periods to be\\n     * set is 0\\n     */\\n    error HatVestingPeriodsCannotBeZero();\\n    \\n    /**\\n     * @notice Raised on {setHatVestingParams} if the vesting duration is \\n     * smaller than the vesting periods\\n     */\\n    error HatVestingDurationSmallerThanPeriods();\\n\\n    /**\\n     * @notice Raised on {setMaxBountyDelay} if the max bounty to be set is\\n     * shorter than 2 days\\n     */\\n    error DelayTooShort();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount to swap is zero\\n     */\\n    error AmountToSwapIsZero();\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the swap was not successful\\n     */\\n    error SwapFailed();\\n    // Wrong amount received\\n\\n    /**\\n     * @notice Raised on {swapAndSend} if the amount that was recieved in\\n     * the swap was less than the minimum amount specified\\n     */\\n    error AmountSwappedLessThanMinimum();\\n\\n    /**\\n     * @notice Raised on {setDefaultHATBountySplit} if the split to be set is\\n     * greater than 20% (defined as 2000)\\n     */\\n    error TotalHatsSplitPercentageShouldBeUpToMaxHATSplit();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is shorter than 1 day\\n     */\\n    error ChallengePeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengePeriod} if the challenge period\\n     *  to be set is longer than 5 days\\n     */\\n    error ChallengePeriodTooLong();\\n        \\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is shorter than 1 day\\n     */\\n    error ChallengeTimeOutPeriodTooShort();\\n\\n    /**\\n     * @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\\n     * timeout period to be set is longer than 125 days\\n     */\\n    error ChallengeTimeOutPeriodTooLong();\\n    \\n    /**\\n     * @notice Raised on {LogClaim} if the transaction was not sent with the\\n     * amount of ETH specified as {generalParameters.claimFee}\\n     */\\n    error NotEnoughFeePaid();\\n\\n    /**\\n     * @notice Raised on {LogClaim} if the transfer of the claim fee failed\\n     */\\n    error ClaimFeeTransferFailed();\\n\\n    /**\\n     * @notice Emitted on deployment of the registry\\n     * @param _hatVaultImplementation The HATVault implementation address\\n     * @param _hatClaimsManagerImplementation The HATClaimsManager implementation address\\n     * @param _HAT The HAT token address\\n     * @param _tokenLockFactory The token lock factory address\\n     * @param _generalParameters The registry's general parameters\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     * @param _hatGovernance The registry's governance\\n     * @param _defaultChallengePeriod The new default challenge period\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     */\\n    event RegistryCreated(\\n        address _hatVaultImplementation,\\n        address _hatClaimsManagerImplementation,\\n        address _HAT,\\n        address _tokenLockFactory,\\n        GeneralParameters _generalParameters,\\n        uint256 _bountyGovernanceHAT,\\n        uint256 _bountyHackerHATVested,\\n        address _hatGovernance,\\n        address _defaultArbitrator,\\n        uint256 _defaultChallengePeriod,\\n        uint256 _defaultChallengeTimeOutPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a claim is logged\\n     * @param _claimer The address of the claimer\\n     * @param _descriptionHash - a hash of an ipfs encrypted file which\\n     * describes the claim.\\n     */\\n    event LogClaim(address indexed _claimer, string _descriptionHash);\\n\\n    /**\\n     * @notice Emitted when a new fee setter is set\\n     * @param _feeSetter The address of the new fee setter\\n     */\\n    event SetFeeSetter(address indexed _feeSetter);\\n\\n    /**\\n     * @notice Emitted when new withdraw request time limits are set\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    event SetWithdrawRequestParams(\\n        uint256 _withdrawRequestPendingPeriod,\\n        uint256 _withdrawRequestEnablePeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when a new fee for logging a claim for a bounty is set\\n     * @param _fee Claim fee in ETH to be transferred on any call of {logClaim}\\n     */\\n    event SetClaimFee(uint256 _fee);\\n\\n    /**\\n     * @notice Emitted when new durations are set for withdraw period and\\n     * safety period\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled\\n     */\\n    event SetWithdrawSafetyPeriod(\\n        uint256 _withdrawPeriod,\\n        uint256 _safetyPeriod\\n    );\\n\\n    /**\\n     * @notice Emitted when new HAT vesting parameters are set\\n     * @param _duration The duration of the vesting period\\n     * @param _periods The number of vesting periods\\n     */\\n    event SetHatVestingParams(uint256 _duration, uint256 _periods);\\n\\n    /**\\n     * @notice Emitted when a new timelock delay for setting the\\n     * max bounty is set\\n     * @param _delay The time period for the delay\\n     */\\n    event SetMaxBountyDelay(uint256 _delay);\\n\\n    /**\\n     * @notice Emitted when the UI visibility of a vault is changed\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     */\\n    event SetVaultVisibility(address indexed _vault, bool indexed _visible);\\n\\n    /** @dev Emitted when a new vault is created\\n     * @param _vault The address of the vault to add to the registry\\n     * @param _claimsManager The address of the vault's claims manager\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _claimsManagerParams The vault's claims manager initialization parameters\\n     */\\n    event VaultCreated(\\n        address indexed _vault,\\n        address indexed _claimsManager,\\n        IHATVault.VaultInitParams _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams _claimsManagerParams\\n    );\\n    \\n    /** @notice Emitted when a swap of vault tokens to HAT tokens is done and\\n     * the HATS tokens are sent to beneficiary through vesting contract\\n     * @param _beneficiary Address of beneficiary\\n     * @param _amountSwapped Amount of vault's native tokens that was swapped\\n     * @param _amountSent Amount of HAT tokens sent to beneficiary\\n     * @param _tokenLock Address of the token lock contract that holds the HAT\\n     * tokens (address(0) if no token lock is used)\\n     */\\n    event SwapAndSend(\\n        address indexed _beneficiary,\\n        uint256 _amountSwapped,\\n        uint256 _amountSent,\\n        address indexed _tokenLock\\n    );\\n\\n    /**\\n     * @notice Emitted when a new default HAT bounty split is set\\n     * @param _defaultBountyGovernanceHAT The new default HAT bounty part sent to governance\\n     * @param _defaultBountyHackerHATVested The new default HAT bounty part vseted for the hacker\\n     */\\n    event SetDefaultHATBountySplit(uint256 _defaultBountyGovernanceHAT, uint256 _defaultBountyHackerHATVested);\\n\\n    /**\\n     * @notice Emitted when a new default arbitrator is set\\n     * @param _defaultArbitrator The address of the new arbitrator\\n     */\\n    event SetDefaultArbitrator(address indexed _defaultArbitrator);\\n\\n    /**\\n     * @notice Emitted when a new default challenge period is set\\n     * @param _defaultChallengePeriod The new default challenge period\\n     */ \\n    event SetDefaultChallengePeriod(uint256 _defaultChallengePeriod);\\n\\n    /**\\n     * @notice Emitted when a new default challenge timeout period is set\\n     * @param _defaultChallengeTimeOutPeriod The new default challenge timeout\\n     * period\\n     */\\n    event SetDefaultChallengeTimeOutPeriod(uint256 _defaultChallengeTimeOutPeriod);\\n\\n    /** @notice Emitted when the system is put into emergency pause/unpause\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    event SetEmergencyPaused(bool _isEmergencyPaused);\\n\\n    /**\\n     * @notice Emitted when a new swap token is set\\n     * @param _swapToken The new swap token address\\n     */\\n    event SetSwapToken(address indexed _swapToken);\\n\\n    /**\\n     * @notice Emitted when a new HATVault implementation is set\\n     * @param _hatVaultImplementation The address of the new HATVault implementation\\n     */\\n    event SetHATVaultImplementation(address indexed _hatVaultImplementation);\\n\\n    /**\\n     * @notice Emitted when a new HATClaimsManager implementation is set\\n     * @param _hatClaimsManagerImplementation The address of the new HATClaimsManager implementation\\n     */\\n    event SetHATClaimsManagerImplementation(address indexed _hatClaimsManagerImplementation);\\n\\n    /**\\n     * @notice Called by governance to pause/unpause the system in case of an\\n     * emergency\\n     * @param _isEmergencyPaused Is the system in an emergency pause\\n     */\\n    function setEmergencyPaused(bool _isEmergencyPaused) external;\\n\\n    /**\\n     * @notice Called by governance to set a new swap token\\n     * @param _swapToken the new swap token address\\n     */\\n    function setSwapToken(address _swapToken) external;\\n\\n    /**\\n     * @notice Called by governance to set a new HATVault and HATVault implementation to be\\n     * used by the registry for creating new vaults\\n     * @param _hatVaultImplementation The address of the HATVault implementation\\n     * @param _hatClaimsManagerImplementation The address of the HATClaimsManager implementation\\n     */\\n    function setVaultImplementations(address _hatVaultImplementation, address _hatClaimsManagerImplementation) external;\\n\\n    /**\\n     * @notice Emit an event that includes the given _descriptionHash\\n     * This can be used by the claimer as evidence that she had access to the\\n     * information at the time of the call\\n     * if a {generalParameters.claimFee} > 0, the caller must send that amount\\n     * of ETH for the claim to succeed\\n     * @param _descriptionHash - a hash of an IPFS encrypted file which \\n     * describes the claim.\\n     */\\n    function logClaim(string calldata _descriptionHash) external payable;\\n\\n    /**\\n     * @notice Called by governance to set the default percentage of each claim bounty\\n     * that will be swapped for hats and sent to the governance or vested for the hacker\\n     * @param _defaultBountyGovernanceHAT The HAT bounty for governance\\n     * @param _defaultBountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function setDefaultHATBountySplit(\\n        uint16 _defaultBountyGovernanceHAT,\\n        uint16 _defaultBountyHackerHATVested\\n    ) \\n        external;\\n\\n    /** \\n     * @dev Check that a given hats bounty split is legal, meaning that:\\n     *   Each entry is a number between 0 and less than `MAX_HAT_SPLIT`.\\n     *   Total splits should be less than `MAX_HAT_SPLIT`.\\n     * function will revert in case the bounty split is not legal.\\n     * @param _bountyGovernanceHAT The HAT bounty for governance\\n     * @param _bountyHackerHATVested The HAT bounty vested for the hacker\\n     */\\n    function validateHATSplit(uint16 _bountyGovernanceHAT, uint16 _bountyHackerHATVested)\\n         external\\n         pure;\\n\\n    /**\\n     * @notice Called by governance to set the default arbitrator.\\n     * @param _defaultArbitrator The default arbitrator address\\n     */\\n    function setDefaultArbitrator(address _defaultArbitrator) external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge period\\n     * @param _defaultChallengePeriod The default challenge period\\n     */\\n    function setDefaultChallengePeriod(uint32 _defaultChallengePeriod) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the default challenge timeout\\n     * @param _defaultChallengeTimeOutPeriod The Default challenge timeout\\n     */\\n    function setDefaultChallengeTimeOutPeriod(\\n        uint32 _defaultChallengeTimeOutPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Check that the given challenge period is legal, meaning that it\\n     * is greater than 1 day and less than 5 days.\\n     * @param _challengePeriod The challenge period to check\\n     */\\n    function validateChallengePeriod(uint32 _challengePeriod) external pure;\\n\\n    /**\\n     * @notice Check that the given challenge timeout period is legal, meaning\\n     * that it is greater than 2 days and less than 125 days.\\n     * @param _challengeTimeOutPeriod The challenge timeout period to check\\n     */\\n    function validateChallengeTimeOutPeriod(uint32 _challengeTimeOutPeriod) external pure;\\n   \\n    /**\\n     * @notice Called by governance to set the fee setter role\\n     * @param _feeSetter Address of new fee setter\\n     */\\n    function setFeeSetter(address _feeSetter) external;\\n\\n    /**\\n     * @notice Called by governance to set time limits for withdraw requests\\n     * @param _withdrawRequestPendingPeriod Time period where the withdraw\\n     * request is pending\\n     * @param _withdrawRequestEnablePeriod Time period after the peding period\\n     * has ended during which withdrawal is enabled\\n     */\\n    function setWithdrawRequestParams(\\n        uint32 _withdrawRequestPendingPeriod,\\n        uint32  _withdrawRequestEnablePeriod\\n    )\\n        external;\\n\\n    /**\\n     * @notice Called by governance to set the fee for logging a claim for a\\n     * bounty in any vault.\\n     * @param _fee Claim fee in ETH to be transferred on any call of\\n     * {logClaim}\\n     */\\n    function setClaimFee(uint256 _fee) external;\\n\\n    /**\\n     * @notice Called by governance to set the withdraw period and safety\\n     * period, which are always interchanging.\\n     * The safety period is time that the committee can submit claims for \\n     * bounty payouts, and during which withdrawals are disabled and the\\n     * bounty split cannot be changed.\\n     * @param _withdrawPeriod Amount of time during which withdrawals are\\n     * enabled, and the bounty split can be changed by the governance. Must be\\n     * at least 1 hour.\\n     * @param _safetyPeriod Amount of time during which claims for bounties \\n     * can be submitted and withdrawals are disabled. Must be at most 6 hours.\\n     */\\n    function setWithdrawSafetyPeriod(\\n        uint32 _withdrawPeriod,\\n        uint32 _safetyPeriod\\n    ) \\n        external;\\n\\n    /**\\n     * @notice Called by governance to set vesting params for rewarding hackers\\n     * with rewardToken, for all vaults\\n     * @param _duration Duration of the vesting period. Must be less than 180\\n     * days.\\n     * @param _periods The number of vesting periods. Must be more than 0 and \\n     * less then the vesting duration.\\n     */\\n    function setHatVestingParams(uint32 _duration, uint32 _periods) external;\\n\\n    /**\\n     * @notice Called by governance to set the timelock delay for setting the\\n     * max bounty (the time between setPendingMaxBounty and setMaxBounty)\\n     * @param _delay The time period for the delay. Must be at least 2 days.\\n     */\\n    function setMaxBountyDelay(uint32 _delay) external;\\n\\n    /**\\n     * @notice Create a new vault\\n     * NOTE: Vaults should not use tokens which do not guarantee that the \\n     * amount specified is the amount transferred\\n     * @param _vaultParams The vault initialization parameters\\n     * @param _vaultParams The vault token initialization parameters\\n     * @return vault The address of the new vault\\n     */\\n    function createVault(\\n        IHATVault.VaultInitParams calldata _vaultParams,\\n        IHATClaimsManager.ClaimsManagerInitParams calldata _claimsManagerParams\\n    ) external returns(address vault, address vaultClaimsManager);\\n\\n    /**\\n     * @notice Called by governance to change the UI visibility of a vault\\n     * @param _vault The address of the vault to update\\n     * @param _visible Is this vault visible in the UI\\n     * This parameter can be used by the UI to include or exclude the vault\\n     */\\n    function setVaultVisibility(address _vault, bool _visible) external;\\n\\n    /**\\n     * @notice Transfer the part of the bounty that is supposed to be swapped\\n     * into HAT tokens from the HATVault to the registry, and keep track of\\n     * the amounts to be swapped and sent/burnt in a later transaction\\n     * @param _asset The vault's native token\\n     * @param _hacker The address of the beneficiary of the bounty\\n     * @param _hackersHatReward The amount of the vault's native token to be\\n     * swapped to HAT tokens and sent to the hacker via a vesting contract\\n     * @param _governanceHatReward The amount of the vault's native token to\\n     * be swapped to HAT tokens and sent to governance\\n     */\\n    function addTokensToSwap(\\n        IERC20 _asset,\\n        address _hacker,\\n        uint256 _hackersHatReward,\\n        uint256 _governanceHatReward\\n    ) external;\\n\\n    /**\\n     * @notice Called by governance to swap the given asset to HAT tokens and \\n     * distribute the HAT tokens: Send to governance their share and send to\\n     * beneficiaries their share through a vesting contract.\\n     * @param _asset The address of the token to be swapped to HAT tokens\\n     * @param _beneficiaries Addresses of beneficiaries\\n     * @param _amountOutMinimum Minimum amount of HAT tokens at swap\\n     * @param _routingContract Routing contract to call for the swap\\n     * @param _routingPayload Payload to send to the _routingContract for the\\n     * swap\\n     */\\n    function swapAndSend(\\n        address _asset,\\n        address[] calldata _beneficiaries,\\n        uint256 _amountOutMinimum,\\n        address _routingContract,\\n        bytes calldata _routingPayload\\n    ) external;\\n  \\n    /**\\n     * @notice Returns the withdraw enable period for all vaults. The safety\\n     * period starts when finished.\\n     * @return Withdraw enable period for all vaults\\n     */\\n    function getWithdrawPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw disable period - time for the committee to\\n     * gather and decide on actions, withdrawals are not possible in this\\n     * time. The withdraw period starts when finished.\\n     * @return Safety period for all vaults\\n     */\\n    function getSafetyPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request enable period for all vaults -\\n     * period of time after withdrawRequestPendingPeriod where it is possible\\n     * to withdraw, and after which withdrawals are not possible.\\n     * @return Withdraw request enable period for all vaults\\n     */\\n    function getWithdrawRequestEnablePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the withdraw request pending period for all vaults -\\n     * period of time that has to pass after withdraw request until withdraw\\n     * is possible\\n     * @return Withdraw request pending period for all vaults\\n     */\\n    function getWithdrawRequestPendingPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the set max bounty delay for all vaults - period of\\n     * time that has to pass after setting a pending max bounty before it can\\n     * be set as the new max bounty\\n     * @return Set max bounty delay for all vaults\\n     */\\n    function getSetMaxBountyDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the number of vaults that have been previously created\\n     * @return The number of vaults in the registry\\n     */\\n    function getNumberOfVaults() external view returns(uint256);\\n\\n    /**\\n     * @notice Get the fee setter address\\n     * @return The address of the fee setter\\n     */\\n    function feeSetter() external view returns(address);\\n\\n    /**\\n     * @notice Get whether the system is in an emergency pause\\n     * @return Whether the system is in an emergency pause\\n     */\\n    function isEmergencyPaused() external view returns(bool);\\n\\n    /**\\n     * @notice Get the owner address\\n     * @return The address of the owner\\n     */\\n    function owner() external view returns(address);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to governance\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to governance\\n     */\\n    function defaultBountyGovernanceHAT() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     * @return The default percentage of the total bounty to be swapped to HATs and sent to the hacker via vesting contract\\n     */\\n    function defaultBountyHackerHATVested() external view returns(uint16);\\n\\n    /**\\n     * @notice Get the default arbitrator address\\n     * @return The default arbitrator address\\n     */\\n    function defaultArbitrator() external view returns(address);\\n\\n    /**\\n     * @notice Get the default challenge period\\n     * @return The default challenge period\\n     */\\n    function defaultChallengePeriod() external view returns(uint32);\\n\\n    /**\\n     * @notice Get the default challenge time out period\\n     * @return The default challenge time out period\\n     */\\n    function defaultChallengeTimeOutPeriod() external view returns(uint32);\\n}\\n\",\"keccak256\":\"0x71f2cbbf2b35c973777713f5cf4680ecf9af466db56c1c4ca2bf08b97b55e882\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IRewardController {\\n    \\n    error EpochLengthZero();\\n    // Not enough rewards to transfer to user\\n    error NotEnoughRewardsToTransferToUser();\\n\\n    event RewardControllerCreated(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startBlock,\\n        uint256 _epochLength,\\n        uint256[24] _epochRewardPerBlock\\n    );\\n    event SetEpochRewardPerBlock(uint256[24] _epochRewardPerBlock);\\n    event SetAllocPoint(address indexed _vault, uint256 _prevAllocPoint, uint256 _allocPoint);\\n    event VaultUpdated(address indexed _vault, uint256 _rewardPerShare, uint256 _lastProcessedVaultUpdate);\\n    event UserBalanceCommitted(address indexed _vault, address indexed _user, uint256 _unclaimedReward, uint256 _rewardDebt);\\n    event ClaimReward(address indexed _vault, address indexed _user, uint256 _amount);\\n\\n    /**\\n     * @notice Initializes the reward controller\\n     * @param _rewardToken The address of the ERC20 token to be distributed as rewards\\n     * @param _governance The hats governance address, to be given ownership of the reward controller\\n     * @param _startRewardingBlock The block number from which to start rewarding\\n     * @param _epochLength The length of a rewarding epoch\\n     * @param _epochRewardPerBlock The reward per block for each of the 24 epochs\\n     */\\n    function initialize(\\n        address _rewardToken,\\n        address _governance,\\n        uint256 _startRewardingBlock,\\n        uint256 _epochLength,\\n        uint256[24] calldata _epochRewardPerBlock\\n    ) external;\\n\\n    /**\\n     * @notice Called by the owner to set the allocation points for a vault, meaning the\\n     * vault's relative share of the total rewards\\n     * @param _vault The address of the vault\\n     * @param _allocPoint The allocation points for the vault\\n     */\\n    function setAllocPoint(address _vault, uint256 _allocPoint) external;\\n\\n    /**\\n    * @notice Update the vault's reward per share, not more then once per block\\n    * @param _vault The vault's address\\n    */\\n    function updateVault(address _vault) external;\\n\\n    /**\\n    * @notice Called by the owner to set reward per epoch\\n    * Reward can only be set for epochs which have not yet started\\n    * @param _epochRewardPerBlock reward per block for each epoch\\n    */\\n    function setEpochRewardPerBlock(uint256[24] calldata _epochRewardPerBlock) external;\\n\\n    /**\\n    * @notice Called by the vault to update a user claimable reward after deposit or withdraw.\\n    * This call should never revert.\\n    * @param _user The user address to updare rewards for\\n    * @param _sharesChange The user of shared the user deposited or withdrew\\n    * @param _isDeposit Whether user deposited or withdrew\\n    */\\n    function commitUserBalance(address _user, uint256 _sharesChange, bool _isDeposit) external;\\n    /**\\n    * @notice Transfer to the specified user their pending share of rewards.\\n    * @param _vault The vault address\\n    * @param _user The user address to claim for\\n    */\\n    function claimReward(address _vault, address _user) external;\\n\\n    /**\\n    * @notice Calculate rewards for a vault by iterating over the history of totalAllocPoints updates,\\n    * and sum up all rewards periods from vault.lastRewardBlock until current block number.\\n    * @param _vault The vault address\\n    * @param _fromBlock The block from which to start calculation\\n    * @return reward The amount of rewards for the vault\\n    */\\n    function getVaultReward(address _vault, uint256 _fromBlock) external view returns(uint256 reward);\\n\\n    /**\\n    * @notice Calculate the amount of rewards a user can claim for having contributed to a specific vault\\n    * @param _vault The vault address\\n    * @param _user The user for which the reward is calculated\\n    */\\n    function getPendingReward(address _vault, address _user) external view returns (uint256);\\n\\n    /**\\n    * @notice Called by the owner to transfer any tokens held in this contract to the owner\\n    * @param _token The token to sweep\\n    * @param _amount The amount of token to sweep\\n    */\\n    function sweepToken(IERC20Upgradeable _token, uint256 _amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6eceb6516497db7ea79c8f571b03359ec1e53489222c9fffd60aa2f4496e0d23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200010757601f620029e038819003918201601f19168301916001600160401b038311848410176200010c5780849260c094604052833981010312620001075780516001600160a01b039190828116908190036200010757602082015190838216809203620001075760408301519260608101519260a06080830151920151926000549060018060a01b0319913383821617600055604051983391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060008ba38160015416176001556003541617600355836005558260045560065560075511620000f8576040516128bd9081620001238239f35b6332935b7f60e21b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918262971a3014611ebd5750816319fe326114611e5e578163256f184914611bdb5781633912f71f14611bbd5781633aea2a2114611b765781633ff699d214611b5757816343ccbfd914611b2e57816348fd4fe614611ac4578163658c652f14611930578163664f1fd5146118ef578163715018a614611892578163769f271f146118515781637a302103146117775781637c88c2761461156257816380468b01146112c357816381b53ed2146111d757816384f4ef4714610f5457816388fca20614610d675781638b4cac7914610d485781638da5cb5b14610d20578163962665e014610ace578163abf15bb314610a3a578163ae28faed14610827578163c76d9db9146107e6578163c9cab09d146106ba578163cb6ec2c514610674578163de0759ae14610655578163e8352e57146103c6578163ecacc8ad14610275578163f2fde38b146101a4575063fc0c546a1461017957600080fd5b346101a057816003193601126101a05760035490516001600160a01b039091168152602090f35b5080fd5b905034610271576020366003190112610271576101bf611ee2565b6101c76121b2565b6001600160a01b0390811691821561021f575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b8383346101a0576102853661212a565b6001549093919291906001600160a01b0390811633036103b6578116855163c1dbca6360e01b81526101a09081818b81865afa9182156103ac57899261037f575b50508381510361036f5763ffffffff908160a0820151161561035f57808261014061030282608061030c96015116836101208601511690612356565b9201511690612356565b1642101561034f578652600c602052848620828752602052600185872001541561033f5761033c94959650612686565b51f35b8451635398628560e01b81528790fd5b85516341524ecf60e11b81528890fd5b875163b442c7dd60e01b81528a90fd5b8651630b5ace7b60e01b81528990fd5b61039e9250803d106103a5575b6103968183611fee565b81019061223c565b89806102c6565b503d61038c565b88513d8b823e3d90fd5b8551634ff6d1b960e01b81528890fd5b905034610271576080366003190112610271576103e1611ee2565b90602435906044356064356001600160401b038111610651576104079036908401611f28565b9490918354811061064157865163c1dbca6360e01b81526001600160a01b0392831694906101a090818184818a5afa918215610637578b9261061a575b50508681510361060b579089913383526104ad84602096600888528c86208a60005288528c6000208b875288528c862061047f838254612333565b9055898652600b88528c86208b875288528c862061049e838254612333565b9055600354163090339061238f565b868352600b8552898320888452855289832054600554111561050e575b5050506105087f06061ca74af8f41de1aa5dc18dfde024a2dd5593e616ba696b142fbc9fcbce0e93888051948594855284015233978984019161236e565b0390a451f35b60a0015163ffffffff908116806105a0575050853b156101a05788516304165db160e01b81529081018790528181602481838a5af180156105965761057e575b50506105087f06061ca74af8f41de1aa5dc18dfde024a2dd5593e616ba696b142fbc9fcbce0e935b9389916104ca565b61058790611fc0565b61059257873861054e565b8780fd5b89513d84823e3d90fd5b620151809192935095939495018181116105f6571642116105e85750906105087f06061ca74af8f41de1aa5dc18dfde024a2dd5593e616ba696b142fbc9fcbce0e9392610576565b875163236004e360e01b8152fd5b601183634e487b7160e01b6000525260246000fd5b508751630b5ace7b60e01b8152fd5b6106309250803d106103a5576103968183611fee565b3880610444565b8a513d8d823e3d90fd5b86516321359a1f60e01b81528490fd5b8680fd5b5050346101a057816003193601126101a0576020906005549051908152f35b5050346101a05760ff8160209361068a366120f5565b9160018060a01b038091168452600988528484209116600052865282600020908252855220541690519015158152f35b9050346102715781600319360112610271578035906024356001600160401b0381116107e2576106ed9036908301611f28565b600154919290916001600160a01b0390811633036107d357848752600e6020528587209161075987519361072085611fd3565b83815416855260018101549460208101958652606061074c60036002850154948d85019586520161200f565b9101525160075490612333565b42116107c557507f01e475b4671f9cd9579c5f3d1b885d5a889b640118aa6d11a3309f27bcd79fc09392916107a991868952600e60205261079b888a20612829565b6003541690519033906125bc565b6107bf855192839260208452602084019161236e565b0390a251f35b8651631e316d9160e31b8152fd5b508451634ff6d1b960e01b8152fd5b8480fd5b5050346101a057806003193601126101a05760209181906001600160a01b0361080d611ee2565b168152600b84528181206024358252845220549051908152f35b9050346102715761083736612170565b600154929493919290916001600160a01b039182163303610a2a57811693865163c1dbca6360e01b81526101a090818184818a5afa918215610a20578a92610a03575b5050868151036109f45763ffffffff908160a082015116156109e45780826101406103028260806108b696015116836101208601511690612356565b164210156109d657848852602091600c8352878920878a5283526001888a2001546109c757906109348992878452600a85528984208985528552898420600160ff19825416179055878452600c855289842089855285524260018b8620015560035416878452600b85528984208985528552898420549033906125bc565b853b156101a05786885191630b63ad4960e11b83528201528160248201528160448201528181606481838a5af180156109bd576109a9575b50506109a37f303427359b4093e7575cd536aefe303a93cc7a2cbe10f441aa8d7b04ec511c0293875193838594855284019161236e565b0390a351f35b6109b290611fc0565b61065157863861096c565b88513d84823e3d90fd5b5086516336ab81e160e11b8152fd5b86516341524ecf60e11b8152fd5b885163b442c7dd60e01b81528390fd5b508651630b5ace7b60e01b8152fd5b610a199250803d106103a5576103968183611fee565b388061087a565b89513d8c823e3d90fd5b8651634ff6d1b960e01b81528590fd5b9190503461027157602036600319011261027157610a56611ee2565b610a5e6121b2565b6001600160a01b03908116928315610ac057600254918216610ab257506001600160a01b031916821760025551907f1f718efa4efa61072ae86507aa2a33568fdb2fe31cf2ebe4f3787415e404fea68383a2f35b825163c4988b2560e01b8152fd5b825163208a9ae560e01b8152fd5b905034610271578160031936011261027157610ae8611ee2565b825163c1dbca6360e01b81526001600160a01b039182169360243593909290916101a090818185818a5afa918215610d16578892610cf9575b505084815103610ce95763ffffffff908160a08201511615610cd9578082610140610302826080610b5d96015116836101208601511690612356565b16421015610cca57848652602090600c825283872085885282526001848820015415610cba57858752600c8252838720858852825283872091845192610ba284611f8f565b805491838316855260018186019261ffff809560a01c168452015490878601918252898b52600d8152878b2090898c5252868a20541515600014610c8c575082600254163303610c7c579088949392915b511691511690863b15610c6e578451630b63ad4960e11b815292830186905260248301526044820152818160648183895af18015610c7257610c5a575b505051917fef0c29b1d0185518564555f3a75554bc9d13311b949e10a06c7649923f327a988484a3f35b610c6390611fc0565b610c6e578338610c30565b8380fd5b83513d84823e3d90fd5b855163058aa6bb60e11b81528590fd5b51600654610c9991612333565b4210610caa57908894939291610bf3565b8551636e58b17560e01b81528590fd5b8351635398628560e01b81528390fd5b5090516341524ecf60e11b8152fd5b845163b442c7dd60e01b81528490fd5b8351630b5ace7b60e01b81528390fd5b610d0f9250803d106103a5576103968183611fee565b3880610b21565b85513d8a823e3d90fd5b5050346101a057816003193601126101a057905490516001600160a01b039091168152602090f35b5050346101a057816003193601126101a0576020906006549051908152f35b905034610271578160031936011261027157610d81611ee2565b90602435913385526020600981528486209260018060a01b038093169384600052825285600020858852825260ff868820541615600014610f0157838752600a8252858720858852825260ff8688205416610ef357855163c1dbca6360e01b81526101a09081818481895afa9182156103ac578992610ed6575b5050858151149081610ea6575b50610e9857507f941e37775573a9ae126b7b966beab6a3099c5a019181127d8e9c850198a65d7b91610e816109a3925b3389526008815287892086600052815287600020878a52815287892054928391338b5260088152898b208860005281528960002090898c525289898120553390600354166125bc565b855133815260208101919091529081906040820190565b8551632432b86560e21b8152fd5b9050610ecd63ffffffff918261014061030282608085015116836101208601511690612356565b16421038610e08565b610eec9250803d106103a5576103968183611fee565b3880610dfb565b8551636e687ceb60e11b8152fd5b507f941e37775573a9ae126b7b966beab6a3099c5a019181127d8e9c850198a65d7b91610e816109a3923389526009815287892086600052815287600020878a52815287892060ff198154169055610e38565b9050346102715760a036600319011261027157610f6f611ee2565b602435926044356001600160a01b03818116949093918590036111d2576064359361ffff85168095036111d2576084356001600160401b0381116111ce57610fba9036908401611f28565b969092826001541633036111c057888a52602090600e8252868b2094875196610fe288611fd3565b85875416885261101d600188015497858a0198895261100e60036002830154928d8d019384520161200f565b60608b01525160075490612333565b42116111b0579183869594928b9998978f958f8752600e84528c872061104290612829565b16809d868d519e8f948593849263016b397d60e51b84528c8a8501526024840152604483016060905260648301906110799261236e565b03925af1998a1561117757839a611181575b508a3b156102715788516304165db160e01b81529081018a90528281602481838f5af180156111775789928c94928c92611158575b509261113099928792600196958351986110d98a611f8f565b8952808901958652838901964288528352600c8152838320918352522094511684549161ffff60a01b905160a01b169169ffffffffffffffffffff60b01b16171783555191015580600354169251169051916125bc565b51927f8c2ee8888250bc86846f1269244359d570e0caa8b0a523d556bc61a3192e09a28585a4f35b9093508294506111689150611fc0565b6101a0578991898992386110c0565b89513d85823e3d90fd5b9099508181813d83116111a9575b6111998183611fee565b810103126102715751983861108b565b503d61118f565b8851631e316d9160e31b81528390fd5b8551634ff6d1b960e01b8152fd5b8880fd5b600080fd5b9190503461027157602036600319011261027157813591828452600e60205281842082519161120583611fd3565b60018060a01b03908183541684526001830154926020850193845261123760036002830154928888019384520161200f565b60608601525180159081156112ac575b5061129e5750906112769291858752600e602052611266858820612829565b80600354169251169051916125bc565b51907f694d7ade44dfb438d00969d97c5b899c4966e015156501d1f22bfbaee1bfd8098383a2f35b84516318dc02ab60e21b8152fd5b6112ba915060075490612333565b42111538611247565b90503461027157602080600319360112610c6e576001600160401b0390823582811161155e576112f69036908501611f28565b93600f549360001980861461154b57908791600180970180600f558351878101913060601b835260348201526034815261132f81611f8f565b51902096600554948b85519661134488611fd3565b3388528988019081528b611369611360898b01924284526123e7565b98519889611fee565b8c8852368d8b0111610271578d836003948f808f918f838f01378c01015260608b01998a528d8152600e8d52209160018060a01b03809a51166bffffffffffffffffffffffff60a01b845416178355518583015551600282015501945190815194851161153857508b6113dc8654611f55565b89601f82116114ff575b50505087908c601f861160011461147457948093819361144c9896937f1f28a325674c33a0b4655a27cd6a6c755b5bcea979b61f73d072c26182d1cc7a9c9b9a9895611469575b50501b9260031b1c19161790555b60035416600554903090339061238f565b6109a360055491878051948594855284015233968884019161236e565b01519350388061142d565b9294939190601f1985168785528a8520945b8181106114ea57509185939161144c98967f1f28a325674c33a0b4655a27cd6a6c755b5bcea979b61f73d072c26182d1cc7a9c9b9a989694106114d2575b50505050811b01905561143b565b01519060f88460031b161c19169055388080806114c4565b82840151865594870194928b01928b01611486565b8288611526945220601f870160051c8101918b881061152e575b601f0160051c0190612812565b8b38896113e6565b9091508190611519565b634e487b7160e01b8d526041905260248cfd5b634e487b7160e01b895260118352602489fd5b8580fd5b838361156d36612170565b845163c1dbca6360e01b815292966001600160a01b0394909390851691906101a09081818781875afa9182156103ac57899261175a575b50508881510361174a5763ffffffff908160a0820151161561173a5780826101406103028260806115e096015116836101208601511690612356565b1642101561172a57818752602097600c89528688208189528952600187892001541561171a57828852600c895286882081895289526116286001888a20015460065490612333565b42101561170a57828852600d89528688208189528952868820546116fa5787988389989952600d81528888209082895252428888205587519581847f8b440ae469766a2d839459c0e49a4c9badc8409d164c58ae983fac7c33b10fa88a8aa36002541692833b15610592576116bc8795869485948b99632edc218f60e01b875286015260806024860152608485019161236e565b906044830152336064830152039134905af180156116ed576116dd57505051f35b6116e690611fc0565b6101a05751f35b50505051903d90823e3d90fd5b865163f1082a9360e01b81528590fd5b8651637c3e4d8560e11b81528590fd5b8651635398628560e01b81528590fd5b85516341524ecf60e11b81528490fd5b875163b442c7dd60e01b81528690fd5b8651630b5ace7b60e01b81528590fd5b6117709250803d106103a5576103968183611fee565b89806115a4565b8383346101a0576117873661212a565b6001549093919291906001600160a01b0390811633036103b6578116855163c1dbca6360e01b81526101a09081818b81865afa9182156103ac578992611834575b50508381510361036f5763ffffffff908160a0820151161561035f57808261014061030282608061180496015116836101208601511690612356565b1642101561034f578652600c602052848620828752602052600185872001541561033f5761033c9495965061272d565b61184a9250803d106103a5576103968183611fee565b89806117c8565b5050346101a05780602092611865366120f5565b9160018060a01b038091168452600887528484209116600052855282600020908252845220549051908152f35b5050346101a057816003193601126101a0576118ac6121b2565b600080546001600160a01b0319811682559151916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5050346101a057806003193601126101a05760209181906001600160a01b03611916611ee2565b168152600d84528181206024358252845220549051908152f35b90503461027157816003193601126102715761194a611ee2565b825163c1dbca6360e01b81526001600160a01b039182169360243593909290916101a090818185818a5afa918215610d16578892611aa7575b505084815103610ce95763ffffffff908160a08201511615610cd95780826101406103028260806119bf96015116836101208601511690612356565b16421015610cca57848652600c6020528286208487526020526001838720015415611a9857848652600d6020528286208487526020528286205415611a8957600254163303611a7b57833b156107e257815163d52d5ee760e01b8152908101839052848160248183885af18015611a7157611a5e575b5051917fb19fdfe5efa69ba182eb1933c4df29269c92f9c9cf9911e0037458a8810e03028484a3f35b611a6a90949194611fc0565b9238611a35565b82513d87823e3d90fd5b905163058aa6bb60e11b8152fd5b50905163043f80af60e11b8152fd5b509051635398628560e01b8152fd5b611abd9250803d106103a5576103968183611fee565b3880611983565b90503461027157602036600319011261027157918192358152600e6020522090611b2a60018060a01b0383541691600184015493611b0960036002830154920161200f565b918051958695865260208601528401526080606084015260808301906120b5565b0390f35b5050346101a057816003193601126101a05760015490516001600160a01b039091168152602090f35b5050346101a057816003193601126101a0576020906007549051908152f35b5050346101a057806003193601126101a05760209160ff9082906001600160a01b03611ba0611ee2565b168152600a85528181206024358252855220541690519015158152f35b90503461027157826003193601126102715760209250549051908152f35b90508234611e5b5760e0366003190112611e5b57611bf7611ee2565b9260243560443561ffff8116809103610c6e576001600160a01b03606435818116979088900361155e576001600160401b039760843589811161059257611c419036908a01611ef8565b60a4939193358b8111611e5757611c5b9036908c01611ef8565b92909160c4359c8d11611e5357611c768c809e369101611f28565b96909780600154163303611e43578b9c9d6101a082869e9d9e16809d519283809263c1dbca6360e01b82525afa908115611e37578f91611e16575b508c815103611e075763ffffffff908160a08201511615611df7578082610140610302826080611cec96015116836101208601511690612356565b16421015611de7578d9e60018e9f9e8e9f8e9f9e815260209e8f600c815283832091835252200154611dd95750611dbf938f8f948f93948f9a7f27821fc568a73daf6622ddb38a3edfbf21572a533c44b1553e83d1e6afd6a0659f9e9d9b8f908f6109a39f9d9a998a611dba98869f9c956001965197611d6b89611f8f565b8852808801948552828801954287528252600c8152828220908d8352522094511684549161ffff60a01b905160a01b169169ffffffffffffffffffff60b01b1617178355519101558484612686565b61272d565b89519586958652850152606089850152606084019161236e565b8e516336ab81e160e11b8152fd5b8c516341524ecf60e11b81528f90fd5b508f8e5163b442c7dd60e01b8152fd5b8f8e51630b5ace7b60e01b8152fd5b611e3191506101a03d6101a0116103a5576103968183611fee565b38611cb1565b8f8f51903d90823e3d90fd5b8b51634ff6d1b960e01b81528e90fd5b8a80fd5b8980fd5b80fd5b5050346101a057806003193601126101a0576060916001600160a01b039190819083611e88611ee2565b168152600c6020528181206024358252602052209061ffff60018354930154928251948116855260a01c166020840152820152f35b8490346101a057816003193601126101a0576002546001600160a01b03168152602090f35b600435906001600160a01b03821682036111d257565b9181601f840112156111d2578235916001600160401b0383116111d2576020808501948460051b0101116111d257565b9181601f840112156111d2578235916001600160401b0383116111d257602083818601950101116111d257565b90600182811c92168015611f85575b6020831014611f6f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611f64565b606081019081106001600160401b03821117611faa57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111611faa57604052565b608081019081106001600160401b03821117611faa57604052565b90601f801991011681019081106001600160401b03821117611faa57604052565b906040519182600082549261202384611f55565b908184526001948581169081600014612092575060011461204f575b505061204d92500383611fee565b565b9093915060005260209081600020936000915b81831061207a57505061204d9350820101388061203f565b85548884018501529485019487945091830191612062565b91505061204d94506020925060ff191682840152151560051b820101388061203f565b919082519283825260005b8481106120e1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016120c0565b60609060031901126111d2576001600160a01b039060043582811681036111d2579160243590811681036111d2579060443590565b60606003198201126111d2576004356001600160a01b03811681036111d2579160243591604435906001600160401b0382116111d25761216c91600401611ef8565b9091565b60606003198201126111d2576004356001600160a01b03811681036111d2579160243591604435906001600160401b0382116111d25761216c91600401611f28565b6000546001600160a01b031633036121c657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160a01b03821682036111d257565b519063ffffffff821682036111d257565b519081151582036111d257565b80916101a092839103126111d2576040519182018281106001600160401b03821117611faa57604052805182526122756020820161220a565b6020830152604081015161ffff811681036111d257604083015261229b6060820161220a565b60608301526122ac6080820161221e565b60808301526122bd60a0820161221e565b60a083015260c081015160c083015260e081015160e08301526101006122e481830161220a565b908301526101206122f681830161221e565b9083015261014061230881830161221e565b9083015261016061231a81830161222f565b9083015261232c61018080920161222f565b9082015290565b9190820180921161234057565b634e487b7160e01b600052601160045260246000fd5b91909163ffffffff8080941691160191821161234057565b908060209392818452848401376000828201840152601f01601f1916010190565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b03841117611faa5761204d92604052612402565b6001600160401b038111611faa57601f01601f191660200190565b60018060a01b03169060405160408101908082106001600160401b03831117611faa57612491916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d1561251b573d91612476836123e7565b926124846040519485611fee565b83523d868885013e61251f565b908151806124a0575b50505050565b82849181010312611e5b5750816124b7910161222f565b156124c45780808061249a565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b919290156125815750815115612533575090565b3b1561253c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156125945750805190602001fd5b60405162461bcd60e51b8152602060048201529081906125b89060248301906120b5565b0390fd5b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261204d916125f8606483611fee565b612402565b919081101561260d5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036111d25790565b9091604060209282848201858352520192916000805b83821061265c57505050505090565b9091929394853560018060a01b03811680910361027157815283019483019392916001019061264d565b92909260005b8281106126d757506040516001600160a01b03909116927f0bcfb67e36c33d88f665f1a107d56fae2ed17840e54c7d334e41b40861a931009282916126d2919083612637565b0390a3565b6001600160a01b03806126f36126ee8487896125fd565b612623565b1660005260206009815260409182600020908516600052815281600020908760005252600020906001918260ff198254161790550161268c565b92909260009183835b868382106127945750506003546001547f10d56d90871b65282721a41db3c59a3f03f874e8ad078a387bf2b69bd9ae9b25956001600160a01b0395946126d29450926127869287169087166125bc565b604051938493169583612637565b9194600192600091866001600160a01b03806127b46126ee888b8e6125fd565b1685526008906127f26126ee888b6127ec602098878a5260409a878c8e209a16998a8e528b528b8d20908d528a528a8c205490612333565b9e6125fd565b16855282528284209084528152818320908a845252812055018490612736565b81811061281d575050565b60008155600101612812565b6003600091828155826001820155826002820155016128488154611f55565b8061285257505050565b601f8111600114612861575055565b8183526020832061287d91601f0160051c810190600101612812565b816020812091555556fea26469706673582212206862c1e5c502f8b4157007c8f287e031c7e1cd53b77061eb03486e1727659c1264736f6c63430008100033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c918262971a3014611ebd5750816319fe326114611e5e578163256f184914611bdb5781633912f71f14611bbd5781633aea2a2114611b765781633ff699d214611b5757816343ccbfd914611b2e57816348fd4fe614611ac4578163658c652f14611930578163664f1fd5146118ef578163715018a614611892578163769f271f146118515781637a302103146117775781637c88c2761461156257816380468b01146112c357816381b53ed2146111d757816384f4ef4714610f5457816388fca20614610d675781638b4cac7914610d485781638da5cb5b14610d20578163962665e014610ace578163abf15bb314610a3a578163ae28faed14610827578163c76d9db9146107e6578163c9cab09d146106ba578163cb6ec2c514610674578163de0759ae14610655578163e8352e57146103c6578163ecacc8ad14610275578163f2fde38b146101a4575063fc0c546a1461017957600080fd5b346101a057816003193601126101a05760035490516001600160a01b039091168152602090f35b5080fd5b905034610271576020366003190112610271576101bf611ee2565b6101c76121b2565b6001600160a01b0390811691821561021f575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b8383346101a0576102853661212a565b6001549093919291906001600160a01b0390811633036103b6578116855163c1dbca6360e01b81526101a09081818b81865afa9182156103ac57899261037f575b50508381510361036f5763ffffffff908160a0820151161561035f57808261014061030282608061030c96015116836101208601511690612356565b9201511690612356565b1642101561034f578652600c602052848620828752602052600185872001541561033f5761033c94959650612686565b51f35b8451635398628560e01b81528790fd5b85516341524ecf60e11b81528890fd5b875163b442c7dd60e01b81528a90fd5b8651630b5ace7b60e01b81528990fd5b61039e9250803d106103a5575b6103968183611fee565b81019061223c565b89806102c6565b503d61038c565b88513d8b823e3d90fd5b8551634ff6d1b960e01b81528890fd5b905034610271576080366003190112610271576103e1611ee2565b90602435906044356064356001600160401b038111610651576104079036908401611f28565b9490918354811061064157865163c1dbca6360e01b81526001600160a01b0392831694906101a090818184818a5afa918215610637578b9261061a575b50508681510361060b579089913383526104ad84602096600888528c86208a60005288528c6000208b875288528c862061047f838254612333565b9055898652600b88528c86208b875288528c862061049e838254612333565b9055600354163090339061238f565b868352600b8552898320888452855289832054600554111561050e575b5050506105087f06061ca74af8f41de1aa5dc18dfde024a2dd5593e616ba696b142fbc9fcbce0e93888051948594855284015233978984019161236e565b0390a451f35b60a0015163ffffffff908116806105a0575050853b156101a05788516304165db160e01b81529081018790528181602481838a5af180156105965761057e575b50506105087f06061ca74af8f41de1aa5dc18dfde024a2dd5593e616ba696b142fbc9fcbce0e935b9389916104ca565b61058790611fc0565b61059257873861054e565b8780fd5b89513d84823e3d90fd5b620151809192935095939495018181116105f6571642116105e85750906105087f06061ca74af8f41de1aa5dc18dfde024a2dd5593e616ba696b142fbc9fcbce0e9392610576565b875163236004e360e01b8152fd5b601183634e487b7160e01b6000525260246000fd5b508751630b5ace7b60e01b8152fd5b6106309250803d106103a5576103968183611fee565b3880610444565b8a513d8d823e3d90fd5b86516321359a1f60e01b81528490fd5b8680fd5b5050346101a057816003193601126101a0576020906005549051908152f35b5050346101a05760ff8160209361068a366120f5565b9160018060a01b038091168452600988528484209116600052865282600020908252855220541690519015158152f35b9050346102715781600319360112610271578035906024356001600160401b0381116107e2576106ed9036908301611f28565b600154919290916001600160a01b0390811633036107d357848752600e6020528587209161075987519361072085611fd3565b83815416855260018101549460208101958652606061074c60036002850154948d85019586520161200f565b9101525160075490612333565b42116107c557507f01e475b4671f9cd9579c5f3d1b885d5a889b640118aa6d11a3309f27bcd79fc09392916107a991868952600e60205261079b888a20612829565b6003541690519033906125bc565b6107bf855192839260208452602084019161236e565b0390a251f35b8651631e316d9160e31b8152fd5b508451634ff6d1b960e01b8152fd5b8480fd5b5050346101a057806003193601126101a05760209181906001600160a01b0361080d611ee2565b168152600b84528181206024358252845220549051908152f35b9050346102715761083736612170565b600154929493919290916001600160a01b039182163303610a2a57811693865163c1dbca6360e01b81526101a090818184818a5afa918215610a20578a92610a03575b5050868151036109f45763ffffffff908160a082015116156109e45780826101406103028260806108b696015116836101208601511690612356565b164210156109d657848852602091600c8352878920878a5283526001888a2001546109c757906109348992878452600a85528984208985528552898420600160ff19825416179055878452600c855289842089855285524260018b8620015560035416878452600b85528984208985528552898420549033906125bc565b853b156101a05786885191630b63ad4960e11b83528201528160248201528160448201528181606481838a5af180156109bd576109a9575b50506109a37f303427359b4093e7575cd536aefe303a93cc7a2cbe10f441aa8d7b04ec511c0293875193838594855284019161236e565b0390a351f35b6109b290611fc0565b61065157863861096c565b88513d84823e3d90fd5b5086516336ab81e160e11b8152fd5b86516341524ecf60e11b8152fd5b885163b442c7dd60e01b81528390fd5b508651630b5ace7b60e01b8152fd5b610a199250803d106103a5576103968183611fee565b388061087a565b89513d8c823e3d90fd5b8651634ff6d1b960e01b81528590fd5b9190503461027157602036600319011261027157610a56611ee2565b610a5e6121b2565b6001600160a01b03908116928315610ac057600254918216610ab257506001600160a01b031916821760025551907f1f718efa4efa61072ae86507aa2a33568fdb2fe31cf2ebe4f3787415e404fea68383a2f35b825163c4988b2560e01b8152fd5b825163208a9ae560e01b8152fd5b905034610271578160031936011261027157610ae8611ee2565b825163c1dbca6360e01b81526001600160a01b039182169360243593909290916101a090818185818a5afa918215610d16578892610cf9575b505084815103610ce95763ffffffff908160a08201511615610cd9578082610140610302826080610b5d96015116836101208601511690612356565b16421015610cca57848652602090600c825283872085885282526001848820015415610cba57858752600c8252838720858852825283872091845192610ba284611f8f565b805491838316855260018186019261ffff809560a01c168452015490878601918252898b52600d8152878b2090898c5252868a20541515600014610c8c575082600254163303610c7c579088949392915b511691511690863b15610c6e578451630b63ad4960e11b815292830186905260248301526044820152818160648183895af18015610c7257610c5a575b505051917fef0c29b1d0185518564555f3a75554bc9d13311b949e10a06c7649923f327a988484a3f35b610c6390611fc0565b610c6e578338610c30565b8380fd5b83513d84823e3d90fd5b855163058aa6bb60e11b81528590fd5b51600654610c9991612333565b4210610caa57908894939291610bf3565b8551636e58b17560e01b81528590fd5b8351635398628560e01b81528390fd5b5090516341524ecf60e11b8152fd5b845163b442c7dd60e01b81528490fd5b8351630b5ace7b60e01b81528390fd5b610d0f9250803d106103a5576103968183611fee565b3880610b21565b85513d8a823e3d90fd5b5050346101a057816003193601126101a057905490516001600160a01b039091168152602090f35b5050346101a057816003193601126101a0576020906006549051908152f35b905034610271578160031936011261027157610d81611ee2565b90602435913385526020600981528486209260018060a01b038093169384600052825285600020858852825260ff868820541615600014610f0157838752600a8252858720858852825260ff8688205416610ef357855163c1dbca6360e01b81526101a09081818481895afa9182156103ac578992610ed6575b5050858151149081610ea6575b50610e9857507f941e37775573a9ae126b7b966beab6a3099c5a019181127d8e9c850198a65d7b91610e816109a3925b3389526008815287892086600052815287600020878a52815287892054928391338b5260088152898b208860005281528960002090898c525289898120553390600354166125bc565b855133815260208101919091529081906040820190565b8551632432b86560e21b8152fd5b9050610ecd63ffffffff918261014061030282608085015116836101208601511690612356565b16421038610e08565b610eec9250803d106103a5576103968183611fee565b3880610dfb565b8551636e687ceb60e11b8152fd5b507f941e37775573a9ae126b7b966beab6a3099c5a019181127d8e9c850198a65d7b91610e816109a3923389526009815287892086600052815287600020878a52815287892060ff198154169055610e38565b9050346102715760a036600319011261027157610f6f611ee2565b602435926044356001600160a01b03818116949093918590036111d2576064359361ffff85168095036111d2576084356001600160401b0381116111ce57610fba9036908401611f28565b969092826001541633036111c057888a52602090600e8252868b2094875196610fe288611fd3565b85875416885261101d600188015497858a0198895261100e60036002830154928d8d019384520161200f565b60608b01525160075490612333565b42116111b0579183869594928b9998978f958f8752600e84528c872061104290612829565b16809d868d519e8f948593849263016b397d60e51b84528c8a8501526024840152604483016060905260648301906110799261236e565b03925af1998a1561117757839a611181575b508a3b156102715788516304165db160e01b81529081018a90528281602481838f5af180156111775789928c94928c92611158575b509261113099928792600196958351986110d98a611f8f565b8952808901958652838901964288528352600c8152838320918352522094511684549161ffff60a01b905160a01b169169ffffffffffffffffffff60b01b16171783555191015580600354169251169051916125bc565b51927f8c2ee8888250bc86846f1269244359d570e0caa8b0a523d556bc61a3192e09a28585a4f35b9093508294506111689150611fc0565b6101a0578991898992386110c0565b89513d85823e3d90fd5b9099508181813d83116111a9575b6111998183611fee565b810103126102715751983861108b565b503d61118f565b8851631e316d9160e31b81528390fd5b8551634ff6d1b960e01b8152fd5b8880fd5b600080fd5b9190503461027157602036600319011261027157813591828452600e60205281842082519161120583611fd3565b60018060a01b03908183541684526001830154926020850193845261123760036002830154928888019384520161200f565b60608601525180159081156112ac575b5061129e5750906112769291858752600e602052611266858820612829565b80600354169251169051916125bc565b51907f694d7ade44dfb438d00969d97c5b899c4966e015156501d1f22bfbaee1bfd8098383a2f35b84516318dc02ab60e21b8152fd5b6112ba915060075490612333565b42111538611247565b90503461027157602080600319360112610c6e576001600160401b0390823582811161155e576112f69036908501611f28565b93600f549360001980861461154b57908791600180970180600f558351878101913060601b835260348201526034815261132f81611f8f565b51902096600554948b85519661134488611fd3565b3388528988019081528b611369611360898b01924284526123e7565b98519889611fee565b8c8852368d8b0111610271578d836003948f808f918f838f01378c01015260608b01998a528d8152600e8d52209160018060a01b03809a51166bffffffffffffffffffffffff60a01b845416178355518583015551600282015501945190815194851161153857508b6113dc8654611f55565b89601f82116114ff575b50505087908c601f861160011461147457948093819361144c9896937f1f28a325674c33a0b4655a27cd6a6c755b5bcea979b61f73d072c26182d1cc7a9c9b9a9895611469575b50501b9260031b1c19161790555b60035416600554903090339061238f565b6109a360055491878051948594855284015233968884019161236e565b01519350388061142d565b9294939190601f1985168785528a8520945b8181106114ea57509185939161144c98967f1f28a325674c33a0b4655a27cd6a6c755b5bcea979b61f73d072c26182d1cc7a9c9b9a989694106114d2575b50505050811b01905561143b565b01519060f88460031b161c19169055388080806114c4565b82840151865594870194928b01928b01611486565b8288611526945220601f870160051c8101918b881061152e575b601f0160051c0190612812565b8b38896113e6565b9091508190611519565b634e487b7160e01b8d526041905260248cfd5b634e487b7160e01b895260118352602489fd5b8580fd5b838361156d36612170565b845163c1dbca6360e01b815292966001600160a01b0394909390851691906101a09081818781875afa9182156103ac57899261175a575b50508881510361174a5763ffffffff908160a0820151161561173a5780826101406103028260806115e096015116836101208601511690612356565b1642101561172a57818752602097600c89528688208189528952600187892001541561171a57828852600c895286882081895289526116286001888a20015460065490612333565b42101561170a57828852600d89528688208189528952868820546116fa5787988389989952600d81528888209082895252428888205587519581847f8b440ae469766a2d839459c0e49a4c9badc8409d164c58ae983fac7c33b10fa88a8aa36002541692833b15610592576116bc8795869485948b99632edc218f60e01b875286015260806024860152608485019161236e565b906044830152336064830152039134905af180156116ed576116dd57505051f35b6116e690611fc0565b6101a05751f35b50505051903d90823e3d90fd5b865163f1082a9360e01b81528590fd5b8651637c3e4d8560e11b81528590fd5b8651635398628560e01b81528590fd5b85516341524ecf60e11b81528490fd5b875163b442c7dd60e01b81528690fd5b8651630b5ace7b60e01b81528590fd5b6117709250803d106103a5576103968183611fee565b89806115a4565b8383346101a0576117873661212a565b6001549093919291906001600160a01b0390811633036103b6578116855163c1dbca6360e01b81526101a09081818b81865afa9182156103ac578992611834575b50508381510361036f5763ffffffff908160a0820151161561035f57808261014061030282608061180496015116836101208601511690612356565b1642101561034f578652600c602052848620828752602052600185872001541561033f5761033c9495965061272d565b61184a9250803d106103a5576103968183611fee565b89806117c8565b5050346101a05780602092611865366120f5565b9160018060a01b038091168452600887528484209116600052855282600020908252845220549051908152f35b5050346101a057816003193601126101a0576118ac6121b2565b600080546001600160a01b0319811682559151916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5050346101a057806003193601126101a05760209181906001600160a01b03611916611ee2565b168152600d84528181206024358252845220549051908152f35b90503461027157816003193601126102715761194a611ee2565b825163c1dbca6360e01b81526001600160a01b039182169360243593909290916101a090818185818a5afa918215610d16578892611aa7575b505084815103610ce95763ffffffff908160a08201511615610cd95780826101406103028260806119bf96015116836101208601511690612356565b16421015610cca57848652600c6020528286208487526020526001838720015415611a9857848652600d6020528286208487526020528286205415611a8957600254163303611a7b57833b156107e257815163d52d5ee760e01b8152908101839052848160248183885af18015611a7157611a5e575b5051917fb19fdfe5efa69ba182eb1933c4df29269c92f9c9cf9911e0037458a8810e03028484a3f35b611a6a90949194611fc0565b9238611a35565b82513d87823e3d90fd5b905163058aa6bb60e11b8152fd5b50905163043f80af60e11b8152fd5b509051635398628560e01b8152fd5b611abd9250803d106103a5576103968183611fee565b3880611983565b90503461027157602036600319011261027157918192358152600e6020522090611b2a60018060a01b0383541691600184015493611b0960036002830154920161200f565b918051958695865260208601528401526080606084015260808301906120b5565b0390f35b5050346101a057816003193601126101a05760015490516001600160a01b039091168152602090f35b5050346101a057816003193601126101a0576020906007549051908152f35b5050346101a057806003193601126101a05760209160ff9082906001600160a01b03611ba0611ee2565b168152600a85528181206024358252855220541690519015158152f35b90503461027157826003193601126102715760209250549051908152f35b90508234611e5b5760e0366003190112611e5b57611bf7611ee2565b9260243560443561ffff8116809103610c6e576001600160a01b03606435818116979088900361155e576001600160401b039760843589811161059257611c419036908a01611ef8565b60a4939193358b8111611e5757611c5b9036908c01611ef8565b92909160c4359c8d11611e5357611c768c809e369101611f28565b96909780600154163303611e43578b9c9d6101a082869e9d9e16809d519283809263c1dbca6360e01b82525afa908115611e37578f91611e16575b508c815103611e075763ffffffff908160a08201511615611df7578082610140610302826080611cec96015116836101208601511690612356565b16421015611de7578d9e60018e9f9e8e9f8e9f9e815260209e8f600c815283832091835252200154611dd95750611dbf938f8f948f93948f9a7f27821fc568a73daf6622ddb38a3edfbf21572a533c44b1553e83d1e6afd6a0659f9e9d9b8f908f6109a39f9d9a998a611dba98869f9c956001965197611d6b89611f8f565b8852808801948552828801954287528252600c8152828220908d8352522094511684549161ffff60a01b905160a01b169169ffffffffffffffffffff60b01b1617178355519101558484612686565b61272d565b89519586958652850152606089850152606084019161236e565b8e516336ab81e160e11b8152fd5b8c516341524ecf60e11b81528f90fd5b508f8e5163b442c7dd60e01b8152fd5b8f8e51630b5ace7b60e01b8152fd5b611e3191506101a03d6101a0116103a5576103968183611fee565b38611cb1565b8f8f51903d90823e3d90fd5b8b51634ff6d1b960e01b81528e90fd5b8a80fd5b8980fd5b80fd5b5050346101a057806003193601126101a0576060916001600160a01b039190819083611e88611ee2565b168152600c6020528181206024358252602052209061ffff60018354930154928251948116855260a01c166020840152820152f35b8490346101a057816003193601126101a0576002546001600160a01b03168152602090f35b600435906001600160a01b03821682036111d257565b9181601f840112156111d2578235916001600160401b0383116111d2576020808501948460051b0101116111d257565b9181601f840112156111d2578235916001600160401b0383116111d257602083818601950101116111d257565b90600182811c92168015611f85575b6020831014611f6f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611f64565b606081019081106001600160401b03821117611faa57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111611faa57604052565b608081019081106001600160401b03821117611faa57604052565b90601f801991011681019081106001600160401b03821117611faa57604052565b906040519182600082549261202384611f55565b908184526001948581169081600014612092575060011461204f575b505061204d92500383611fee565b565b9093915060005260209081600020936000915b81831061207a57505061204d9350820101388061203f565b85548884018501529485019487945091830191612062565b91505061204d94506020925060ff191682840152151560051b820101388061203f565b919082519283825260005b8481106120e1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016120c0565b60609060031901126111d2576001600160a01b039060043582811681036111d2579160243590811681036111d2579060443590565b60606003198201126111d2576004356001600160a01b03811681036111d2579160243591604435906001600160401b0382116111d25761216c91600401611ef8565b9091565b60606003198201126111d2576004356001600160a01b03811681036111d2579160243591604435906001600160401b0382116111d25761216c91600401611f28565b6000546001600160a01b031633036121c657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160a01b03821682036111d257565b519063ffffffff821682036111d257565b519081151582036111d257565b80916101a092839103126111d2576040519182018281106001600160401b03821117611faa57604052805182526122756020820161220a565b6020830152604081015161ffff811681036111d257604083015261229b6060820161220a565b60608301526122ac6080820161221e565b60808301526122bd60a0820161221e565b60a083015260c081015160c083015260e081015160e08301526101006122e481830161220a565b908301526101206122f681830161221e565b9083015261014061230881830161221e565b9083015261016061231a81830161222f565b9083015261232c61018080920161222f565b9082015290565b9190820180921161234057565b634e487b7160e01b600052601160045260246000fd5b91909163ffffffff8080941691160191821161234057565b908060209392818452848401376000828201840152601f01601f1916010190565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b03841117611faa5761204d92604052612402565b6001600160401b038111611faa57601f01601f191660200190565b60018060a01b03169060405160408101908082106001600160401b03831117611faa57612491916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d1561251b573d91612476836123e7565b926124846040519485611fee565b83523d868885013e61251f565b908151806124a0575b50505050565b82849181010312611e5b5750816124b7910161222f565b156124c45780808061249a565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b919290156125815750815115612533575090565b3b1561253c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156125945750805190602001fd5b60405162461bcd60e51b8152602060048201529081906125b89060248301906120b5565b0390fd5b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261204d916125f8606483611fee565b612402565b919081101561260d5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036111d25790565b9091604060209282848201858352520192916000805b83821061265c57505050505090565b9091929394853560018060a01b03811680910361027157815283019483019392916001019061264d565b92909260005b8281106126d757506040516001600160a01b03909116927f0bcfb67e36c33d88f665f1a107d56fae2ed17840e54c7d334e41b40861a931009282916126d2919083612637565b0390a3565b6001600160a01b03806126f36126ee8487896125fd565b612623565b1660005260206009815260409182600020908516600052815281600020908760005252600020906001918260ff198254161790550161268c565b92909260009183835b868382106127945750506003546001547f10d56d90871b65282721a41db3c59a3f03f874e8ad078a387bf2b69bd9ae9b25956001600160a01b0395946126d29450926127869287169087166125bc565b604051938493169583612637565b9194600192600091866001600160a01b03806127b46126ee888b8e6125fd565b1685526008906127f26126ee888b6127ec602098878a5260409a878c8e209a16998a8e528b528b8d20908d528a528a8c205490612333565b9e6125fd565b16855282528284209084528152818320908a845252812055018490612736565b81811061281d575050565b60008155600101612812565b6003600091828155826001820155826002820155016128488154611f55565b8061285257505050565b601f8111600114612861575055565b8183526020832061287d91601f0160051c810190600101612812565b816020812091555556fea26469706673582212206862c1e5c502f8b4157007c8f287e031c7e1cd53b77061eb03486e1727659c1264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptDispute(address,bytes32,uint16,address,address[],address[],string)": {
        "notice": "See {IHATArbitrator-acceptDispute}. "
      },
      "approveSubmitClaimRequest(address,bytes32,address,uint16,string)": {
        "notice": "See {IHATArbitrator-approveSubmitClaimRequest}. "
      },
      "challengeResolution(address,bytes32,string)": {
        "notice": "See {IHATArbitrator-challengeResolution}. "
      },
      "confiscateDisputers(address,bytes32,address[])": {
        "notice": "See {IHATArbitrator-confiscateDisputers}. "
      },
      "dismissDispute(address,bytes32,string)": {
        "notice": "See {IHATArbitrator-dismissDispute}. "
      },
      "dismissResolution(address,bytes32)": {
        "notice": "See {IHATArbitrator-dismissResolution}. "
      },
      "dismissSubmitClaimRequest(bytes32,string)": {
        "notice": "See {IHATArbitrator-dismissSubmitClaimRequest}. "
      },
      "dispute(address,bytes32,uint256,string)": {
        "notice": "See {IHATArbitrator-dispute}. "
      },
      "executeResolution(address,bytes32)": {
        "notice": "See {IHATArbitrator-executeResolution}. "
      },
      "reclaimBond(address,bytes32)": {
        "notice": "See {IHATArbitrator-reclaimBond}. "
      },
      "refundDisputers(address,bytes32,address[])": {
        "notice": "See {IHATArbitrator-refundDisputers}. "
      },
      "refundExpiredSubmitClaimRequest(bytes32)": {
        "notice": "See {IHATArbitrator-refundExpiredSubmitClaimRequest}. "
      },
      "setCourt(address)": {
        "notice": "See {IHATArbitrator-setCourt}. "
      },
      "submitClaimRequest(string)": {
        "notice": "See {IHATArbitrator-submitClaimRequest}. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 278,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1147,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "expertCommittee",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1149,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "court",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1152,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)461"
      },
      {
        "astId": 1154,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "minBondAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1156,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "bondsNeededToStartDispute",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1158,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "resolutionChallengePeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1160,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "submitClaimRequestReviewPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1169,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "disputersBonds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_uint256)))"
      },
      {
        "astId": 1178,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "bondClaimable",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_bool)))"
      },
      {
        "astId": 1185,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "claimDisputesDismissed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 1192,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "totalBondsOnClaim",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 1200,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "resolutions",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_struct(Resolution)2425_storage))"
      },
      {
        "astId": 1207,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "resolutionChallengedAt",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 1212,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "submitClaimRequests",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(SubmitClaimRequest)2434_storage)"
      },
      {
        "astId": 1214,
        "contract": "contracts/HATArbitrator.sol:HATArbitrator",
        "label": "nonce",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)461": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHATClaimsManager)3119": {
        "encoding": "inplace",
        "label": "contract IHATClaimsManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IHATClaimsManager => mapping(bytes32 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IHATClaimsManager => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Resolution)2425_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IHATArbitrator.Resolution)",
        "numberOfBytes": "32",
        "value": "t_struct(Resolution)2425_storage"
      },
      "t_mapping(t_bytes32,t_struct(SubmitClaimRequest)2434_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IHATArbitrator.SubmitClaimRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(SubmitClaimRequest)2434_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_contract(IHATClaimsManager)3119",
        "label": "mapping(contract IHATClaimsManager => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_struct(Resolution)2425_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IHATClaimsManager)3119",
        "label": "mapping(contract IHATClaimsManager => mapping(bytes32 => struct IHATArbitrator.Resolution))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Resolution)2425_storage)"
      },
      "t_mapping(t_contract(IHATClaimsManager)3119,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IHATClaimsManager)3119",
        "label": "mapping(contract IHATClaimsManager => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Resolution)2425_storage": {
        "encoding": "inplace",
        "label": "struct IHATArbitrator.Resolution",
        "members": [
          {
            "astId": 2420,
            "contract": "contracts/HATArbitrator.sol:HATArbitrator",
            "label": "beneficiary",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2422,
            "contract": "contracts/HATArbitrator.sol:HATArbitrator",
            "label": "bountyPercentage",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2424,
            "contract": "contracts/HATArbitrator.sol:HATArbitrator",
            "label": "resolvedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SubmitClaimRequest)2434_storage": {
        "encoding": "inplace",
        "label": "struct IHATArbitrator.SubmitClaimRequest",
        "members": [
          {
            "astId": 2427,
            "contract": "contracts/HATArbitrator.sol:HATArbitrator",
            "label": "submitter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2429,
            "contract": "contracts/HATArbitrator.sol:HATArbitrator",
            "label": "bond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2431,
            "contract": "contracts/HATArbitrator.sol:HATArbitrator",
            "label": "submittedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2433,
            "contract": "contracts/HATArbitrator.sol:HATArbitrator",
            "label": "descriptionHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}